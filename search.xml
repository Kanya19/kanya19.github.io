<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ts学习笔记（一）</title>
      <link href="2020/12/31/ts%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>2020/12/31/ts%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>JavaScript 与 TypeScript 的区别</p><p>TypeScript 是 JavaScript 的超集，扩展了 JavaScript 的语法，因此现有的 JavaScript 代码可与 TypeScript 一起工作无需任何修改，TypeScript 通过类型注解提供编译时的静态类型检查。</p><p>TypeScript 可处理已有的 JavaScript 代码，并只对其中的 TypeScript 代码进行编译。</p><p>第一个 TypeScript 实例<br>以下实例我们使用 TypeScript 来输出 Hello World!:</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">const</span> hello <span class="token punctuation">:</span> <span class="token keyword">string</span> <span class="token operator">=</span> <span class="token string">"Hello World!"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span></code></pre><p>NPM 安装 TypeScript</p><p>如果你的本地环境已经安装了 npm 工具，可以使用以下命令来安装：</p><pre><code>npm install -g typescript</code></pre><p>安装完成后我们可以使用 tsc 命令来执行 TypeScript 的相关代码，以下是查看版本号：</p><pre><code>$ tsc -vVersion 3.2.2</code></pre><p>通常我们使用 .ts 作为 TypeScript 代码文件的扩展名。</p><p>然后执行以下命令将 TypeScript 转换为 JavaScript 代码：</p><pre><code>tsc test.ts</code></pre><p>这时候再当前目录下（与 test.ts 同一目录）就会生成一个 test.js 文件</p><p>我们可以同时编译多个 ts 文件：</p><pre><code>tsc file1.ts file2.ts file3.ts</code></pre><p>全局装置typescript,tsconfig.json设置文件</p><pre><code>tsc --init</code></pre><p>TypeScript 程序由以下几个部分组成：</p><blockquote><p>模块<br>函数<br>变量<br>语句和表达式<br>注释</p></blockquote><p>–help</p><p>显示帮助信息</p><p>–module</p><p>载入扩展模块</p><p>–target</p><p>设置 ECMA 版本</p><p>–declaration</p><p>额外生成一个 .d.ts 扩展名的文件。</p><pre><code>tsc ts-hw.ts --declaration</code></pre><p>以上命令会生成 ts-hw.d.ts、ts-hw.js 两个文件。</p><p>–removeComments</p><p>删除文件的注释</p><p>–out</p><p>编译多个文件并合并到一个输出的文件</p><p>–sourcemap</p><p>生成一个 sourcemap (.map) 文件。</p><p>sourcemap 是一个存储源代码与编译代码对应位置映射的信息文件。</p><p>–module noImplicitAny</p><p>在表达式和声明上有隐含的 any 类型时报错</p><p>–watch</p><p>在监视模式下运行编译器。会监视输出文件，在它们改变时重新编译。</p><p><strong>null</strong></p><p>在 JavaScript 中 null 表示 “什么都没有”。</p><p>null是一个只有一个值的特殊类型。表示一个空对象引用。</p><p>用 typeof 检测 null 返回是 object。</p><p><strong>undefined</strong></p><p>在 JavaScript 中, undefined 是一个没有设置值的变量。</p><p>typeof 一个没有值的变量会返回 undefined。</p><p>never 类型</p><p>never 是其它类型（包括 null 和 undefined）的子类型，代表从不会出现的值。这意味着声明为 never 类型的变量只能被 never 类型所赋值，在函数中它通常表现为抛出异常或无法执行到终止点（例如无限循环），示例代码如下：</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">let</span> x<span class="token punctuation">:</span> never<span class="token punctuation">;</span><span class="token keyword">let</span> y<span class="token punctuation">:</span> <span class="token keyword">number</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 运行错误，数字类型不能转为 never 类型</span>x <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 运行正确，never 类型可以赋值给 never类型</span>x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'exception'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 运行正确，never 类型可以赋值给 数字类型</span>y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'exception'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 返回值为 never 的函数可以是抛出异常的情况</span><span class="token keyword">function</span> <span class="token function">error</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> <span class="token keyword">string</span><span class="token punctuation">)</span><span class="token punctuation">:</span> never <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 返回值为 never 的函数可以是无法被执行到的终止点的情况</span><span class="token keyword">function</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> never <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>类型断言（Type Assertion）</p><p>类型断言可以用来手动指定一个值的类型，即允许变量从一种类型更改为另一种类型。</p><p>TypeScript 是怎么确定单个断言是否足够<br>当 S 类型是 T 类型的子集，或者 T 类型是 S 类型的子集时，S 能被成功断言成 S。这是为了在进行类型断言时提供额外的安全性，完全毫无根据的断言是危险的，如果你想这么做，你可以使用 any。</p><p>它之所以不被称为类型转换，是因为转换通常意味着某种运行时的支持。但是，类型断言纯粹是一个编译时语法，同时，它也是一种为编译器提供关于如何分析代码的方法。</p><p>类型推断</p><p>当类型没有给出时，TypeScript 编译器利用类型推断来推断类型。</p><p>如果由于缺乏声明而不能推断出类型，那么它的类型被视作默认的动态 any 类型。</p><p>变量作用域</p><p>变量作用域指定了变量定义的位置。</p><p>程序中变量的可用性由变量作用域决定。</p><p>TypeScript 有以下几种作用域：</p><ul><li><p>全局作用域 − 全局变量定义在程序结构的外部，它可以在你代码的任何位置使用。</p></li><li><p>类作用域 − 这个变量也可以称为 字段。类变量声明在一个类里头，但在类的方法外面。 该变量可以通过类的对象来访问。类变量也可以是静态的，静态的变量可以通过类名直接访问。</p></li><li><p>局部作用域 − 局部变量，局部变量只能在声明它的一个代码块（如：方法）中使用。</p></li></ul><p>TypeScript 运算符</p><p>TypeScript 主要包含以下几种运算：</p><ul><li>算术运算符</li><li>逻辑运算符</li><li>关系运算符</li><li>按位运算符</li><li>赋值运算符</li><li>三元/条件运算符</li><li>字符串运算符</li><li>类型运算符</li></ul><p>位运算符</p><p>位操作是程序设计中对位模式按位或二进制数的一元和二元操作。</p><p>Ts工作使用规则</p><ul><li>如果 Ts 能够自动分析变量类型， 我们就什么也不需要做了</li><li>如果 Ts 无法分析变量的类型的话， 我们就需要做类型注解</li></ul><p>ts 类的访问类型</p><ul><li>private 私有的 只能再内部使用，不能在外部使用,也不可以继承后使用</li><li>protected 受保护的 不能直接在外部使用，但是可以继承后在内部使用</li><li>public 共有的 能在外部使用</li></ul><p>类的内部和外部</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 类的内部</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 类的外部</span></code></pre><p>如果不添加类型的话默认为public</p><p>static<br>static 关键字用于定义类的数据成员（属性和方法）为静态的，静态成员可以直接通过类名调用。</p><p>只读属性</p><pre class=" language-ts"><code class="language-ts"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> readonly _name<span class="token punctuation">:</span><span class="token keyword">string</span> <span class="token comment" spellcheck="true">// 设置只读属性</span>    <span class="token keyword">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span><span class="token keyword">string</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_name <span class="token operator">=</span> name    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> kanya <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"zzx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// kanya._name = "kanya"; // 此时对于类中的属性无法进行修改</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>kanya<span class="token punctuation">.</span>_name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>tsconfig.json 的一些方法</p><pre><code>tsc --init&lt;!-- 用于生成tsconfig.js文件 --&gt;</code></pre><pre class=" language-json"><code class="language-json">&amp;#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token property">"include"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> // 要编译的文件（.ts）  <span class="token property">"exclude"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> // 编译除了什么的文件（.ts）  <span class="token property">"files"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> // 和include很像  <span class="token property">"compilerOptions"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>    /* Basic Options */    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es5"</span><span class="token punctuation">,</span>                          /* target用于指定编译之后的版本目标 version<span class="token operator">:</span> 'ES3' (default<span class="token punctuation">)</span><span class="token punctuation">,</span> 'ES5'<span class="token punctuation">,</span> 'ES2015'<span class="token punctuation">,</span> 'ES2016'<span class="token punctuation">,</span> 'ES2017'<span class="token punctuation">,</span>'ES2018' or 'ESNEXT'. */    <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"commonjs"</span><span class="token punctuation">,</span>                     /* 用来指定要使用的模块标准<span class="token operator">:</span> 'none'<span class="token punctuation">,</span> 'commonjs'<span class="token punctuation">,</span> 'amd'<span class="token punctuation">,</span> 'system'<span class="token punctuation">,</span> 'umd'<span class="token punctuation">,</span> 'es2015'<span class="token punctuation">,</span> or 'ESNext'. */    <span class="token property">"lib"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"es6"</span><span class="token punctuation">,</span>      <span class="token string">"dom"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>                             /* lib用于指定要包含在编译中的库文件，这个我们在前面的课程中讲过一点，如果你要使用一些ES6的新语法，你需要引入ES6这个库，或者也可以写ES2015。 */    <span class="token property">"allowJs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                       /* allowJs设置的值为<span class="token boolean">true</span>或<span class="token boolean">false</span>，用来指定是否允许编译JS文件，默认是<span class="token boolean">false</span>，即不编译JS文件。 */    <span class="token property">"checkJs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                       /* checkJs的值为<span class="token boolean">true</span>或<span class="token boolean">false</span>，用来指定是否检查和报告JS文件中的错误，默认是<span class="token boolean">false</span>。 */    <span class="token property">"jsx"</span><span class="token operator">:</span> <span class="token string">"preserve"</span><span class="token punctuation">,</span>                     /* 指定jsx代码用于的开发环境<span class="token operator">:</span> 'preserve'<span class="token punctuation">,</span> 'react-native'<span class="token punctuation">,</span> or 'react'. */    <span class="token property">"declaration"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                   /* declaration的值为<span class="token boolean">true</span>或<span class="token boolean">false</span>，用来指定是否在编译的时候生成相应的<span class="token string">".d.ts"</span>声明文件。如果设为<span class="token boolean">true</span>，编译每个ts文件之后会生成一个js文件和一个声明文件。但是declaration和allowJs不能同时设为<span class="token boolean">true</span>。 */    <span class="token property">"declarationMap"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                /* 值为<span class="token boolean">true</span>或<span class="token boolean">false</span>，指定是否为声明文件.d.ts生成map文件 */    <span class="token property">"sourceMap"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                     /* sourceMap的值为<span class="token boolean">true</span>或<span class="token boolean">false</span>，用来指定编译时是否生成.map文件。 */    <span class="token property">"outFile"</span><span class="token operator">:</span> <span class="token string">"./"</span><span class="token punctuation">,</span>                       /* outFile用于指定将输出文件合并为一个文件，他的值为一个文件路径名，比如设置为<span class="token string">"./dist/main.js"</span>，则输出的文件为一个main.js文件。但是要注意，只有设置module的值为amd和system模块时才支持这个配置。 */    <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"./"</span><span class="token punctuation">,</span>                        /* outDir用来指定输出文件夹，值为一个文件夹路径字符串，输出的文件都将放置在这个文件夹。 */    <span class="token property">"rootDir"</span><span class="token operator">:</span> <span class="token string">"./"</span><span class="token punctuation">,</span>                       /* 用来指定编译文件的根目录，编译器会在根目录查找入口文件，如果编译器发现以rootDir的值作为根目录查找入口文件并不会把所有文件加载进去的话会报错，但是不会停止编译。 */    <span class="token property">"composite"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                     /* 是否编译构建引用项目 */    <span class="token property">"removeComments"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                /* removeComments值为<span class="token boolean">true</span>或<span class="token boolean">false</span>，用于指定是否将编译后的文件中的注释删掉，设为<span class="token boolean">true</span>的话即删掉注释，默认为<span class="token boolean">false</span>。 */    <span class="token property">"noEmit"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                        /* 不生成编译文件，这个一般很少用了。 */    <span class="token property">"importHelpers"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                 /* importHelpers的值为<span class="token boolean">true</span>或<span class="token boolean">false</span>，指定是否引入tslib里的辅助工具函数，默认为<span class="token boolean">false</span>。 */    <span class="token property">"downlevelIteration"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            /* 当target为“ES5”或“ES3”时，为“for-of”、“spread”和“destructuring”中的迭代器提供完全支持。 */    <span class="token property">"isolatedModules"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>               /* isolatedModules的值为<span class="token boolean">true</span>或<span class="token boolean">false</span>，指定是否将每个文件作为单独的模块，默认为<span class="token boolean">true</span>，他不可以和declaration同时设定。 */    /* Strict Type-Checking Options */    <span class="token property">"strict"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                           /* strict的值为<span class="token boolean">true</span>或<span class="token boolean">false</span>，用于指定是否启动所有类型检查，如果设为<span class="token boolean">true</span>则会同时开启下面这几个严格类型检查，默认为<span class="token boolean">false</span>。 */    <span class="token property">"noImplicitAny"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                 /* noImplicitAny的值为<span class="token boolean">true</span>或<span class="token boolean">false</span>，如果我们没有为一些值设置明确的类型，编译器会默认认为这个值为any类型，如果将noImplicitAny设为<span class="token boolean">true</span>，则如果没有设置明确的类型会报错，默认值为<span class="token boolean">false</span>。 */    <span class="token property">"strictNullChecks"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>              /* strictNullChecks的值为<span class="token boolean">true</span>或<span class="token boolean">false</span>，这个配置项我们在前面课程讲过了，当设为<span class="token boolean">true</span>时，<span class="token null">null</span>和undefined值不能赋值给非这两种类型的值，别的类型的值也不能赋给他们， 除了any类型，还有个例外就是undefined可以赋值给void类型。 */    <span class="token property">"strictFunctionTypes"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>           /* strictFunctionTypes的值为<span class="token boolean">true</span>或<span class="token boolean">false</span>，用来指定是否使用函数参数双向协变检查。还记得我们讲类型兼容性的时候讲过函数参数双向协变的这个例子： */    <span class="token property">"strictBindCallApply"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>           /* strictBindCallApply的值为<span class="token boolean">true</span>或<span class="token boolean">false</span>，设为<span class="token boolean">true</span>后会对bind、call和apply绑定的方法的参数的检测是严格检测的 */    <span class="token property">"strictPropertyInitialization"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  /* strictPropertyInitialization的值为<span class="token boolean">true</span>或<span class="token boolean">false</span>，设为<span class="token boolean">true</span>后会检查类的非undefined属性是否已经在构造函数里初始化，如果要开启这项，需要同时开启strictNullChecks，默认为<span class="token boolean">false</span>。 */    <span class="token property">"noImplicitThis"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                /* 当 this表达式的值为 any类型的时候，生成一个错误。 */    <span class="token property">"alwaysStrict"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                  /* alwaysStrict的值为<span class="token boolean">true</span>或<span class="token boolean">false</span>，指定始终以严格模式检查每个模块，并且在编译之后的JS文件中加入<span class="token string">"use strict"</span>字符串，用来告诉浏览器该JS为严格模式。 */    /* Additional Checks */    <span class="token property">"noUnusedLocals"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                /* noUnusedLocals的值为<span class="token boolean">true</span>或<span class="token boolean">false</span>，用于检查是否有定义了但是没有使用的变量，对于这一点的检测，使用ESLint可以在你书写代码的时候做提示，你可以配合使用。他的默认值为<span class="token boolean">false</span> */    <span class="token property">"noUnusedParameters"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            /* noUnusedParameters的值为<span class="token boolean">true</span>或<span class="token boolean">false</span>，用于检查是否有在函数体中没有使用的参数，这个也可以配合ESLint来做检查，他默认是<span class="token boolean">false</span>。 */    <span class="token property">"noImplicitReturns"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>             /* noImplicitReturns的值为<span class="token boolean">true</span>或<span class="token boolean">false</span>，用于检查函数是否有返回值，设为<span class="token boolean">true</span>后，如果函数没有返回值则会提示，默认为<span class="token boolean">false</span>。 */    <span class="token property">"noFallthroughCasesInSwitch"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    /* noFallthroughCasesInSwitch的值为<span class="token boolean">true</span>或<span class="token boolean">false</span>，用于检查switch中是否有case没有使用break跳出switch，默认为<span class="token boolean">false</span>。 */    /* Module Resolution Options */    <span class="token property">"moduleResolution"</span><span class="token operator">:</span> <span class="token string">"node"</span><span class="token punctuation">,</span>            /* moduleResolution用于选择模块解析策略，有<span class="token string">"node"</span>和<span class="token string">"classic"</span>两种类型，我们在讲模块解析的时候已经讲过了。 */    <span class="token property">"baseUrl"</span><span class="token operator">:</span> <span class="token string">"."</span><span class="token punctuation">,</span>                       /* baseUrl用于设置解析非相对模块名称的基本目录，相对模块不会受baseUrl的影响。 */    <span class="token property">"paths"</span><span class="token operator">:</span> &amp;#<span class="token number">123</span><span class="token punctuation">;</span>      <span class="token property">"*"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"node_modules/@types"</span><span class="token punctuation">,</span> <span class="token string">"src/typings"</span><span class="token punctuation">]</span>    &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>                           /* paths用于设置模块名到基于baseUrl的路径映射 */    <span class="token property">"rootDirs"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"src/module"</span><span class="token punctuation">,</span>      <span class="token string">"src/core"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>                        /* rootDirs可以指定一个路径列表，在构建时编译器会将这个路径列表中的路径中的内容都放到一个文件夹中. */    <span class="token property">"typeRoots"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                       /* typeRoots用来指定声明文件或文件夹的路径列表，如果指定了此项，则只有在这里列出的声明文件才会被加载。 */    <span class="token property">"types"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                           /* types用来指定需要包含的模块，只有在这里列出的模块的声明文件才会被加载进来。 */    <span class="token property">"allowSyntheticDefaultImports"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  /* allowSyntheticDefaultImports的值为<span class="token boolean">true</span>或<span class="token boolean">false</span>，用来指定允许从没有默认导出的模块中默认导入。 */    <span class="token property">"esModuleInterop"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                   /* 通过为导入内容创建命名空间，实现CommonJS和ES模块之间的互操作性 */    <span class="token property">"preserveSymlinks"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>              /* 不把符号链接解析为其真实路径，具体可以了解下webpack和nodejs的symlink相关知识 */    /* Source Map Options */    <span class="token property">"sourceRoot"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>                      /* sourceRoot用于指定调试器应该找到TypeScript文件而不是源文件位置，这个值会被写进.map文件里。 */    <span class="token property">"mapRoot"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>                         /* mapRoot用于指定调试器找到映射文件而非生成文件的位置，指定map文件的根路径，该选项会影响.map文件中的sources属性。 */    <span class="token property">"inlineSourceMap"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>               /* inlineSourceMap值为<span class="token boolean">true</span>或<span class="token boolean">false</span>，指定是否将map文件的内容和js文件编译在一个同一个js文件中，如果设为<span class="token boolean">true</span>，则map的内容会以//# sourceMappingURL=然后接base64字符串的形式插入在js文件底部。 */    <span class="token property">"inlineSources"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                 /* inlineSources的值是<span class="token boolean">true</span>或<span class="token boolean">false</span>，用于指定是否进一步将.ts文件的内容也包含到输出文件中。 */    /* Experimental Options */    <span class="token property">"experimentalDecorators"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        /* experimentalDecorators的值是<span class="token boolean">true</span>或<span class="token boolean">false</span>，用于指定是否启用实验性的装饰器特性 */    <span class="token property">"emitDecoratorMetadata"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>         /* emitDecoratorMetadata的值为<span class="token boolean">true</span>或<span class="token boolean">false</span>，用于指定是否为装饰器提供元数据支持，关于元数据，也是ES6的新标准，可以通过Reflect提供的静态方法获取元数据，如果需要使用Reflect的一些方法，需要引入ES2015.Reflect这个库 */  &amp;#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>  <span class="token property">"files"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> // files可以配置一个数组列表，里面包含指定文件的相对或绝对路径，编译器在编译的时候只会编译包含在files中列出的文件。如果不指定，则取决于有没有设置include选项，如果没有include选项，则默认会编译根目录以及所有子目录中的文件。这里列出的路径必须是指定文件，而不是某个文件夹，而且不能使用* ? **/ 等通配符  <span class="token property">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> // include也可以指定要编译的路径列表，但是和files的区别在于，这里的路径可以是文件夹，也可以是文件，可以使用相对和绝对路径，而且可以使用通配符，比如<span class="token string">"./src"</span>即表示要编译src文件夹下的所有文件以及子文件夹的文件。  <span class="token property">"exclude"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> // exclude表示要排除的、不编译的文件，他也可以指定一个列表，规则和include一样，可以是文件可以是文件夹，可以是相对路径或绝对路径，可以使用通配符。  <span class="token property">"extends"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span> // extends可以通过指定一个其他的tsconfig.json文件路径，来继承这个配置文件里的配置，继承来的文件的配置会覆盖当前文件定义的配置。TS在<span class="token number">3.2</span>版本开始，支持继承一个来自Node.js包的tsconfig.json配置文件.  <span class="token property">"compileOnSave"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>// compileOnSave的值是<span class="token boolean">true</span>或<span class="token boolean">false</span>，如果设为<span class="token boolean">true</span>，在我们编辑了项目中文件保存的时候，编辑器会根据tsconfig.json的配置重新生成文件，不过这个要编辑器支持。  <span class="token property">"references"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> // 一个对象数组，指定要引用的项目&amp;#<span class="token number">125</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> TS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随心笔记（一）</title>
      <link href="2020/09/14/%E9%9A%8F%E5%BF%83%E7%AC%94%E8%AE%B0/"/>
      <url>2020/09/14/%E9%9A%8F%E5%BF%83%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>今天遇到一件很有意思的事，原因其实很简单，但上网搜了才找到原因。</p><p>我先获取到了ul，然后准备为其添加子节点，这时候发现虽然我使用appendChild(li)，但实际运行时只成功的添加了一次。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> ul <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"ul"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ulLi<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//返回11 (因为包括#text)</span>li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>什么原因呢？百度知道一位网友的回答很有意思：</p><blockquote><p>每次引用对象时，其实都是调用对象的内存地址，所以在循环中对一个对象添加多次，其实都是添加的同一个对象的内存地址，实际对象的数量并没有增加，<strong>就好比你对你女朋友连说六次爱你，不等于就有6个女朋友吧？</strong> 所以必须在每次循环时都重新创建一个新的对象，这样系统就会为这个新对象分配新的内存空间，然后再添加到父元素中才算是真正的添加。</p></blockquote><p>没错，正是地址引用的原因！我们为ul添加li时，都是对内存地址的添加，那么无论我们添加多少次，获得的结果都是添加一次！要解决这个问题，只需要创建一个循环，然后每次都在循环内重新声明要添加li对象：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> li <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>    ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>    ul<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>哈哈有学到</p>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>es6学习笔记（一）</title>
      <link href="2020/09/13/es6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>2020/09/13/es6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="ECMAScript-6-11"><a href="#ECMAScript-6-11" class="headerlink" title="ECMAScript 6-11"></a>ECMAScript 6-11</h1><h2 id="ECMASript-相关介绍"><a href="#ECMASript-相关介绍" class="headerlink" title="ECMASript 相关介绍"></a>ECMASript 相关介绍</h2><h3 id="1-1-什么是-ECMA"><a href="#1-1-什么是-ECMA" class="headerlink" title="1.1.什么是 ECMA"></a>1.1.什么是 ECMA</h3><p><img src="/child/2020/09/13/es6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/es6.png"><br><strong>ECMA（European Computer Manufacturers Association）</strong> 中文名称为欧洲计算机制<br>造商协会，这个组织的目标是评估、开发和认可电信和计算机标准。1994 年后该组织改名为 Ecma 国际。</p><h3 id="1-2-什么是-ECMAScript"><a href="#1-2-什么是-ECMAScript" class="headerlink" title="1.2.什么是 ECMAScript"></a>1.2.什么是 ECMAScript</h3><blockquote><p>ECMAScript 是由 Ecma 国际通过 ECMA-262 标准化的脚本程序设计语言。</p></blockquote><h3 id="1-3-什么是-ECMA-262"><a href="#1-3-什么是-ECMA-262" class="headerlink" title="1.3.什么是 ECMA-262"></a>1.3.什么是 ECMA-262</h3><p>Ecma 国际制定了许多标准，而 ECMA-262 只是其中的一个，所有标准列表查看<br><a href="http://www.ecma-international.org/publications/standards/Standard.htm">http://www.ecma-international.org/publications/standards/Standard.htm</a></p><h3 id="1-4-ECMA-262-历史"><a href="#1-4-ECMA-262-历史" class="headerlink" title="1.4.ECMA-262 历史"></a>1.4.ECMA-262 历史</h3><p>ECMA-262（ECMAScript）历史版本查看网址</p><p><a href="http://www.ecma-international.org/publications/standards/Ecma-262-arch.htm">http://www.ecma-international.org/publications/standards/Ecma-262-arch.htm</a><br>版本|年份|描述|<br>–:|–:|–:|<br>第 1 版|1997 年|制定了语言的基本语法<br>第 2 版|1998 年|较小改动<br>第 3 版|1999 年|引入正则、异常处理、格式化输出等。IE 开始支持<br>第 4 版|2007 年|过于激进，未发布<br>第 5 版|2009 年|引入严格模式、JSON，扩展对象、数组、原型、字符串、日期方法<br>第 6 版|2015 年|模块化、面向对象语法、Promise、箭头函数、let、const、数组解构赋值等等<br>第 7 版|2016 年|幂运算符、数组扩展、Async/await 关键字<br>第 8 版|2017 年|Async/await、字符串扩展<br>第 9 版|2018 年|对象解构赋值、正则扩展<br>第 10 版|2019 年|扩展对象、数组方法<br>ES.next|动态指向下一个版本</p><p><strong>注：从 ES6 开始，每年发布一个版本，版本号比年份最后一位大 1</strong></p><h3 id="1-5-谁在维护-ECMA-262"><a href="#1-5-谁在维护-ECMA-262" class="headerlink" title="1.5.谁在维护 ECMA-262"></a>1.5.谁在维护 ECMA-262</h3><p>TC39（Technical Committee 39）是推进 ECMAScript 发展的委员会。其会员都是<br>公司（其中主要是浏览器厂商，有苹果、谷歌、微软、因特尔等）。TC39 定期<br>召开会议，会议由会员公司的代表与特邀专家出席</p><h3 id="1-6-为什么要学习-ES6"><a href="#1-6-为什么要学习-ES6" class="headerlink" title="1.6.为什么要学习 ES6"></a>1.6.为什么要学习 ES6</h3><pre><code>⚫ ES6 的版本变动内容最多，具有里程碑意义⚫ ES6 加入许多新的语法特性，编程实现更简单、高效⚫ ES6 是前端发展趋势，就业必备技能</code></pre><h3 id="1-7-ES6-兼容性"><a href="#1-7-ES6-兼容性" class="headerlink" title="1.7.ES6 兼容性"></a>1.7.ES6 兼容性</h3><p><a href="http://kangax.github.io/compat-table/es6/">http://kangax.github.io/compat-table/es6/</a> 可查看兼容性<br><img src="/child/2020/09/13/es6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/es6-v.png"></p><h2 id="ECMASript-6-新特性"><a href="#ECMASript-6-新特性" class="headerlink" title="ECMASript 6 新特性"></a>ECMASript 6 新特性</h2><h3 id="2-1-let-关键字"><a href="#2-1-let-关键字" class="headerlink" title="2.1.let 关键字"></a>2.1.let 关键字</h3><p>let 关键字用来声明变量，使用 let 声明的变量有几个特点：</p><ol><li>不允许重复声明</li><li>块儿级作用域</li><li>不存在变量提升</li><li>不影响作用域链<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">"Kanya"</span></code></pre>应用场景：以后声明变量使用 let 就对了<h3 id="2-2-const-关键字"><a href="#2-2-const-关键字" class="headerlink" title="2.2. const 关键字"></a>2.2. const 关键字</h3>const 关键字用来声明常量，const 声明有以下特点</li><li>声明必须赋初始值</li><li>标识符一般为大写</li><li>不允许重复声明</li><li>值不允许修改</li><li>块儿级作用域<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">"Kanya"</span></code></pre></li></ol><p><strong>注意: 对象属性修改和数组元素变化不会出发 const 错误应用场景：声明对象类型使用 const，非对象类型声明选择 let</strong></p><h3 id="2-3-变量的解构赋值"><a href="#2-3-变量的解构赋值" class="headerlink" title="2.3.变量的解构赋值"></a>2.3.变量的解构赋值</h3><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称<br>为解构赋值。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//数组的解构赋值</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'张学友'</span><span class="token punctuation">,</span> <span class="token string">'刘德华'</span><span class="token punctuation">,</span> <span class="token string">'黎明'</span><span class="token punctuation">,</span> <span class="token string">'郭富城'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">[</span>zhang<span class="token punctuation">,</span> liu<span class="token punctuation">,</span> li<span class="token punctuation">,</span> guo<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//对象的解构赋值</span><span class="token keyword">const</span> lin <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">'林志颖'</span><span class="token punctuation">,</span> tags<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'车手'</span><span class="token punctuation">,</span> <span class="token string">'歌手'</span><span class="token punctuation">,</span> <span class="token string">'小旋风'</span><span class="token punctuation">,</span> <span class="token string">'演员'</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">,</span> tags<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> lin<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//复杂解构</span><span class="token keyword">let</span> wangfei <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">'王菲'</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> songs<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'红豆'</span><span class="token punctuation">,</span> <span class="token string">'流年'</span><span class="token punctuation">,</span> <span class="token string">'暧昧'</span><span class="token punctuation">,</span> <span class="token string">'传奇'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> history<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span> <span class="token string">'窦唯'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span> <span class="token string">'李亚鹏'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span> <span class="token string">'谢霆锋'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>songs<span class="token punctuation">:</span> <span class="token punctuation">[</span>one<span class="token punctuation">,</span> two<span class="token punctuation">,</span> three<span class="token punctuation">]</span><span class="token punctuation">,</span> history<span class="token punctuation">:</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> second<span class="token punctuation">,</span> third<span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">=</span> wangfei<span class="token punctuation">;</span></code></pre><p><strong>注意：频繁使用对象方法、数组元素，就可以使用解构赋值形式</strong></p><h3 id="2-4-模板字符串"><a href="#2-4-模板字符串" class="headerlink" title="2.4.模板字符串"></a>2.4.模板字符串</h3><p>模板字符串（template string）是增强版的字符串，用反引号（`）标识，特点：</p><ol><li>字符串中可以出现换行符</li><li>可以使用 ${xxx} 形式输出变量<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 定义字符串</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token string">`&lt;ul>&lt;li>沈腾&lt;/li>&lt;li>玛丽&lt;/li>&lt;li>魏翔&lt;/li>&lt;li>艾伦&lt;/li>&lt;/ul>`</span></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 变量拼接</span><span class="token keyword">let</span> star <span class="token operator">=</span> <span class="token string">'王宁'</span><span class="token punctuation">;</span><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token template-string"><span class="token string">`$&amp;#123;star&amp;#125;在前几年离开了开心麻花`</span></span><span class="token punctuation">;</span></code></pre></li></ol><p><strong>注意：当遇到字符串与变量拼接的情况使用模板字符串</strong></p><h3 id="2-5-简化对象写法"><a href="#2-5-简化对象写法" class="headerlink" title="2.5.简化对象写法"></a>2.5.简化对象写法</h3><p>ES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法。这<br>样的书写更加简洁。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">'Kanya'</span><span class="token punctuation">;</span><span class="token keyword">let</span> slogon <span class="token operator">=</span> <span class="token string">'永远追求行业更高标准'</span><span class="token punctuation">;</span><span class="token keyword">let</span> improve <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'可以提高你的技能'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//属性和方法简写</span><span class="token keyword">let</span> atguigu <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">,</span> slogon<span class="token punctuation">,</span> improve<span class="token punctuation">,</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'可以改变你'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><p><strong>注意：对象简写形式简化了代码，所以以后用简写就对了</strong></p><h3 id="2-6-箭头函数"><a href="#2-6-箭头函数" class="headerlink" title="2.6.箭头函数"></a>2.6.箭头函数</h3><p>ES6 允许使用「箭头」（=&gt;）定义函数。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/*** 1. 通用写法*/</span><span class="token keyword">let</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> arg3<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">return</span> arg1 <span class="token operator">+</span> arg2 <span class="token operator">+</span> arg3<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><p>箭头函数的注意点:</p><ol><li>如果形参只有一个，则小括号可以省略</li><li>函数体如果只有一条语句，则花括号可以省略，函数的返回值为该条语句的<br>执行结果</li><li>箭头函数 this 指向声明时所在作用域下 this 的值</li><li>箭头函数不能作为构造函数实例化</li><li>不能使用 arguments<br>```javascript<br>/**</li></ol><ul><li><ol start="2"><li>省略小括号的情况</li></ol></li><li>/<br>let fn2 = num =&gt; {<br>return num * 10;<br>};<br>/**</li><li><ol start="3"><li>省略花括号的情况</li></ol></li><li>/<br>let fn3 = score =&gt; score * 20;<br>/**</li><li><ol start="4"><li>this 指向声明时所在作用域中 this 的值</li></ol></li><li>/<br>let fn4 = () =&gt; {<br>console.log(this);<br>} </li></ul><p>let school = {<br> name: ‘Kanya’,<br> getName(){<br> let fn5 = () =&gt; {<br> console.log(this);<br> }<br> fn5();<br> }<br>};</p><pre><code>**注意：箭头函数不会更改 this 指向，用来指定回调函数会非常合适**### 2.7. rest 参数ES6 引入 rest 参数，用于获取函数的实参，用来代替 arguments```javascript/*** 作用与 arguments 类似*/function add(...args)&#123; console.log(args);&#125;add(1,2,3,4,5);/*** rest 参数必须是最后一个形参*/function minus(a,b,...args)&#123; console.log(a,b,args);&#125;minus(100,1,2,3,4,5,19);</code></pre><p><strong>注意：rest 参数非常适合不定个数参数函数的场景</strong></p><h3 id="2-8-spread-扩展运算符"><a href="#2-8-spread-扩展运算符" class="headerlink" title="2.8. spread 扩展运算符"></a>2.8. spread 扩展运算符</h3><p>扩展运算符（spread）也是三个点（…）。它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列，对数组进行解包。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/*** 展开数组*/</span> <span class="token keyword">let</span> tfboys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'德玛西亚之力'</span><span class="token punctuation">,</span><span class="token string">'德玛西亚之翼'</span><span class="token punctuation">,</span><span class="token string">'德玛西亚皇子'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>tfboys<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*** 展开对象*/</span><span class="token keyword">let</span> skillOne <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> q<span class="token punctuation">:</span> <span class="token string">'致命打击'</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">let</span> skillTwo <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> w<span class="token punctuation">:</span> <span class="token string">'勇气'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">let</span> skillThree <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> e<span class="token punctuation">:</span> <span class="token string">'审判'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">let</span> skillFour <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> r<span class="token punctuation">:</span> <span class="token string">'德玛西亚正义'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">let</span> gailun <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">...</span>skillOne<span class="token punctuation">,</span> <span class="token operator">...</span>skillTwo<span class="token punctuation">,</span><span class="token operator">...</span>skillThree<span class="token punctuation">,</span><span class="token operator">...</span>skillFour<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><h3 id="2-9-Symbol"><a href="#2-9-Symbol" class="headerlink" title="2.9.Symbol"></a>2.9.Symbol</h3><h4 id="2-9-1-Symbol-基本使用"><a href="#2-9-1-Symbol-基本使用" class="headerlink" title="2.9.1.Symbol 基本使用"></a>2.9.1.Symbol 基本使用</h4><p>ES6 引入了一种新的原始数据类型 Symbol，表示独一无二的值。它是<br>JavaScript 语言的第七种数据类型，是一种类似于字符串的数据类型。<br>Symbol 特点</p><ol><li>Symbol 的值是唯一的，用来解决命名冲突的问题</li><li>Symbol 值不能与其他数据进行运算</li><li>Symbol 定义 的 对象属 性 不能 使 用 for…in 循 环遍 历 ，但 是可 以 使 用<br>Reflect.ownKeys 来获取对象的所有键名<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//创建 Symbol</span><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> <span class="token keyword">typeof</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加标识的 Symbol</span><span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'Kanya'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> s2_2 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">'Kanya'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2 <span class="token operator">===</span> s2_2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用 Symbol for 定义</span><span class="token keyword">let</span> s3 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token string">'Kanya'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> s3_2 <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token string">'Kanya'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s3 <span class="token operator">===</span> s3_2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><p><strong>注: 遇到唯一性的场景时要想到 Symbol</strong></p><h4 id="2-9-2-Symbol-内置值"><a href="#2-9-2-Symbol-内置值" class="headerlink" title="2.9.2.Symbol 内置值"></a>2.9.2.Symbol 内置值</h4><p>除了定义自己使用的 Symbol 值以外，ES6 还提供了 11 个内置的 Symbol 值，<br>指向语言内部使用的方法。可以称这些方法为魔术方法，因为它们会在特定的场<br>景下自动执行。<br>方法|描述<br>–:|–:|<br>Symbol.hasInstance|当其他对象使用 instanceof 运算符，判断是否为该对象的实例时，会调用这个方法<br>Symbol.isConcatSpreadable|对象的 Symbol.isConcatSpreadable 属性等于的是一个布尔值，表示该对象用于 Array.prototype.concat()时，是否可以展开。<br>Symbol.species|创建衍生对象时，会使用该属性<br>Symbol.match|当执行 str.match(myObject) 时，如果该属性存在，会调用它，返回该方法的返回值。<br>Symbol.replace|当该对象被 str.replace(myObject)方法调用时，会返回该方法的返回值。<br>Symbol.search|当该对象被 str.search (myObject)方法调用时，会返回该方法的返回值。<br>Symbol.split|当该对象被 str.split(myObject)方法调用时，会返回该方法的返回值。<br>Symbol.iterator|对象进行 for…of 循环时，会调用 Symbol.iterator 方法，返回该对象的默认遍历器<br>Symbol.toPrimitive|该对象被转为原始类型的值时，会调用这个方法，返回该对象对应的原始类型值。<br>Symbol. toStringTag|在该对象上面调用 toString 方法时，返回该方法的返回值<br>Symbol. unscopables|该对象指定了使用 with 关键字时，哪些属性会被 with<br>环境排除。</p><h3 id="2-10-迭代器"><a href="#2-10-迭代器" class="headerlink" title="2.10. 迭代器"></a>2.10. 迭代器</h3><p>遍历器（Iterator）就是一种机制。它是一种接口，为各种不同的数据结构提<br>供统一的访问机制。任何数据结构只要部署 Iterator 接口，就可以完成遍历操作。</p><ol><li>ES6 创造了一种新的遍历命令 for…of 循环，Iterator 接口主要供 for…of 消费</li><li>原生具备 iterator 接口的数据(可用 for of 遍历)<ol><li>Array</li><li>Arguments</li><li>Set</li><li>Map</li><li>String</li><li>TypedArray</li><li>NodeList</li></ol></li><li>工作原理<ol><li>创建一个指针对象，指向当前数据结构的起始位置</li><li>第一次调用对象的 next 方法，指针自动指向数据结构的第一个成员</li><li>接下来不断调用 next 方法，指针一直往后移动，直到指向最后一个成员</li><li>每调用 next 方法返回一个包含 value 和 done 属性的对象<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span> <span class="token string">"刀剑神域"</span><span class="token punctuation">,</span>stus<span class="token punctuation">:</span> <span class="token punctuation">[</span>     <span class="token string">'tongren'</span><span class="token punctuation">,</span>     <span class="token string">'yasina'</span><span class="token punctuation">,</span>     <span class="token string">'zhiye'</span><span class="token punctuation">,</span>     <span class="token string">'lifa'</span><span class="token punctuation">,</span>     <span class="token string">'ailisi'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//迭代器遍历</span><span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> <span class="token keyword">let</span> _this<span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     next<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>index<span class="token operator">&lt;</span>_this<span class="token punctuation">.</span>stus<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>value<span class="token punctuation">:</span> _this<span class="token punctuation">.</span>stus<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span>done<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>             index<span class="token operator">++</span><span class="token punctuation">;</span>             <span class="token keyword">return</span> result<span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>             <span class="token keyword">return</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>value<span class="token punctuation">:</span>undefined<span class="token punctuation">,</span>done<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>         <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>     <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> a<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre></li></ol></li></ol><p><strong>注: 需要自定义遍历数据的时候，要想到迭代器。</strong></p><h3 id="2-11-生成器"><a href="#2-11-生成器" class="headerlink" title="2.11. 生成器"></a>2.11. 生成器</h3><p>生成器函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token operator">*</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">yield</span> <span class="token string">'一只没有耳朵'</span><span class="token punctuation">;</span> <span class="token keyword">yield</span> <span class="token string">'一只没有尾巴'</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token string">'真奇怪'</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">let</span> iterator <span class="token operator">=</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>代码说明：</p><ol><li>* 的位置没有限制</li><li>生成器函数返回的结果是迭代器对象，调用迭代器对象的 next 方法可以得到<br>yield 语句后的值</li><li>yield 相当于函数的暂停标记，也可以认为是函数的分隔符，每调用一次 next<br>方法，执行一段代码</li><li>next 方法可以传递实参，作为 yield 语句的返回值<h3 id="2-12-Promise"><a href="#2-12-Promise" class="headerlink" title="2.12. Promise"></a>2.12. Promise</h3>Promise 是 ES6 引入的异步编程的新解决方案。语法上 Promise 是一个构造函数，<br>用来封装异步操作并可以获取其成功或失败的结果。</li><li>Promise 构造函数: Promise (excutor) {}</li><li>Promise.prototype.then 方法</li><li>Promise.prototype.catch 方法<h3 id="2-13-Set"><a href="#2-13-Set" class="headerlink" title="2.13. Set"></a>2.13. Set</h3>ES6 提供了新的数据结构 Set（集合）。它类似于数组，但成员的值都是唯<br>一的，集合实现了 iterator 接口，所以可以使用『扩展运算符』和『for…of…』进<br>行遍历，集合的属性和方法：</li><li>size 返回集合的元素个数</li><li>add 增加一个新元素，返回当前集合</li><li>delete 删除元素，返回 boolean 值</li><li>has 检测集合中是否包含某个元素，返回 boolean 值</li><li>clear 清空集合，返回 undefined</li></ol><p>api</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//创建一个空集合</span><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个非空集合</span><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//集合属性与方法</span><span class="token comment" spellcheck="true">//返回集合的元素个数</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加新元素</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//删除元素</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//检测是否存在某个值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//清空集合</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Set的一些实例</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//Set的一些api操作</span><span class="token comment" spellcheck="true">// api</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1.size 返回集合的元素个数</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 2.add  增加一个新元素，返回当前集合</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 3.delete 删除元素，返回Boolean值</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 4.has  检测集合中是否包含某个元素，返回boolean值</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> arr <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 1.数组去重</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2.交集</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">let</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3.并集</span>    <span class="token keyword">let</span> union <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">,</span><span class="token operator">...</span>arr2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>union<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 4.差集</span>    <span class="token keyword">let</span> diff <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> diff <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=</span><span class="token operator">></span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-14-Map"><a href="#2-14-Map" class="headerlink" title="2.14. Map"></a>2.14. Map</h3><p>ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合。但是“键”<br>的范围不限于字符串，各种类型的值（包括对象）都可以当作键。Map 也实现了<br>iterator 接口，所以可以使用『扩展运算符』和『for…of…』进行遍历。Map 的属<br>性和方法：</p><ol><li>size 返回 Map 的元素个数</li><li>set 增加一个新元素，返回当前 Map</li><li>get 返回键名对象的键值</li><li>has 检测 Map 中是否包含某个元素，返回 boolean 值</li><li>clear 清空集合，返回 undefined<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//创建一个空 map</span><span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建一个非空 map</span><span class="token keyword">let</span> m2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'Kanya'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'slogon'</span><span class="token punctuation">,</span><span class="token string">'不断提高行业标准'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//属性和方法</span><span class="token comment" spellcheck="true">//获取映射元素的个数</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m2<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//添加映射值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m2<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取映射值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m2<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//检测是否有该映射</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m2<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//清除</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m2<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>Map实例<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// map类似对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键，map也有iterator接口，所以也可以用扩展运算符和for of</span><span class="token comment" spellcheck="true">// api</span><span class="token comment" spellcheck="true">// 1.size   返回map元素的个数</span><span class="token comment" spellcheck="true">// 2.set    增加一个新元素，返回当前map set(键名，值)</span><span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">'kanya'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'healing'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"我需要治疗"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">let</span> place <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> pl<span class="token punctuation">:</span> <span class="token string">'正在进入'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>place<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'努巴尼'</span><span class="token punctuation">,</span><span class="token string">'66号公路'</span><span class="token punctuation">,</span><span class="token string">'艾兴瓦尔德'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 3.get    返回键名对象的键值</span>m<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"healing"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"healing"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 4.has    检测map中是否含有某个元素，返回Boolean值</span><span class="token comment" spellcheck="true">// 5.clear  清空集合，返回undefined</span>m<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 6.for of 遍历</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">of</span> m<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  </code></pre><h3 id="2-15-class-类"><a href="#2-15-class-类" class="headerlink" title="2.15. class 类"></a>2.15. class 类</h3><del>是真TM的好用，之前学过C++的知识一下就贯通了</del></li></ol><p>ES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对<br>象的模板。通过 class 关键字，可以定义类。基本上，ES6 的 class 可以看作只是<br>一个语法糖，它的绝大部分功能，ES5 都可以做到，新的 class 写法只是让对象<br>原型的写法更加清晰、更像面向对象编程的语法而已。<br>知识点：</p><ol><li>class 声明类</li><li>constructor 定义构造函数初始化</li><li>extends 继承父类</li><li>super 调用父级构造方法</li><li>static 定义静态方法和属性</li><li>父类方法可以重写<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//父类</span><span class="token keyword">class</span> <span class="token class-name">Phone</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//构造方法</span><span class="token function">constructor</span><span class="token punctuation">(</span>brand<span class="token punctuation">,</span> color<span class="token punctuation">,</span> price<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>price <span class="token operator">=</span> price<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//对象方法</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我可以打电话!!!'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//子类</span><span class="token keyword">class</span> <span class="token class-name">SmartPhone</span> <span class="token keyword">extends</span> <span class="token class-name">Phone</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token function">constructor</span><span class="token punctuation">(</span>brand<span class="token punctuation">,</span> color<span class="token punctuation">,</span> price<span class="token punctuation">,</span> screen<span class="token punctuation">,</span> pixel<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">super</span><span class="token punctuation">(</span>brand<span class="token punctuation">,</span> color<span class="token punctuation">,</span> price<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>screen <span class="token operator">=</span> screen<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>pixel <span class="token operator">=</span> pixel<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//子类方法</span><span class="token function">photo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我可以拍照!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">playGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我可以玩游戏!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法重写</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我可以进行视频通话!!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//静态方法</span><span class="token keyword">static</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我可以运行程序'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我可以建立连接'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//实例化对象</span><span class="token keyword">const</span> Nokia <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token string">'诺基亚'</span><span class="token punctuation">,</span> <span class="token string">'灰色'</span><span class="token punctuation">,</span> <span class="token number">230</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> iPhone6s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SmartPhone</span><span class="token punctuation">(</span><span class="token string">'苹果'</span><span class="token punctuation">,</span> <span class="token string">'白色'</span><span class="token punctuation">,</span> <span class="token number">6088</span><span class="token punctuation">,</span> <span class="token string">'4.7inch'</span><span class="token punctuation">,</span><span class="token string">'500w'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用子类方法</span>iPhone6s<span class="token punctuation">.</span><span class="token function">playGame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用重写方法</span>iPhone6s<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用静态方法</span>SmartPhone<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-16-数值扩展"><a href="#2-16-数值扩展" class="headerlink" title="2.16. 数值扩展"></a>2.16. 数值扩展</h3><h4 id="2-16-1-二进制和八进制"><a href="#2-16-1-二进制和八进制" class="headerlink" title="2.16.1. 二进制和八进制"></a>2.16.1. 二进制和八进制</h4>ES6 提供了二进制和八进制数值的新的写法，分别用前缀 0b 和 0o 表示。<h4 id="2-16-2-Number-isFinite-与-Number-isNaN"><a href="#2-16-2-Number-isFinite-与-Number-isNaN" class="headerlink" title="2.16.2. Number.isFinite() 与 Number.isNaN()"></a>2.16.2. Number.isFinite() 与 Number.isNaN()</h4> Number.isFinite() 用来检查一个数值是否为有限的<br> Number.isNaN() 用来检查一个值是否为 NaN<h4 id="2-16-3-Number-parseInt-与-Number-parseFloat"><a href="#2-16-3-Number-parseInt-与-Number-parseFloat" class="headerlink" title="2.16.3. Number.parseInt() 与 Number.parseFloat()"></a>2.16.3. Number.parseInt() 与 Number.parseFloat()</h4>ES6 将全局方法 parseInt 和 parseFloat，移植到 Number 对象上面，使用不变。<h4 id="2-16-4-Math-trunc"><a href="#2-16-4-Math-trunc" class="headerlink" title="2.16.4. Math.trunc"></a>2.16.4. Math.trunc</h4>用于去除一个数的小数部分，返回整数部分。</li></ol><h4 id="2-16-5-Number-isInteger"><a href="#2-16-5-Number-isInteger" class="headerlink" title="2.16.5. Number.isInteger"></a>2.16.5. Number.isInteger</h4><p>Number.isInteger() 用来判断一个数值是否为整数</p><h3 id="2-17-对象扩展"><a href="#2-17-对象扩展" class="headerlink" title="2.17. 对象扩展"></a>2.17. 对象扩展</h3><p>ES6 新增了一些 Object 对象的方法</p><ol><li><p>Object.is 比较两个值是否严格相等，与『===』行为基本一致（+0 与 NaN）</p></li><li><p>Object.assign 对象的合并，将源对象的所有可枚举属性，复制到目标对象</p></li><li><p>__proto__、setPrototypeOf、 setPrototypeOf 可以直接设置对象的原型</p><h3 id="2-18-模块化"><a href="#2-18-模块化" class="headerlink" title="2.18. 模块化"></a>2.18. 模块化</h3><p>模块化是指将一个大的程序文件，拆分成许多小的文件，然后将小文件组合起来。</p><h4 id="2-18-1-模块化的好处"><a href="#2-18-1-模块化的好处" class="headerlink" title="2.18.1. 模块化的好处"></a>2.18.1. 模块化的好处</h4><p>模块化的优势有以下几点：</p></li><li><p>防止命名冲突</p></li><li><p>代码复用</p></li><li><p>高维护性</p><h4 id="2-18-2-模块化规范产品"><a href="#2-18-2-模块化规范产品" class="headerlink" title="2.18.2. 模块化规范产品"></a>2.18.2. 模块化规范产品</h4><p>ES6 之前的模块化规范有：</p></li><li><p>CommonJS =&gt; NodeJS、Browserify</p></li><li><p>AMD =&gt; requireJS</p></li><li><p>CMD =&gt; seaJS</p><h4 id="2-18-3-ES6-模块化语法"><a href="#2-18-3-ES6-模块化语法" class="headerlink" title="2.18.3. ES6 模块化语法"></a>2.18.3. ES6 模块化语法</h4><p>模块功能主要由两个命令构成：export 和 import。 </p><p> ⚫ export 命令用于规定模块的对外接口<br> ⚫ import 命令用于输入其他模块提供的功能</p></li></ol><p>模块化样例</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">// 通用导入方式</span>        <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> m1 <span class="token keyword">from</span> <span class="token string">"/m1.js"</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> m2 <span class="token keyword">from</span> <span class="token string">"/m2.js"</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> m3 <span class="token keyword">from</span> <span class="token string">"/m3.js"</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 解构赋值形式</span>        <span class="token keyword">import</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>s <span class="token keyword">as</span> s1<span class="token punctuation">,</span>loop <span class="token keyword">as</span> loop1<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">"/m1.js"</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>loop1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">import</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>s <span class="token keyword">as</span> s2<span class="token punctuation">,</span>loop <span class="token keyword">as</span> loop2<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">"/m2.js"</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span>loop2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">import</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">default</span> <span class="token keyword">as</span> m3<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">from</span> <span class="token string">"./m3.js"</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 简便形式   只能针对默认暴露</span>        <span class="token keyword">import</span> m3 <span class="token keyword">from</span> <span class="token string">"/m3.js"</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m3<span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 避免在script中占用太多的方式 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app.js<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>其中的外部连接如下</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// m1.js</span><span class="token keyword">export</span> <span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">"Kanya"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">function</span> loop <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"m1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//m2.js</span><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">"Kanya"</span><span class="token punctuation">;</span><span class="token keyword">function</span> loop <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"m2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">export</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>s<span class="token punctuation">,</span>loop<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//m3.js</span><span class="token keyword">export</span> <span class="token keyword">default</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    s <span class="token punctuation">:</span><span class="token string">"Kanya"</span><span class="token punctuation">,</span>    loop <span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"m3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// app.js</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> m1 <span class="token keyword">from</span> <span class="token string">"/m1.js"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> m2 <span class="token keyword">from</span> <span class="token string">"/m2.js"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> m3 <span class="token keyword">from</span> <span class="token string">"/m3.js"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//也可以建立普通的js外部连接观察不同之处</span></code></pre><h2 id="ECMASript-7-新特性"><a href="#ECMASript-7-新特性" class="headerlink" title="ECMASript 7 新特性"></a>ECMASript 7 新特性</h2><h3 id="3-1-Array-prototype-includes"><a href="#3-1-Array-prototype-includes" class="headerlink" title="3.1.Array.prototype.includes"></a>3.1.Array.prototype.includes</h3><p>Includes 方法用来检测数组中是否包含某个元素，返回布尔类型值</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token string">"hellow world"</span><span class="token comment" spellcheck="true">// include 判断是否存在，类似macth和indexOf</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"h"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3-2-指数操作符"><a href="#3-2-指数操作符" class="headerlink" title="3.2.指数操作符"></a>3.2.指数操作符</h3><p>在 ES7 中引入指数运算符「**」，用来实现幂运算，功能与 Math.pow 结果相同</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//指数操作符 **</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="ECMASript-8-新特性"><a href="#ECMASript-8-新特性" class="headerlink" title="ECMASript 8 新特性"></a>ECMASript 8 新特性</h2><h3 id="4-1-async-和-await"><a href="#4-1-async-和-await" class="headerlink" title="4.1.async 和 await"></a>4.1.async 和 await</h3><p>async 和 await 两种语法结合可以让异步代码像同步代码一样</p><blockquote><p>ps:这里插一嘴，异步编程解决方案</p></blockquote><pre><code>1. 生成器函数2. promise3. es8新增async和await</code></pre><h4 id="4-1-1-async-函数"><a href="#4-1-1-async-函数" class="headerlink" title="4.1.1.async 函数"></a>4.1.1.async 函数</h4><ol><li><p>async 函数的返回值为 promise 对象，</p></li><li><p>promise 对象的结果由 async 函数执行的返回值决定</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// async</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 返回字符串  只要不是返回promise对象，则视为返回的是成功的promise</span> <span class="token comment" spellcheck="true">// return "Kanya";</span> <span class="token comment" spellcheck="true">// return;</span> <span class="token comment" spellcheck="true">// 抛出错误，返回的结果是一个失败的promise对象</span> <span class="token comment" spellcheck="true">// throw new Error("出错了")</span> <span class="token comment" spellcheck="true">// 返回的结果如果是一个promise对象</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"成功的数据"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// reject("失败的数据")</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// console.log(result);</span>result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>reason<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h4 id="4-1-2-await-表达式"><a href="#4-1-2-await-表达式" class="headerlink" title="4.1.2.await 表达式"></a>4.1.2.await 表达式</h4></li><li><p>await 必须写在 async 函数中</p><p> <del>就是那种，你可以没有我，但是我布恩那个没有你的那个意思（卧槽好像舔狗啊，心疼await一秒）</del></p></li><li><p>await 右侧的表达式一般为 promise 对象</p></li><li><p>await 返回的是 promise 成功的值</p></li><li><p>await 的 promise 失败了, 就会抛出异常, 需要通过 try…catch 捕获处理</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// await 要放在async中间</span>创建promise对象<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// resolve("返回成功的值");</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"返回失败的值"</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token keyword">try</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">await</span> p<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// await 返回的结果是promise 对象成功的结果</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">error</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用函数main</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol><p>// async 和 await结合使用</p><pre><code>### 4.2.Object.values 和 Object.entries1. Object.values()方法返回一个给定对象的所有可枚举属性值的数组2. Object.entries()方法返回一个给定对象自身可遍历属性 [key,value] 的数组### 4.3.Object.getOwnPropertyDescriptors该方法返回指定对象所有自身属性的描述对象```javascript // 声明一个对象    const person =&#123;        name: &quot;Kanya&quot;,        age: 21,        skill: [&#39;C++&#39;,&#39;算法&#39;,&#39;数据库&#39;,&#39;前端&#39;,&#39;unity&#39;]    &#125;;    //获取对象所有的键    console.log(Object.keys(person));    //获取对象所有的值    console.log(Object.values(person))    //entries    console.log(Object.entries(person));// 返回结果是个数组，其中的每个元素也是个数组，数组中第一个元素是键，第二个元素是值，这样的结果可以方便去创建一个map    // 创建map    const m = new Map(Object.entries(person));    console.log(m);    // getOwnPropertyDescriptors    console.log(Object.getOwnPropertyDescriptors(person));//返回的结果是对象属性的描述对象    //什么是对象属性的描述对象？    //例如    const obj = Object.create(null,&#123;        name:&#123;            //以下为对象属性的描述对象，也就是getOwnPropertyDescriptors所得到的东西            //设置值            value:&quot;kanya&quot;,            //属性特性            writable:true,//是否可写            configurable:true,//是否可以删除            enumerable:true//是否可以枚举        &#125;    &#125;)</code></pre><h2 id="ECMASript-9-新特性"><a href="#ECMASript-9-新特性" class="headerlink" title="ECMASript 9 新特性"></a>ECMASript 9 新特性</h2><h3 id="5-1-Rest-Spread-属性"><a href="#5-1-Rest-Spread-属性" class="headerlink" title="5.1.Rest/Spread 属性"></a>5.1.Rest/Spread 属性</h3><p>Rest 参数与 spread 扩展运算符在 ES6 中已经引入，不过 ES6 中只针对于数组，<br>在 ES9 中为对象提供了像数组一样的 rest 参数和扩展运算符</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> <span class="token operator">...</span>user<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> host<span class="token punctuation">:</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span> port<span class="token punctuation">:</span> <span class="token number">3306</span><span class="token punctuation">,</span> username<span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span> password<span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token string">'master'</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="5-2-正则表达式命名捕获组"><a href="#5-2-正则表达式命名捕获组" class="headerlink" title="5.2.正则表达式命名捕获组"></a>5.2.正则表达式命名捕获组</h3><p>ES9 允许命名捕获组使用符号『?<name>』,这样获取捕获结果可读性更强</name></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'&lt;a href="http://www.atguigu.com">Kanya&lt;/a>'</span><span class="token punctuation">;</span><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex">/&lt;a href="(?&lt;url>.*)">(?&lt;text>.*)&lt;\/a>/</span><span class="token punctuation">;</span><span class="token keyword">const</span> result <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>groups<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span>groups<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="5-3-正则表达式反向断言"><a href="#5-3-正则表达式反向断言" class="headerlink" title="5.3.正则表达式反向断言"></a>5.3.正则表达式反向断言</h3><p>ES9 支持反向断言，通过对匹配结果前面的内容进行判断，对匹配进行筛选。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//声明字符串</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token string">'JS5211314 你知道么 555 啦啦啦'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//正向断言</span><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex">/\d+(?=啦)/</span><span class="token punctuation">;</span><span class="token keyword">const</span> result <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//反向断言</span><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token regex">/(?&lt;=么)\d+/</span><span class="token punctuation">;</span><span class="token keyword">const</span> result <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="5-4-正则表达式-dotAll-模式"><a href="#5-4-正则表达式-dotAll-模式" class="headerlink" title="5.4.正则表达式 dotAll 模式"></a>5.4.正则表达式 dotAll 模式</h3><p>正则表达式中点.匹配除回车外的任何单字符，标记『s』改变这种行为，允许行<br>终止符出现</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token string">`&lt;ul> &lt;li> &lt;a>肖生克的救赎&lt;/a> &lt;p>上映日期: 1994-09-10&lt;/p> &lt;/li> &lt;li> &lt;a>阿甘正传&lt;/a> &lt;p>上映日期: 1994-07-06&lt;/p> &lt;/li>&lt;/ul>`</span></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//声明正则</span><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token operator">/</span><span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">?</span><span class="token operator">&lt;</span>a<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>\<span class="token operator">/</span>a<span class="token operator">></span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">?</span><span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>\<span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">/</span>gs<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//执行匹配</span><span class="token keyword">const</span> result <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> result<span class="token punctuation">;</span><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>result <span class="token operator">=</span> reg<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> data<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>title<span class="token punctuation">:</span> result<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> time<span class="token punctuation">:</span> result<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="ECMASript-10-新特性"><a href="#ECMASript-10-新特性" class="headerlink" title="ECMASript 10 新特性"></a>ECMASript 10 新特性</h2><h3 id="6-1-Object-fromEntries"><a href="#6-1-Object-fromEntries" class="headerlink" title="6.1.Object.fromEntries"></a>6.1.Object.fromEntries</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 二维数组</span><span class="token keyword">const</span> result <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span><span class="token punctuation">[</span>    <span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'源氏'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token string">'skill'</span><span class="token punctuation">,</span><span class="token string">'尝尝神龙之刃'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Map</span><span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">'源氏'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> result <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// PS：Object.entries es8 中，可以将一个对象转变成二维数组</span><span class="token comment" spellcheck="true">// 所以就可以发现了，Object.fromEntries是Object.entries的逆运算，即将一个二维数组转化成一个对象</span></code></pre><h3 id="6-2-trimStart-和-trimEnd"><a href="#6-2-trimStart-和-trimEnd" class="headerlink" title="6.2.trimStart 和 trimEnd"></a>6.2.trimStart 和 trimEnd</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// s.trimStart;</span><span class="token comment" spellcheck="true">// s.trimEnd</span><span class="token comment" spellcheck="true">// PS:在 es5 中字符串就有trim方法，即清除字符串两边的空字符</span><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">"  ereert  "</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>s<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">trimStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">trimStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 清除左边空白</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">trimEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>s<span class="token punctuation">.</span><span class="token function">trimEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 清除右边空白</span></code></pre><h3 id="6-3-Array-prototype-flat-与-flatMap"><a href="#6-3-Array-prototype-flat-与-flatMap" class="headerlink" title="6.3.Array.prototype.flat 与 flatMap"></a>6.3.Array.prototype.flat 与 flatMap</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// flat flatMap</span><span class="token comment" spellcheck="true">//flat 可以将一个多维数组转变成低维数组</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// arr.flat(x)，x表示数组深度，默认为1，例如要将一个三位数组转化为一维数组，则深度为2，x就为2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// flatMap</span><span class="token comment" spellcheck="true">// 类似与flat + Map 的操作，即当map内部返回的是一个多维数组的时候，可以直接将返回的多维数组转化为一维数组</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> result <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span>item<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">[</span>item<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="6-4-Symbol-prototype-description"><a href="#6-4-Symbol-prototype-description" class="headerlink" title="6.4.Symbol.prototype.description"></a>6.4.Symbol.prototype.description</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 创建Symbol</span><span class="token keyword">let</span> s <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">"Kanya"</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="ECMASript-11-新特性"><a href="#ECMASript-11-新特性" class="headerlink" title="ECMASript 11 新特性"></a>ECMASript 11 新特性</h2><h3 id="7-1-String-prototype-matchAll"><a href="#7-1-String-prototype-matchAll" class="headerlink" title="7.1.String.prototype.matchAll"></a>7.1.String.prototype.matchAll</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// matchAll 用于得到正则批量匹配的结果，在正则匹配获取数据方面是非常实用的,matchAll方法对数据的批量提取是非常有效的</span><span class="token keyword">let</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token string">`&lt;ul>    &lt;li>        &lt;a>源氏&lt;/a>        &lt;p>尝尝神龙之刃&lt;/p>    &lt;/li>    &lt;li>        &lt;a>半藏&lt;/a>        &lt;p>让巨龙吞噬你&lt;/p>    &lt;/li>&lt;/ul>`</span></span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//声明正则</span><span class="token keyword">const</span> reg <span class="token operator">=</span> <span class="token operator">/</span><span class="token operator">&lt;</span>li<span class="token operator">></span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">?</span><span class="token operator">&lt;</span>a<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>\<span class="token operator">/</span>a<span class="token operator">></span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">?</span><span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">?</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>\<span class="token operator">/</span>p<span class="token operator">></span><span class="token operator">/</span>gs<span class="token comment" spellcheck="true">// 调用方法</span><span class="token keyword">const</span> result <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">matchAll</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 因为里面有next方法,他是一个可迭代对象,可以很方便的使用forof循环遍历，也可以使用扩展运算符做一个展开</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> result<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>result<span class="token punctuation">]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 类数组可以进行这样的下标提取</span></code></pre><h3 id="7-2-类的私有属性"><a href="#7-2-类的私有属性" class="headerlink" title="7.2.类的私有属性"></a>7.2.类的私有属性</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 私有属性在面向对象的语法当中是一个非常重要的特性，是对属性的一种封装，不让外部直接对他进行操作</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 共有属性</span>    name<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 私有属性</span>    #age<span class="token punctuation">;</span>    #weight<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 构造方法</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>weight<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>#age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>#weight <span class="token operator">=</span> weight    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 私有属性无法在外部调用，但是可一在对象内部调用</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>#age<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>#weight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">const</span> girl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'Dolly19'</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token string">'52kg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>girl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 令我不解的是，为啥单个属性无法在外部调用但是显示整个对象时还是会出现，我个人觉得好像不是很好。私有属性，看看你都保护了什么（滑稽）</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>girl<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// console.log(girl.#age);</span><span class="token comment" spellcheck="true">// console.log(girl.#weight);</span>girl<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="7-3-Promise-allSettled"><a href="#7-3-Promise-allSettled" class="headerlink" title="7.3.Promise.allSettled"></a>7.3.Promise.allSettled</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// promise.allSettled </span><span class="token comment" spellcheck="true">// 这个方法接受一个promise数组，返回的结果也是一个promise对象，且这个结果永远是成功的状态，这个成功的值是里面每一个promise他们的状态和结果，就算是失败的状态也会接收，具体看样例</span><span class="token keyword">const</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用setTimeout进行一个异步任务的模拟</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"成功的数据 - 1"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// reject("失败的数据 - 1")</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token keyword">const</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 使用setTimeout进行一个异步任务的模拟</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// resolve("成功的数据 - 2")</span>        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"失败的数据 - 2"</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 调用allSettled方法</span><span class="token keyword">const</span> result <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">allSettled</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ps: 之前也有一个promise.all 的方法类似，但promise.all方法只有在全部返回状态为成功是才会显示成功，只要有一个失败了整个的状态就是失败的，且失败的值就是数组中那个失败的值</span><span class="token comment" spellcheck="true">// ps: 简单的来说，就类似与&amp;&amp;和||的区别（好像这样理解会好点），这两个方法都是可以用于批量异步的场景，根据实际情况使用</span><span class="token keyword">const</span> res <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ps： 这里再介绍一个方法，promise.race,race为赛跑的意思，即数组中promise哪个获得状态的速度越快，就返回哪个值，且不管本身的结果是成功还是失败</span><span class="token keyword">const</span> resR <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">race</span><span class="token punctuation">(</span><span class="token punctuation">[</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resR<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="7-4-可选链操作符"><a href="#7-4-可选链操作符" class="headerlink" title="7.4.可选链操作符"></a>7.4.可选链操作符</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">//?.  免层级判断</span><span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// const dbHost = config &amp;&amp; config.db &amp;&amp; config.db.host;// 以往操作</span>    <span class="token keyword">const</span> dbHost <span class="token operator">=</span> config<span class="token operator">?</span><span class="token punctuation">.</span>db<span class="token operator">?</span><span class="token punctuation">.</span>host<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这样可以免去我们做层层判断的麻烦</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>dbHost<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    db<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        host<span class="token punctuation">:</span> <span class="token string">'192.168.1.100'</span><span class="token punctuation">,</span>        username<span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>        password<span class="token punctuation">:</span> <span class="token string">'root'</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    cache<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        host<span class="token punctuation">:</span> <span class="token string">'192.168.1.200'</span><span class="token punctuation">,</span>        username<span class="token punctuation">:</span> <span class="token string">'admin'</span><span class="token punctuation">,</span>        password<span class="token punctuation">:</span> <span class="token string">'admin'</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><h3 id="7-5-动态-import-导入"><a href="#7-5-动态-import-导入" class="headerlink" title="7.5.动态 import 导入"></a>7.5.动态 import 导入</h3><pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">// 以往静态引入时的操作</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> m1 <span class="token keyword">from</span> <span class="token string">"/hello.js"</span><span class="token punctuation">;</span>m1<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 动态引入import的操作</span><span class="token comment" spellcheck="true">//获取元素</span><span class="token keyword">const</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"btn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 动态引入，返回的是一个promise方法，且在调用之前不会引入，提高效率</span>    <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'/hello.js'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>module<span class="token operator">=</span><span class="token operator">></span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// console.log(module);</span>        module<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="7-6-globalThis-对象"><a href="#7-6-globalThis-对象" class="headerlink" title="7.6.globalThis 对象"></a>7.6.globalThis 对象</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">"2123"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>globalThis<span class="token punctuation">.</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> es6 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大不了重新再来</title>
      <link href="2020/09/10/%E5%A4%A7%E4%B8%8D%E4%BA%86%E9%87%8D%E6%96%B0%E5%86%8D%E6%9D%A5/"/>
      <url>2020/09/10/%E5%A4%A7%E4%B8%8D%E4%BA%86%E9%87%8D%E6%96%B0%E5%86%8D%E6%9D%A5/</url>
      
        <content type="html"><![CDATA[<p> 事情怎么说呢，说简单也是简单，说复杂也是复杂，总的来说就是某个弱智想去重装一下系统然后突然贤者模式爆发想和电脑里的各种玩意儿同归于尽然后结果本地保存的hexo配置文件内容无了<del>但是重装真的爽到</del>，本以为已经保存到gitee上的东西下载回来应该能够挽回损失，但是发现只有些运行文件，配置和内容都没了/(ㄒoㄒ)/~~</p><p> 现在本地重新搭建好环境，重新换了个新的主题，原来的还是能够使用的，但是已经不能继续更新了<del>再更新就真的木大木大了</del>，重新申请一个库，重新开始吧，原来的内容等有空再搬过来吧，现在重新开始吧。</p><p> 对了还有，hellow world，我是Kanya，以后多多指教o(<em>￣▽￣</em>)ブ</p>]]></content>
      
      
      <categories>
          
          <category> 碎碎念 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 碎碎念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax基础笔记（一）</title>
      <link href="2020/09/01/Ajax%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>2020/09/01/Ajax%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="原生-AJAX"><a href="#原生-AJAX" class="headerlink" title="原生 AJAX"></a>原生 AJAX</h2><h3 id="AJAX-简介"><a href="#AJAX-简介" class="headerlink" title="AJAX 简介"></a>AJAX 简介</h3><blockquote><p>AJAX 全称为 Asynchronous JavaScript And XML，就是异步的 JS 和 XML。</p><p>通过 AJAX 可以在浏览器中向服务器发送异步请求，最大的优势：无刷新获取数据。</p><p>AJAX 不是新的编程语言，而是一种将现有的标准组合在一起使用的新方式。</p></blockquote><h3 id="XML-简介"><a href="#XML-简介" class="headerlink" title="XML 简介"></a>XML 简介</h3><blockquote><p>XML 可扩展标记语言。</p><p>XML 被设计用来传输和存储数据。</p><p>XML 和 HTML 类似，不同的是 HTML 中都是预定义标签，而 XML 中没有预定义标签，全都是自定义标签，用来表示一些数据。<br>比如说我有一个学生数据：</p></blockquote><pre class=" language-javascript"><code class="language-javascript">name <span class="token operator">=</span> <span class="token string">"孙悟空"</span> <span class="token punctuation">;</span> age <span class="token operator">=</span> <span class="token number">18</span> <span class="token punctuation">;</span> gender <span class="token operator">=</span> <span class="token string">"男"</span> <span class="token punctuation">;</span>用 XML 表示：<span class="token operator">&lt;</span>student<span class="token operator">></span><span class="token operator">&lt;</span>name<span class="token operator">></span>孙悟空<span class="token operator">&lt;</span><span class="token operator">/</span>name<span class="token operator">></span><span class="token operator">&lt;</span>age<span class="token operator">></span><span class="token number">18</span><span class="token operator">&lt;</span><span class="token operator">/</span>age<span class="token operator">></span><span class="token operator">&lt;</span>gender<span class="token operator">></span>男<span class="token operator">&lt;</span><span class="token operator">/</span>gender<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>student<span class="token operator">></span></code></pre><blockquote><p>现在已经被 JSON 取代了。</p></blockquote><pre class=" language-javascript"><code class="language-javascript">用 JSON 表示：<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span><span class="token string">"age"</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">"gender"</span><span class="token punctuation">:</span><span class="token string">"男"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h3 id="AJAX-的特点"><a href="#AJAX-的特点" class="headerlink" title="AJAX 的特点"></a>AJAX 的特点</h3><h4 id="AJAX-的优点"><a href="#AJAX-的优点" class="headerlink" title="AJAX 的优点"></a>AJAX 的优点</h4><ol><li>可以无需刷新页面而与服务器端进行通信。</li><li>允许你根据用户事件来更新部分页面内容。<h4 id="AJAX-的缺点"><a href="#AJAX-的缺点" class="headerlink" title="AJAX 的缺点"></a>AJAX 的缺点</h4></li><li>没有浏览历史，不能回退</li><li>存在跨域问题(同源)</li><li>SEO 不友好</li></ol><h3 id="AJAX-的使用"><a href="#AJAX-的使用" class="headerlink" title="AJAX 的使用"></a>AJAX 的使用</h3><h4 id="核心对象"><a href="#核心对象" class="headerlink" title="核心对象"></a>核心对象</h4><p>XMLHttpRequest，AJAX 的所有操作都是通过该对象进行的。</p><h4 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h4><ol><li>创建 XMLHttpRequest 对象<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>设置请求信息<pre class=" language-javascript"><code class="language-javascript">xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以设置请求头，一般不设置</span></code></pre></li></ol><p>xhr.setRequestHeader(‘Content-Type’, ‘application/x-www-form-urlencoded’);</p><pre><code>3. 发送请求```javascriptxhr.send(body) //get 请求不传 body 参数，只有 post 请求使用</code></pre><ol start="4"><li>接收响应<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//xhr.responseXML 接收 xml 格式的响应数据</span><span class="token comment" spellcheck="true">//xhr.responseText 接收文本格式的响应数据</span>xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">var</span> text <span class="token operator">=</span> xhr<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="解决-IE-缓存问题"><a href="#解决-IE-缓存问题" class="headerlink" title="解决 IE 缓存问题"></a>解决 IE 缓存问题</h4><blockquote><p>问题：在一些浏览器中(IE),由于缓存机制的存在，ajax 只会发送的第一次请求，剩余多次请求不会在发送给浏览器而是直接加载缓存中的数据。</p></blockquote></li></ol><blockquote><p>解决方式：浏览器的缓存是根据 url 地址来记录的，所以我们只需要修改 url 地址<br>即可避免缓存问题</p></blockquote><pre class=" language-javascript"><code class="language-javascript">xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"get"</span><span class="token punctuation">,</span><span class="token string">"/testAJAX?t="</span><span class="token operator">+</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="AJAX-请求状态"><a href="#AJAX-请求状态" class="headerlink" title="AJAX 请求状态"></a>AJAX 请求状态</h3><pre class=" language-javascript"><code class="language-javascript">xhr<span class="token punctuation">.</span>readyState 可以用来查看请求当前的状态</code></pre><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/readyState">https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/readyState</a></p><blockquote><p>0: 表示 XMLHttpRequest 实例已经生成，但是 open()方法还没有被调用。</p><p>1: 表示 send()方法还没有被调用，仍然可以使用 setRequestHeader()，设定 HTTP请求的头信息。</p><p>2: 表示 send()方法已经执行，并且头信息和状态码已经收到。</p><p>3: 表示正在接收服务器传来的 body 部分的数据。</p><p>4: 表示服务器数据已经完全接收，或者本次接收已经失败了</p></blockquote><h2 id="jQuery-中的-AJAX"><a href="#jQuery-中的-AJAX" class="headerlink" title="jQuery 中的 AJAX"></a>jQuery 中的 AJAX</h2><h3 id="get-请求"><a href="#get-请求" class="headerlink" title="get 请求"></a>get 请求</h3><pre class=" language-javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">[</span>data<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>callback<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">)</span>url<span class="token punctuation">:</span>请求的 URL 地址。data<span class="token punctuation">:</span>请求携带的参数。callback<span class="token punctuation">:</span>载入成功时回调函数。type<span class="token punctuation">:</span>设置返回内容格式，xml<span class="token punctuation">,</span> html<span class="token punctuation">,</span> script<span class="token punctuation">,</span> json<span class="token punctuation">,</span> text<span class="token punctuation">,</span> _default。</code></pre><pre class=" language-javascript"><code class="language-javascript">post 请求$<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">[</span>data<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>callback<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>type<span class="token punctuation">]</span><span class="token punctuation">)</span>url<span class="token punctuation">:</span>请求的 URL 地址。data<span class="token punctuation">:</span>请求携带的参数。callback<span class="token punctuation">:</span>载入成功时回调函数。type<span class="token punctuation">:</span>设置返回内容格式，xml<span class="token punctuation">,</span> html<span class="token punctuation">,</span> script<span class="token punctuation">,</span> json<span class="token punctuation">,</span> text<span class="token punctuation">,</span> _default。</code></pre><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><blockquote><p>同源策略(Same-Origin Policy)最早由 Netscape 公司提出，是浏览器的一种安全策略。</p><p>同源： 协议、域名、端口号 必须完全相同。</p><p>违背同源策略就是跨域。</p></blockquote><h3 id="如何解决跨域"><a href="#如何解决跨域" class="headerlink" title="如何解决跨域"></a>如何解决跨域</h3><h4 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h4><h5 id="JSONP-是什么"><a href="#JSONP-是什么" class="headerlink" title="JSONP 是什么"></a>JSONP 是什么</h5><p>JSONP(JSON with Padding)，是一个非官方的跨域解决方案，纯粹凭借程序员的聪明才智开发出来，只支持 get 请求。</p><h5 id="JSONP-怎么工作的？"><a href="#JSONP-怎么工作的？" class="headerlink" title="JSONP 怎么工作的？"></a>JSONP 怎么工作的？</h5><p>在网页有一些标签天生具有跨域能力，比如：img link iframe script。<br>JSONP 就是利用 script 标签的跨域能力来发送请求的。</p><h5 id="JSONP-的使用"><a href="#JSONP-的使用" class="headerlink" title="JSONP 的使用"></a>JSONP 的使用</h5><ol><li>动态的创建一个 script 标签<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span>“script”<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>设置 script 的 src，设置回调函数<pre class=" language-javascript"><code class="language-javascript">script<span class="token punctuation">.</span>src <span class="token operator">=</span> “http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token punctuation">:</span><span class="token number">3000</span><span class="token operator">/</span>testAJAX<span class="token operator">?</span>callback<span class="token operator">=</span>abc"<span class="token punctuation">;</span></code></pre></li></ol><p>function abc(data) {</p><p>alert(data.name);</p><p>};</p><pre><code>3. 将 script 添加到 body 中```javascriptdocument.body.appendChild(script);</code></pre><ol start="4"><li>服务器中路由的处理<pre class=" language-javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/testAJAX"</span> <span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req <span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"收到请求"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> callback <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>callback<span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>name<span class="token punctuation">:</span><span class="token string">"孙悟空"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span><span class="token number">18</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>callback<span class="token operator">+</span><span class="token string">"("</span><span class="token operator">+</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="jQuery-中的-JSONP"><a href="#jQuery-中的-JSONP" class="headerlink" title="jQuery 中的 JSONP"></a>jQuery 中的 JSONP</h5><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>按钮<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./jquery-1.12.3.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'btn'</span><span class="token punctuation">)</span>  btn<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>      $<span class="token punctuation">.</span><span class="token function">getJSON</span><span class="token punctuation">(</span><span class="token string">"http://api.douban.com/v2/movie/in_theaters?callback=?"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//获取所有的电影的条目</span>          <span class="token keyword">var</span> subjects <span class="token operator">=</span> data<span class="token punctuation">.</span>subjects<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//遍历电影条目</span>          <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>subjects<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#list"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"&lt;li>"</span><span class="token operator">+</span>              subjects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>title<span class="token operator">+</span><span class="token string">"&lt;br />"</span><span class="token operator">+</span>              <span class="token string">"&lt;img src=\""</span><span class="token operator">+</span>subjects<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>images<span class="token punctuation">.</span>large<span class="token operator">+</span><span class="token string">"\" >"</span><span class="token operator">+</span>              <span class="token string">"&lt;/li>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>      <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h3><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS</a></li></ol><h4 id="CORS-是什么？"><a href="#CORS-是什么？" class="headerlink" title="CORS 是什么？"></a>CORS 是什么？</h4><blockquote><p>CORS（Cross-Origin Resource Sharing），跨域资源共享。CORS 是官方的跨域解决方案，它的特点是不需要在客户端做任何特殊的操作，完全在服务器中进行处理，支持get 和 post 请求。跨域资源共享标准新增了一组 HTTP 首部字段，允许服务器声明哪些源站通过浏览器有权限访问哪些资源</p></blockquote><h4 id="CORS-怎么工作的？"><a href="#CORS-怎么工作的？" class="headerlink" title="CORS 怎么工作的？"></a>CORS 怎么工作的？</h4><blockquote><p>CORS 是通过设置一个响应头来告诉浏览器，该请求允许跨域，浏览器收到该响应<br>以后就会对响应放行。</p></blockquote><h4 id="CORS-的使用"><a href="#CORS-的使用" class="headerlink" title="CORS 的使用"></a>CORS 的使用</h4><p>主要是服务器端的设置：</p><pre class=" language-javascript"><code class="language-javascript">router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/testAJAX"</span> <span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req <span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//通过 res 来设置响应头，来允许跨域请求</span>    <span class="token comment" spellcheck="true">//res.set("Access-Control-Allow-Origin","http://127.0.0.1:3000");</span>    res<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">,</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"testAJAX 返回的响应"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery学习笔记(一)</title>
      <link href="2020/08/14/jQuery%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>2020/08/14/jQuery%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="jQuery学习笔记（一）"><a href="#jQuery学习笔记（一）" class="headerlink" title="jQuery学习笔记（一）"></a>jQuery学习笔记（一）</h2><h3 id="jQuery类库链接"><a href="#jQuery类库链接" class="headerlink" title="jQuery类库链接"></a>jQuery类库链接</h3><p><a href="https://www.jq22.com/jquery-info122">jQuery类库链接</a></p><h2 id="jQuery介绍"><a href="#jQuery介绍" class="headerlink" title="jQuery介绍"></a>jQuery介绍</h2><h3 id="什么是-jQuery"><a href="#什么是-jQuery" class="headerlink" title="什么是 jQuery ?"></a>什么是 jQuery ?</h3><p>jQuery，顾名思义，也就是 JavaScript 和查询（Query），它就是辅助 JavaScript 开发的 js 类库。</p><h3 id="jQuery-核心思想！！！"><a href="#jQuery-核心思想！！！" class="headerlink" title="jQuery 核心思想！！！"></a>jQuery 核心思想！！！</h3><p>它的核心思想是 write less,do more(写得更少,做得更多)，所以它实现了很多浏览器的兼容问题。</p><h3 id="jQuery-流行程度"><a href="#jQuery-流行程度" class="headerlink" title="jQuery 流行程度"></a>jQuery 流行程度</h3><p>jQuery 现在已经成为最流行的 JavaScript 库，在世界前 10000 个访问最多的网站中，有超过 55%在使用<br>jQuery。</p><h3 id="jQuery-好处！！！"><a href="#jQuery-好处！！！" class="headerlink" title="jQuery 好处！！！"></a>jQuery 好处！！！</h3><p>jQuery 是免费、开源的，jQuery 的语法设计可以使开发更加便捷，例如操作文档对象、选择 DOM 元素、<br>制作动画效果、事件处理、使用 Ajax 以及其他功能</p><h4 id="jQuery-的初体验！！！"><a href="#jQuery-的初体验！！！" class="headerlink" title="jQuery 的初体验！！！"></a>jQuery 的初体验！！！</h4><p>需求：使用 jQuery 给一个按钮绑定单击事件?</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Insert title here<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../script/jquery-1.7.2.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">// window.onload = function () &amp;#123;</span>    <span class="token comment" spellcheck="true">// var btnObj = document.getElementById("btnId");</span>    <span class="token comment" spellcheck="true">// // alert(btnObj);//[object HTMLButtonElement] ====>>> dom 对象</span>    <span class="token comment" spellcheck="true">// btnObj.onclick = function () &amp;#123;</span>    <span class="token comment" spellcheck="true">// alert("js 原生的单击事件");</span>    <span class="token comment" spellcheck="true">// &amp;#125;</span>    <span class="token comment" spellcheck="true">// &amp;#125;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 表示页面加载完成 之后，相当 window.onload = function () &amp;#123;&amp;#125;</span>        <span class="token keyword">var</span> $btnObj <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btnId"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 表示按 id 查询标签对象</span>        $btnObj<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 绑定单击事件</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"jQuery 的单击事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btnId<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>SayHello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="常见问题？"><a href="#常见问题？" class="headerlink" title="常见问题？"></a>常见问题？</h3><ol><li>使用 jQuery 一定要引入 jQuery 库吗？ 答案： 是，必须</li><li>jQuery 中的$到底是什么？ 答案： 它是一个函数</li><li>怎么为按钮添加点击响应函数的？ 答案：<ol><li>使用 jQuery 查询到标签对象</li><li>使用标签对象.click( function(){} );</li></ol></li></ol><h2 id="jQuery-核心函数"><a href="#jQuery-核心函数" class="headerlink" title="jQuery 核心函数"></a>jQuery 核心函数</h2><p>$ 是 jQuery 的核心函数，能完成 jQuery 的很多功能。$()就是调用$这个函数</p><h3 id="传入参数为-函数-时："><a href="#传入参数为-函数-时：" class="headerlink" title="传入参数为 [ 函数 ] 时："></a>传入参数为 [ 函数 ] 时：</h3><p>表示页面加载完成之后。相当于 window.onload = function(){}</p><h3 id="传入参数为-HTML-字符串-时："><a href="#传入参数为-HTML-字符串-时：" class="headerlink" title="传入参数为 [ HTML 字符串 ] 时："></a>传入参数为 [ HTML 字符串 ] 时：</h3><p>会对我们创建这个 html 标签对象</p><h3 id="传入参数为-选择器字符串-时："><a href="#传入参数为-选择器字符串-时：" class="headerlink" title="传入参数为 [ 选择器字符串 ] 时："></a>传入参数为 [ 选择器字符串 ] 时：</h3><p>$(“#id 属性值”); id 选择器，根据 id 查询标签对象</p><p>$(“标签名”); 标签名选择器，根据指定的标签名查询标签对象</p><p>$(“.class 属性值”); 类型选择器，可以根据 class 属性查询标签对象</p><h3 id="传入参数为-DOM-对象-时："><a href="#传入参数为-DOM-对象-时：" class="headerlink" title="传入参数为 [ DOM 对象 ] 时："></a>传入参数为 [ DOM 对象 ] 时：</h3><p>会把这个 dom 对象转换为 jQuery 对象</p><h2 id="jQuery-对象和-dom-对象区分"><a href="#jQuery-对象和-dom-对象区分" class="headerlink" title="jQuery 对象和 dom 对象区分"></a>jQuery 对象和 dom 对象区分</h2><h3 id="什么是-jQuery-对象，什么是-dom-对象"><a href="#什么是-jQuery-对象，什么是-dom-对象" class="headerlink" title="什么是 jQuery 对象，什么是 dom 对象"></a>什么是 jQuery 对象，什么是 dom 对象</h3><h4 id="Dom-对象"><a href="#Dom-对象" class="headerlink" title="Dom 对象"></a>Dom 对象</h4><pre><code>通过 getElementById()查询出来的标签对象是 Dom 对象通过 getElementsByName()查询出来的标签对象是 Dom 对象通过 getElementsByTagName()查询出来的标签对象是 Dom 对象通过 createElement() 方法创建的对象，是 Dom 对象DOM 对象 Alert 出来的效果是：[object HTML 标签名 Element]</code></pre><h4 id="jQuery-对象"><a href="#jQuery-对象" class="headerlink" title="jQuery 对象"></a>jQuery 对象</h4><pre><code>通过 JQuery 提供的 API 创建的对象，是 JQuery 对象通过 JQuery 包装的 Dom 对象，也是 JQuery 对象通过 JQuery 提供的 API 查询到的对象，是 JQuery 对象jQuery 对象 Alert 出来的效果是：[object Object]</code></pre><h3 id="问题：jQuery-对象的本质是什么？"><a href="#问题：jQuery-对象的本质是什么？" class="headerlink" title="问题：jQuery 对象的本质是什么？"></a>问题：jQuery 对象的本质是什么？</h3><p>jQuery 对象是 dom 对象的数组 + jQuery 提供的一系列功能函数。</p><h3 id="jQuery-对象和-Dom-对象使用区别"><a href="#jQuery-对象和-Dom-对象使用区别" class="headerlink" title="jQuery 对象和 Dom 对象使用区别"></a>jQuery 对象和 Dom 对象使用区别</h3><pre><code>jQuery 对象不能使用 DOM 对象的属性和方法DOM 对象也不能使用 jQuery 对象的属性和方法</code></pre><h3 id="Dom-对象和-jQuery-对象互转"><a href="#Dom-对象和-jQuery-对象互转" class="headerlink" title="Dom 对象和 jQuery 对象互转"></a>Dom 对象和 jQuery 对象互转</h3><ol><li>dom 对象转化为 jQuery 对象（重点）<ol><li>先有 DOM 对象</li><li>$(DOM 对象 ) 就可以转换成为 jQuery 对象</li></ol></li><li>jQuery 对象转为 dom 对象（重点）<ol><li>先有 jQuery 对象</li><li>jQuery 对象[下标]取出相应的 DOM 对象<br><img src="/child/2020/08/14/jQuery%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/1.png"></li></ol></li></ol><h2 id="jQuery-选择器（-重点）"><a href="#jQuery-选择器（-重点）" class="headerlink" title="jQuery 选择器（*****重点）"></a>jQuery 选择器（*****重点）</h2><h3 id="基本选择器（-重点）"><a href="#基本选择器（-重点）" class="headerlink" title="基本选择器（****重点）"></a>基本选择器（****重点）</h3><table><thead><tr><th align="right">选择器</th><th align="right">效果</th></tr></thead><tbody><tr><td align="right">#ID 选择器</td><td align="right">根据 id 查找标签对象</td></tr><tr><td align="right">.class 选择器</td><td align="right">根据 class 查找标签对象</td></tr><tr><td align="right">element 选择器</td><td align="right">根据标签名查找标签对象</td></tr><tr><td align="right">选择器</td><td align="right">表示任意的，所有的元素</td></tr><tr><td align="right">selector1，selector2 组合选择器</td><td align="right">合并选择器 1，选择器 2 的结果并返回</td></tr></tbody></table><p>p.myClass</p><p>表示标签名必须是 p 标签，而且 class 类型还要是 myClass</p><h3 id="层级选择器（-重点）"><a href="#层级选择器（-重点）" class="headerlink" title="层级选择器（****重点）"></a>层级选择器（****重点）</h3><table><thead><tr><th align="right">选择器</th><th align="right">效果</th></tr></thead><tbody><tr><td align="right">ancestor descendant 后代选择器</td><td align="right">在给定的祖先元素下匹配所有的后代元素</td></tr><tr><td align="right">parent &gt; child 子元素选择器</td><td align="right">在给定的父元素下匹配所有的子元素</td></tr><tr><td align="right">prev + next 相邻元素选择器</td><td align="right">匹配所有紧接在 prev 元素后的 next 元素</td></tr><tr><td align="right">prev ~ sibings 之后的兄弟元素选择器</td><td align="right">匹配 prev 元素之后的所有 siblings 元素</td></tr></tbody></table><h3 id="过滤选择器"><a href="#过滤选择器" class="headerlink" title="过滤选择器"></a>过滤选择器</h3><h4 id="基本过滤器："><a href="#基本过滤器：" class="headerlink" title="基本过滤器："></a>基本过滤器：</h4><table><thead><tr><th align="right">过滤器</th><th align="right">效果</th></tr></thead><tbody><tr><td align="right">:first</td><td align="right">获取第一个元素</td></tr><tr><td align="right">:last</td><td align="right">获取最后个元素</td></tr><tr><td align="right">:not(selector)</td><td align="right">去除所有与给定选择器匹配的元素</td></tr><tr><td align="right">:even</td><td align="right">匹配所有索引值为偶数的元素，从 0 开始计数</td></tr><tr><td align="right">:odd</td><td align="right">匹配所有索引值为奇数的元素，从 0 开始计数</td></tr><tr><td align="right">:eq(index)</td><td align="right">匹配一个给定索引值的元素</td></tr><tr><td align="right">:gt(index)</td><td align="right">匹配所有大于给定索引值的元素</td></tr><tr><td align="right">:lt(index)</td><td align="right">匹配所有小于给定索引值的元素</td></tr><tr><td align="right">:header</td><td align="right">匹配如 h1, h2, h3 之类的标题元素</td></tr><tr><td align="right">:animated</td><td align="right">匹配所有正在执行动画效果的元素</td></tr></tbody></table><h4 id="内容过滤器："><a href="#内容过滤器：" class="headerlink" title="内容过滤器："></a>内容过滤器：</h4><table><thead><tr><th align="right">过滤器</th><th align="right">效果</th></tr></thead><tbody><tr><td align="right">:contains(text)</td><td align="right">匹配包含给定文本的元素</td></tr><tr><td align="right">:empty</td><td align="right">匹配所有不包含子元素或者文本的空元素</td></tr><tr><td align="right">:parent</td><td align="right">匹配含有子元素或者文本的元素</td></tr><tr><td align="right">:has(selector)</td><td align="right">匹配含有选择器所匹配的元素的元素</td></tr></tbody></table><h4 id="属性过滤器："><a href="#属性过滤器：" class="headerlink" title="属性过滤器："></a>属性过滤器：</h4><table><thead><tr><th align="right">过滤器</th><th align="right">效果</th></tr></thead><tbody><tr><td align="right">[attribute]</td><td align="right">匹配包含给定属性的元素。</td></tr><tr><td align="right">[attribute=value]</td><td align="right">配给定的属性是某个特定值的元素</td></tr><tr><td align="right">[attribute!=value]</td><td align="right">匹配所有不含有指定的属性，或者属性不等于特定值的元素。</td></tr><tr><td align="right">[attribute^=value]</td><td align="right">匹配给定的属性是以某些值开始的元素</td></tr><tr><td align="right">[attribute$=value]</td><td align="right">匹配给定的属性是以某些值结尾的元素</td></tr><tr><td align="right">[attribute*=value]</td><td align="right">匹配给定的属性是以包含某些值的元素</td></tr><tr><td align="right">[attrSel1][attrSel2][attrSelN]</td><td align="right">复合属性选择器，需要同时满足多个条件时使用。</td></tr></tbody></table><h4 id="表单过滤器"><a href="#表单过滤器" class="headerlink" title="表单过滤器:"></a>表单过滤器:</h4><table><thead><tr><th align="right">过滤器</th><th align="right">效果</th></tr></thead><tbody><tr><td align="right">:input</td><td align="right">匹配所有    input, textarea, select 和 button 元素</td></tr><tr><td align="right">:text</td><td align="right">匹配所有    文本输入框</td></tr><tr><td align="right">:password</td><td align="right">匹配所有的密码输入框</td></tr><tr><td align="right">:radio</td><td align="right">匹配所有的单选框</td></tr><tr><td align="right">:checkbox</td><td align="right">匹配所有的复选框</td></tr><tr><td align="right">:submit</td><td align="right">匹配所有提交按钮</td></tr><tr><td align="right">:image</td><td align="right">匹配所有 img 标签</td></tr><tr><td align="right">:reset</td><td align="right">匹配所有重置按钮</td></tr><tr><td align="right">:button</td><td align="right">匹配所有 input type=button 按钮</td></tr><tr><td align="right">:file</td><td align="right">匹配所有 input type=file 文件上传</td></tr><tr><td align="right">:hidden</td><td align="right">匹配所有不可见元素 display:none 或 input type=hidden</td></tr></tbody></table><h4 id="表单对象属性过滤器："><a href="#表单对象属性过滤器：" class="headerlink" title="表单对象属性过滤器："></a>表单对象属性过滤器：</h4><table><thead><tr><th align="right">过滤器</th><th align="right">效果</th></tr></thead><tbody><tr><td align="right">:enabled</td><td align="right">匹配所有可用元素</td></tr><tr><td align="right">:disabled</td><td align="right">匹配所有不可用元素</td></tr><tr><td align="right">:checked</td><td align="right">匹配所有选中的单选，复选，和下拉列表中选中的 option 标签对象</td></tr><tr><td align="right">:selected</td><td align="right">匹配所有选中的 option</td></tr></tbody></table><h4 id="jQuery-元素筛选"><a href="#jQuery-元素筛选" class="headerlink" title="jQuery 元素筛选"></a>jQuery 元素筛选</h4><table><thead><tr><th align="right">方法</th><th align="right">效果</th><th align="right">功能</th></tr></thead><tbody><tr><td align="right">eq()</td><td align="right">获取给定索引的元素</td><td align="right">功能跟 :eq() 一样</td></tr><tr><td align="right">first()</td><td align="right">获取第一个元素</td><td align="right">功能跟 :first 一样</td></tr><tr><td align="right">last()</td><td align="right">获取最后一个元素</td><td align="right">功能跟 :last 一样</td></tr><tr><td align="right">filter(exp)</td><td align="right">留下匹配的元素</td><td align="right"></td></tr><tr><td align="right">is(exp)</td><td align="right">判断是否匹配给定的选择器，只要有一个匹配就返回，true</td><td align="right"></td></tr><tr><td align="right">has(exp)</td><td align="right">返回包含有匹配选择器的元素的元素</td><td align="right">功能跟 :has 一样</td></tr><tr><td align="right">not(exp)</td><td align="right">删除匹配选择器的元素</td><td align="right">功能跟 :not 一样</td></tr><tr><td align="right">children(exp)</td><td align="right">返回匹配给定选择器的子元素</td><td align="right">功能跟 parent&gt;child 一样</td></tr><tr><td align="right">find(exp)</td><td align="right">返回匹配给定选择器的后代元素</td><td align="right">功能跟 ancestor descendant 一样</td></tr><tr><td align="right">next()</td><td align="right">返回当前元素的下一个兄弟元素</td><td align="right">功能跟 prev + next 功能一样</td></tr><tr><td align="right">nextAll()</td><td align="right">返回当前元素后面所有的兄弟元素</td><td align="right">功能跟 prev ~ siblings 功能一样</td></tr><tr><td align="right">nextUntil()</td><td align="right">返回当前元素到指定匹配的元素为止的后面元素</td><td align="right"></td></tr><tr><td align="right">parent()</td><td align="right">返回父元素</td><td align="right"></td></tr><tr><td align="right">prev(exp)</td><td align="right">返回当前元素的上一个兄弟元素</td><td align="right"></td></tr><tr><td align="right">prevAll()</td><td align="right">返回当前元素前面所有的兄弟元素</td><td align="right"></td></tr><tr><td align="right">prevUnit(exp)</td><td align="right">返回当前元素到指定匹配的元素为止的前面元素</td><td align="right"></td></tr><tr><td align="right">siblings(exp)</td><td align="right">返回所有兄弟元素</td><td align="right"></td></tr><tr><td align="right">add()</td><td align="right">把 add 匹配的选择器的元素添加到当前 jquery 对象中</td><td align="right"></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javaScript基础</title>
      <link href="2020/08/12/javascript%E5%9F%BA%E7%A1%80/"/>
      <url>2020/08/12/javascript%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="Javascript基础"><a href="#Javascript基础" class="headerlink" title="Javascript基础"></a>Javascript基础</h2><h3 id="JavaScript介绍"><a href="#JavaScript介绍" class="headerlink" title="JavaScript介绍"></a>JavaScript介绍</h3><h3 id="JavaScript是什么"><a href="#JavaScript是什么" class="headerlink" title="JavaScript是什么"></a>JavaScript是什么</h3><p>HTML CSS</p><p>JavaScript 编程语言 流程控制</p><p>Netscape在最初将其脚本语言命名为LiveScript，后来Netscape在与Sun合作之后将其改名为JavaScript。JavaScript最初受Java启发而开始设计的，目的之一就是“看上去像Java”，因此语法上有类似之处，一些名称和命名规范也借自Java。JavaScript与Java名称上的近似，是当时Netscape为了营销考虑与Sun微系统达成协议的结果。Java和JavaScript的关系就像张雨和张雨生的关系，只是名字很像。</p><p>​ Java 服务器端的编程语言</p><p>​ JavaScript 运行在客户端(浏览器)的编程语言</p><p>JavaScript是一种运行在客户端 的脚本语言<br>JavaScript的解释器被称为JavaScript引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在HTML（标准通用标记语言下的一个应用）网页上使用，用来给HTML网页增加动态功能。</p><p><img src="/child/2020/08/12/javascript%E5%9F%BA%E7%A1%80/1.png" alt="发明者"></p><h4 id="JavaScript最初的目的"><a href="#JavaScript最初的目的" class="headerlink" title="JavaScript最初的目的"></a>JavaScript最初的目的</h4><p>最初的目的是为了处理表单的验证操作。</p><h4 id="JavaScript现在的意义-应用场景"><a href="#JavaScript现在的意义-应用场景" class="headerlink" title="JavaScript现在的意义(应用场景)"></a>JavaScript现在的意义(应用场景)</h4><p>JavaScript 发展到现在几乎无所不能。</p><ol><li>网页特效</li><li>服务端开发(Node.js)</li><li>命令行工具(Node.js)</li><li>桌面程序(Electron)</li><li>App(Cordova)</li><li>控制硬件-物联网(Ruff)</li><li>游戏开发(cocos2d-js)<h3 id="JavaScript和HTML、CSS的区别"><a href="#JavaScript和HTML、CSS的区别" class="headerlink" title="JavaScript和HTML、CSS的区别"></a>JavaScript和HTML、CSS的区别</h3></li><li>HTML：提供网页的结构，提供网页中的内容</li><li>CSS: 用来美化网页</li><li>JavaScript: 可以用来控制网页内容，给网页增加动态的效果<h3 id="JavaScript的组成"><a href="#JavaScript的组成" class="headerlink" title="JavaScript的组成"></a>JavaScript的组成</h3><img src="/child/2020/08/12/javascript%E5%9F%BA%E7%A1%80/2.png"><h4 id="ECMAScript-JavaScript的核心"><a href="#ECMAScript-JavaScript的核心" class="headerlink" title="ECMAScript - JavaScript的核心"></a>ECMAScript - JavaScript的核心</h4>ECMA 欧洲计算机制造联合会</li></ol><p>网景：JavaScript</p><p>微软：JScript</p><p>定义了JavaScript的语法规范</p><p>JavaScript的核心，描述了语言的基本语法和数据类型，ECMAScript是一套标准，定义了一种语言的标准与具体实现无关</p><h4 id="BOM-浏览器对象模型"><a href="#BOM-浏览器对象模型" class="headerlink" title="BOM - 浏览器对象模型"></a>BOM - 浏览器对象模型</h4><p>一套操作浏览器功能的API</p><p>通过BOM可以操作浏览器窗口，比如：弹出框、控制浏览器跳转、获取分辨率等</p><h4 id="DOM-文档对象模型"><a href="#DOM-文档对象模型" class="headerlink" title="DOM - 文档对象模型"></a>DOM - 文档对象模型</h4><p>一套操作页面元素的API</p><p>DOM可以把HTML看做是文档树，通过DOM提供的API可以对树上的节点进行操作</p><h3 id="JavaScript初体验"><a href="#JavaScript初体验" class="headerlink" title="JavaScript初体验"></a>JavaScript初体验</h3><p>CSS：行内样式、嵌入样式、外部样式</p><h4 id="JavaScript的书写位置"><a href="#JavaScript的书写位置" class="headerlink" title="JavaScript的书写位置"></a>JavaScript的书写位置</h4><ul><li>写在行内<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>按钮<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>alert(<span class="token punctuation">'</span>Hello World<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre></li><li>写在script标签中<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre></li><li>写在外部js文件中，在页面引入<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre></li><li>注意点</li></ul><p><em>引用外部js文件的script标签中不可以写JavaScript代码</em></p><h3 id="计算机组成"><a href="#计算机组成" class="headerlink" title="计算机组成"></a>计算机组成</h3><h4 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h4><p>应用软件：浏览器(Chrome/IE/Firefox)、QQ、Sublime、Word</p><p>系统软件：Windows、Linux、mac OSX</p><h4 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h4><p>三大件：CPU、内存、硬盘 – 主板</p><p>输入设备：鼠标、键盘、手写板、摄像头等</p><p>输出设备：显示器、打印机、投影仪等<br><img src="/child/2020/08/12/javascript%E5%9F%BA%E7%A1%80/1497317567484.png" alt="图一"><br><img src="/child/2020/08/12/javascript%E5%9F%BA%E7%A1%80/1496916239525.png" alt="图二"></p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="什么是变量"><a href="#什么是变量" class="headerlink" title="什么是变量"></a>什么是变量</h4><p>变量是计算机内存中存储数据的标识符，根据变量名称可以获取到内存中存储的数据</p><h4 id="为什么要使用变量"><a href="#为什么要使用变量" class="headerlink" title="为什么要使用变量"></a>为什么要使用变量</h4><p>使用变量可以方便的获取或者修改内存中的数据</p><h4 id="如何使用变量"><a href="#如何使用变量" class="headerlink" title="如何使用变量"></a>如何使用变量</h4><p>var声明变量</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> age<span class="token punctuation">;</span></code></pre><p>变量的赋值</p><pre><code>var age;age = 18;</code></pre><p>同时声明多个变量</p><pre><code>var age, name, sex;age = 10;name = &#39;zs&#39;;</code></pre><p>同时声明多个变量并赋值</p><pre><code>var age = 10, name = &#39;zs&#39;;</code></pre><p>变量在内存中的存储</p><pre><code>var age = 18;</code></pre><p><img src="/child/2020/08/12/javascript%E5%9F%BA%E7%A1%80/1496981558575.png"></p><h4 id="变量的命名规则和规范"><a href="#变量的命名规则和规范" class="headerlink" title="变量的命名规则和规范"></a>变量的命名规则和规范</h4><ul><li><p>规则 - 必须遵守的，不遵守会报错</p><ul><li><p>由字母、数字、下划线、$符号组成，不能以数字开头</p></li><li><p>不能是关键字和保留字，例如：for、while。</p></li><li><p>区分大小写</p></li></ul></li><li><p>规范 - 建议遵守的，不遵守不会报错</p><ul><li>变量名必须有意义</li><li>遵守驼峰命名法。首字母小写，后面单词的首字母需要大写。例如：userName、userPassword</li></ul></li><li><p>下面哪些变量名不合法</p><pre><code>a        1age1818agename$name_sex&amp;sextheworld  theWorld</code></pre><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3></li></ul><ol><li>交换两个变量的值</li><li>不使用临时变量，交换两个数值变量的值<blockquote><p>Kanya会写，Kanya没时间呜呜呜</p></blockquote></li></ol><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="简单数据类型"><a href="#简单数据类型" class="headerlink" title="简单数据类型"></a>简单数据类型</h4><p>Number、String、Boolean、Undefined、Null<br>Number类型<br>数值字面量：数值的固定值的表示法</p><p>110 1024 60.5</p><p>进制</p><p>十进制<br>  var num = 9;<br>  进行算数计算时，八进制和十六进制表示的数值最终都将被转换成十进制数值。<br>十六进制<br>  var num = 0xA;<br>  数字序列范围：0<del>9以及A</del>F<br>八进制<br>  var num1 = 07;   // 对应十进制的7<br>  var num2 = 019;  // 对应十进制的19<br>  var num3 = 08;   // 对应十进制的8<br>  数字序列范围：0~7<br>  如果字面值中的数值超出了范围，那么前导零将被忽略，后面的数值将被当作十进制数值解析<br>浮点数</p><p>浮点数的精度问题<br>浮点数<br>var n = 5e-324;   // 科学计数法  5乘以10的-324次方<br>浮点数值的最高精度是 17 位小数，但在进行算术计算时其精确度远远不如整数<br>var result = 0.1 + 0.2;    // 结果不是 0.3，而是：0.30000000000000004<br>console.log(0.07 * 100);<br>不要判断两个浮点数是否相等<br>数值范围</p><p>最小值：Number.MIN_VALUE，这个值为： 5e-324<br>最大值：Number.MAX_VALUE，这个值为： 1.7976931348623157e+308<br>无穷大：Infinity<br>无穷小：-Infinity<br>数值判断</p><p>NaN：not a number<br>NaN 与任何值都不相等，包括他本身<br>isNaN: is not a number<br>String类型<br>‘abc’ “abc”<br>字符串字面量</p><p>‘程序猿’，’程序媛’, “程序猿”</p><p>思考：如何打印以下字符串。<br>我是一个”正直”的人<br>我很喜欢’程序猿’”</p><p>转义符</p><p>字符串长度</p><p>length属性用来获取字符串的长度</p><p>var str = ‘程序猿 Hello World’;<br>console.log(str.length);<br>字符串拼接</p><p>字符串拼接使用 + 连接</p><p>console.log(11 + 11);<br>console.log(‘hello’ + ‘ world’);<br>console.log(‘100’ + ‘100’);<br>console.log(‘11’ + 11);<br>console.log(‘male:’ + true);<br>两边只要有一个是字符串，那么+就是字符串拼接功能<br>两边如果都是数字，那么就是算术功能。<br>Boolean类型<br>Boolean字面量： true和false，区分大小写<br>计算机内部存储：true为1，false为0<br>Undefined和Null<br>undefined表示一个声明了没有赋值的变量，变量只声明的时候值默认是undefined<br>null表示一个空，变量的值如果想为null，必须手动设置<br>复杂数据类型<br>​ Object<br>获取变量的类型<br>typeof</p><p>var age = 18;<br>console.log(typeof age);  // ‘number’<br>字面量<br>在源代码中一个固定值的表示法。</p><p>数值字面量：8, 9, 10</p><p>字符串字面量：’程序员’, “大前端”</p><p>布尔字面量：true，false</p><p>注释<br>单行注释<br>用来描述下面一个或多行代码的作用</p><p>// 这是一个变量<br>var name = ‘hm’;<br>多行注释<br>用来注释多条代码</p><p>/*<br>var age = 18;<br>var name = ‘zs’;<br>console.log(name, age);<br>*/<br>数据类型转换<br>如何使用谷歌浏览器，快速的查看数据类型？</p><p>字符串的颜色是黑色的，数值类型是蓝色的，布尔类型也是蓝色的，undefined和null是灰色的</p><p>转换成字符串类型<br>toString()<br>var num = 5;<br>console.log(num.toString());<br>String()<br>String()函数存在的意义：有些值没有toString()，这个时候可以使用String()。比如：undefined和null<br>拼接字符串方式<br>num + “”，当 + 两边一个操作符是字符串类型，一个操作符是其它类型的时候，会先把其它类型转换成字符串再进行字符串拼接，返回字符串</p><p>转换成数值类型<br>Number()<br>Number()可以把任意值转换成数值，如果要转换的字符串中有一个不是数值的字符，返回NaN<br>parseInt()<br>var num1 = parseInt(“12.3abc”);  // 返回12，如果第一个字符是数字会解析知道遇到非数字结束<br>var num2 = parseInt(“abc123”);   // 返回NaN，如果第一个字符不是数字或者符号就返回NaN<br>parseFloat()<br>parseFloat()把字符串转换成浮点数<br>parseFloat()和parseInt非常相似，不同之处在与<br>  parseFloat会解析第一个. 遇到第二个.或者非数字结束<br>  如果解析的内容里只有整数，解析成整数<br>+，-0等运算<br>var str = ‘500’;<br>console.log(+str);        // 取正<br>console.log(-str);        // 取负<br>console.log(str - 0);<br>转换成布尔类型<br>Boolean()<br>0 ‘’(空字符串) null undefined NaN 会转换成false 其它都会转换成true<br>操作符<br>运算符 operator</p><p>5 + 6</p><p>表达式 组成 操作数和操作符，会有一个结果</p><p>算术运算符<br>+,-,*,/,%<br>一元运算符<br>一元运算符：只有一个操作数的运算符</p><p>5 + 6 两个操作数的运算符 二元运算符</p><p>++ 自身加1</p><p>– 自身减1</p><p>前置++<br>&lt;!–hexoPostRenderEscape:<br>var num1 = 5;<br>++ num1;<br>var num2 = 6;<br>console.log(num1 + ++ num2);:hexoPostRenderEscape–&gt;</p><p>后置++<br>var num1 = 5;<br>num1 ++;<br>var num2 = 6<br>console.log(num1 + num2 ++);<br>猜猜看<br>var a = 1; var b = ++a + ++a; console.log(b);    // 4<br>var a = 1; var b = a++ + ++a; console.log(b);    // 3<br>var a = 1; var b = a++ + a++; console.log(b);    // 2<br>var a = 1; var b = ++a + a++; console.log(b);    // 2<br>总结</p><p>前置++：先加1，后参与运算</p><p>后置++：先参与运算，后加1</p><p>上面两个理解后，下面两个自通</p><p>前置– ：先减1，后参与运算</p><p>后置– ：先参与运算，后减1<br>​</p><p>逻辑运算符(布尔运算符)<br>&amp;&amp; 与 两个操作数同时为true，结果为true，否则都是false<br>|| 或 两个操作数有一个为true，结果为true，否则为false<br>!  非  取反<br>关系运算符(比较运算符)<br>&lt;  &gt;  &gt;=  &lt;= == != === !==<br>==与===的区别：==只进行值得比较，===类型和值同时相等，则相等</p><p>var result = ‘55’ == 55;      // true<br>var result = ‘55’ === 55;     // false 值相等，类型不相等<br>var result = 55 === 55;     // true<br>赋值运算符<br>= += -= *= /= %=</p><p>例如：<br>var num = 0;<br>num += 5;    //相当于  num = num + 5;<br>运算符的优先级<br>优先级从高到底<br>    1. ()  优先级最高<br>    2. 一元运算符  ++   –   !<br>    3. 算数运算符  先*  /  %   后 +   -<br>    4. 关系运算符  &gt;   &gt;=   &lt;   &lt;=<br>    5. 相等运算符   ==   !=    ===    !==<br>    6. 逻辑运算符 先&amp;&amp;   后||<br>    7. 赋值运算符<br>4 &gt;= 6 || ‘人’ != ‘阿凡达’ &amp;&amp; !(12 * 2 == 144) &amp;&amp; true<br>var num = 10;<br>5 == num / 2 &amp;&amp; (2 + 2 * num).toString() === ‘22’<br>表达式和语句<br>表达式<br>一个表达式可以产生一个值，有可能是运算、函数调用、有可能是字面量。表达式可以放在任何需要值的地方。</p><p>语句<br>语句可以理解为一个行为，循环语句和判断语句就是典型的语句。一个程序有很多个语句组成，一般情况下;分割一个一个的语句</p><p>流程控制<br>程序的三种基本结构</p><p>顺序结构<br>从上到下执行的代码就是顺序结构</p><p>程序默认就是由上到下顺序执行的</p><p>分支结构<br>根据不同的情况，执行对应代码</p><p>循环结构<br>循环结构：重复做一件事情</p><p>分支结构<br>if语句<br>语法结构</p><p>if (/* 条件表达式 */) {<br>  // 执行语句<br>}</p><p>if (/* 条件表达式 */){<br>  // 成立执行语句<br>} else {<br>  // 否则执行语句<br>}</p><p>if (/* 条件1 <em>/){<br>  // 成立执行语句<br>} else if (/</em> 条件2 <em>/){<br>  // 成立执行语句<br>} else if (/</em> 条件3 */){<br>  // 成立执行语句<br>} else {<br>  // 最后默认执行语句<br>}<br>例子一：<br>求两个数的最大数<br>判断一个数是偶数还是奇数<br>分数转换，把百分制转换成ABCDE &lt;60 E 60-70 D 70-80 C 80-90 B 90 - 100 A</p><p>判断一个年份是闰年还是平年<br>闰年：能被4整除，但不能被100整除的年份 或者 能被400整除的年份<br>判断一个人的年龄是否满18岁(是否成年)</p><p>三元运算符<br>表达式1 ? 表达式2 : 表达式3<br>是对if……else语句的一种简化写法<br>例子二：<br>是否年满18岁<br>从两个数中找最大值</p><p>switch语句<br>语法格式:</p><p>switch (expression) {<br>  case 常量1:<br>    语句;<br>    break;<br>  case 常量2:<br>    语句;<br>    break;<br>  case 常量3:<br>    语句;<br>    break;<br>  …<br>  case 常量n:<br>    语句;<br>    break;<br>  default:<br>    语句;<br>    break;<br>}<br>break可以省略，如果省略，代码会继续执行下一个case<br>switch 语句在比较值时使用的是全等操作符, 因此不会发生类型转换（例如，字符串’10’ 不等于数值 10）</p><p>````<br>例子三：<br>显示星期几</p><p>素质教育（把分数变成ABCDE）</p><p>千万不要写100个case哟</p><h3 id="布尔类型的隐式转换"><a href="#布尔类型的隐式转换" class="headerlink" title="布尔类型的隐式转换"></a>布尔类型的隐式转换</h3><p>流程控制语句会把后面的值隐式转换成布尔类型<br>转换为true 非空字符串 非0数字 true 任何对象<br>转换成false 空字符串 0 false null undefined</p><p>```javascript<br>// 结果是什么？<br>var a = !!’123’;  // true<br>例子<br>var message;<br>// 会自动把message转换成false<br>if (message) {<br>// todo…<br>}</p><p>循环结构<br>在javascript中，循环语句有三种，while、do..while、for循环。</p><p>while语句<br>基本语法：</p><p>// 当循环条件为true时，执行循环体，<br>// 当循环条件为false时，结束循环。<br>while (循环条件) {<br>  //循环体<br>}<br>代码示例：</p><p>// 计算1-100之间所有数的和<br>// 初始化变量<br>var i = 1;<br>var sum = 0;<br>// 判断条件<br>while (i &lt;= 100) {<br>  // 循环体<br>  sum += i;<br>  // 自增<br>  i++;<br>}<br>console.log(sum);<br>例子：<br>打印100以内 7的倍数</p><p>打印100以内所有偶数</p><p>打印100以内所有偶数的和</p><p>打印100以内的奇数</p><p>打印100以内的奇数的和</p><p>do…while语句<br>do..while循环和while循环非常像，二者经常可以相互替代，但是do..while的特点是不管条件成不成立，都会执行一次。</p><p>基础语法：</p><p>do {<br>  // 循环体;<br>} while (循环条件);<br>代码示例：</p><p>// 初始化变量<br>var i = 1;<br>var sum = 0;<br>do {<br>  sum += i;//循环体<br>  i++;//自增<br>} while (i &lt;= 100);//循环条件<br>示例：</p><p>求100以内所有3的倍数的和<br>使用do-while循环：输出询问“我爱你，嫁给我吧？”，选择“你喜欢我吗？(y/n):”，如果输入为y则打印”我们形影不离“，若输入为n,则继续询问<br>for语句<br>while和do…while一般用来解决无法确认次数的循环。for循环一般在循环次数确定的时候比较方便</p><p>for循环语法：</p><p>// for循环的表达式之间用的是;号分隔的，千万不要写成,<br>for (初始化表达式1; 判断表达式2; 自增表达式3) {<br>  // 循环体4<br>}<br>执行顺序：1243 —- 243 —–243(直到循环条件变成false)</p><p>初始化表达式<br>判断表达式<br>自增表达式<br>循环体<br>示例：<br>&lt;!–hexoPostRenderEscape:<br>打印1-100之间所有数<br>求1-100之间所有数的和<br>求1-100之间所有数的平均值<br>求1-100之间所有偶数的和<br>同时求1-100之间所有偶数和奇数的和<br>打印正方形<br>// 使用拼字符串的方法的原因<br>// console.log 输出重复内容的问题<br>// console.log 默认输出内容介绍后有换行<br>var start = ‘’;<br>for (var i = 0; i &lt; 10; i++) {<br>for (var j = 0; j &lt; 10; j++) {<br> start += ‘* ‘;<br>}<br>start += ‘\n’;<br>}<br>console.log(start);<br>打印直角三角形<br>var start = ‘’;<br>for (var i = 0; i &lt; 10; i++) {<br>for (var j = i; j &lt; 10; j++) {<br> start += ‘* ‘;<br>}<br>start += ‘\n’;<br>}<br>console.log(start);<br>打印9*9乘法表<br>var str = ‘’;<br>for (var i = 1; i &lt;= 9; i++) {<br>for (var j = i; j &lt;=9; j++) {<br>str += i + ‘ * ‘ + j + ‘ = ‘ + i * j + ‘\t’;<br>}<br>str += ‘\n’;<br>}<br>console.log(str);:hexoPostRenderEscape–&gt;<br>例子：</p><p>求1-100之间所有数的乘积<br>求1-100之间所有奇数的和<br>计算1-100之间能3整除的数的和<br>计算1-100之间不能被7整除的数的和<br>// 讲解思路。如果不会写程序，可以先把数学公式准备好<br>本金10000元存入银行，年利率是千分之三，每过1年，将本金和利息相加作为新的本金。计算5年后，获得的本金是多少？<br>有个人想知道，一年之内一对兔子能繁殖多少对？于是就筑了一道围墙把一对兔子关在里面。已知一对兔子每个月可以生一对小兔子，而一对兔子从出生后第3个月起每月生一对小兔子。假如一年内没有发生死亡现象，那么，一对兔子一年内（12个月）能繁殖成多少对？（兔子的规律为数列，1，1，2，3，5，8，13，21）<br>continue和break<br>break:立即跳出整个循环，即循环结束，开始执行循环后面的内容（直接跳到大括号）</p><p>continue:立即跳出当前循环，继续下一次循环（跳到i++的地方）</p><p>例子：</p><p>求整数1～100的累加值，但要求碰到个位为3的数则停止累加<br>求整数1～100的累加值，但要求跳过所有个位为3的数<br>示例：</p><p>求1-100之间不能被7整除的整数的和（用continue）<br>求200-300之间所有的奇数的和（用continue）<br>求200-300之间第一个能被7整数的数（break）</p><p>调试<br>过去调试JavaScript的方式</p><p>alert()<br>console.log()<br>断点调试</p><p>断点调试是指自己在程序的某一行设置一个断点，调试时，程序运行到这一行就会停住，然后你可以一步一步往下调试，调试过程中可以看各个变量当前的值，出错的话，调试到出错的代码行即显示错误，停下。</p><p>调试步骤</p><p>浏览器中按F12–&gt;sources–&gt;找到需要调试的文件–&gt;在程序的某一行设置断点<br>调试中的相关操作</p><p>Watch: 监视，通过watch可以监视变量的值的变化，非常的常用。<br>F10: 程序单步执行，让程序一行一行的执行，这个时候，观察watch中变量的值的变化。<br>F8：跳到下一个断点处，如果后面没有断点了，则程序执行结束。<br>tips: 监视变量，不要监视表达式，因为监视了表达式，那么这个表达式也会执行。</p><p>代码调试的能力非常重要，只有学会了代码调试，才能学会自己解决bug的能力。初学者不要觉得调试代码麻烦就不去调试，知识点花点功夫肯定学的会，但是代码调试这个东西，自己不去练，永远都学不会。<br>基本的代码调试非常的简单，只要求记住代码调试的这几个按钮的作用即可，后面还会学到很多的代码调试技巧。<br>数组<br>为什么要学习数组<br>之前学习的数据类型，只能存储一个值(比如：Number/String。我们想存储班级中所有学生的姓名，此时该如何存储？</p><p>数组的概念<br>所谓数组，就是将多个元素（通常是同一类型）按一定顺序排列放到一个集合中，那么这个集合我们就称之为数组。</p><p>数组的定义<br>数组是一个有序的列表，可以在数组中存放任意的数据，并且数组的长度可以动态的调整。</p><p>通过数组字面量创建数组</p><p>// 创建一个空数组<br>var arr1 = [];<br>// 创建一个包含3个数值的数组，多个数组项以逗号隔开<br>var arr2 = [1, 3, 4];<br>// 创建一个包含2个字符串的数组<br>var arr3 = [‘a’, ‘c’]; </p><p>// 可以通过数组的length属性获取数组的长度<br>console.log(arr3.length);<br>// 可以设置length属性改变数组中元素的个数<br>arr3.length = 0;<br>获取数组元素<br>数组的取值</p><p>// 格式：数组名[下标]    下标又称索引<br>// 功能：获取数组对应下标的那个值，如果下标不存在，则返回undefined。<br>var arr = [‘red’,, ‘green’, ‘blue’];<br>arr[0];    // red<br>arr[2]; // blue<br>arr[3]; // 这个数组的最大下标为2,因此返回undefined<br>遍历数组<br>遍历：遍及所有，对数组的每一个元素都访问一次就叫遍历。</p><p>数组遍历的基本语法：</p><p>for(var i = 0; i &lt; arr.length; i++) {<br>    // 数组遍历的固定结构<br>}<br>数组中新增元素<br>数组的赋值</p><p>// 格式：数组名[下标/索引] = 值;<br>// 如果下标有对应的值，会把原来的值覆盖，如果下标不存在，会给数组新增一个元素。<br>var arr = [“red”, “green”, “blue”];<br>// 把red替换成了yellow<br>arr[0] = “yellow”;<br>// 给数组新增加了一个pink的值<br>arr[3] = “pink”;<br>示例<br>求一组数中的所有数的和和平均值<br>求一组数中的最大值和最小值，以及所在位置<br>将字符串数组用|或其他符号分割<br>要求将数组中的0项去掉，将不为0的值存入一个新的数组，生成新的数组<br>翻转数组<br>冒泡排序，从小到大<br>函数<br>为什么要有函数<br>如果要在多个地方求1-100之间所有数的和，应该怎么做？</p><p>什么是函数<br>把一段相对独立的具有特定功能的代码块封装起来，形成一个独立实体，就是函数，起个名字（函数名），在后续开发中可以反复调用</p><p>函数的作用就是封装一段代码，将来可以重复使用</p><p>函数的定义<br>函数声明</p><p>function 函数名(){<br>// 函数体<br>}<br>函数表达式</p><p>var fn = function() {<br>// 函数体<br>}<br>特点：</p><p>函数声明的时候，函数体并不会执行，只要当函数被调用的时候才会执行。<br>函数一般都用来干一件事情，需用使用动词+名词，表示做一件事情 tellStory sayHello等</p><p>函数的调用<br>调用函数的语法：</p><p>函数名();<br>特点：</p><p>函数体只有在调用的时候才会执行，调用需要()进行调用。<br>可以调用多次(重复使用)</p><p>代码示例：</p><p>// 声明函数<br>function sayHi() {<br>  console.log(“吃了没？”);<br>}<br>// 调用函数<br>sayHi();</p><p>// 求1-100之间所有数的和<br>function getSum() {<br>  var sum = 0;<br>  for (var  i = 0; i &lt; 100; i++) {<br>    sum += i;<br>  }<br>  console.log(sum);<br>}<br>// 调用<br>getSum();<br>函数的参数<br>为什么要有参数<br>&lt;!–hexoPostRenderEscape:<br>function getSum() {<br>var sum = 0;<br>for (var i = 1; i &lt;= 100; i++) {<br>  sum += i;<br>}<br>console.log();<br>}<br>// 虽然上面代码可以重复调用，但是只能计算1-100之间的值<br>// 如果想要计算n-m之间所有数的和，应该怎么办呢？:hexoPostRenderEscape–&gt;</p><p>语法：<br>&lt;!–hexoPostRenderEscape:<br>// 函数内部是一个封闭的环境，可以通过参数的方式，把外部的值传递给函数内部<br>// 带参数的函数声明<br>function 函数名(形参1, 形参2, 形参…){<br>// 函数体<br>}<br>// 带参数的函数调用<br>函数名(实参1, 实参2, 实参3);:hexoPostRenderEscape–&gt;</p><p>形参和实参<br>形式参数：在声明一个函数的时候，为了函数的功能更加灵活，有些值是固定不了的，对于这些固定不了的值。我们可以给函数设置参数。这个参数没有具体的值，仅仅起到一个占位置的作用，我们通常称之为形式参数，也叫形参。<br>实际参数：如果函数在声明时，设置了形参，那么在函数调用的时候就需要传入对应的参数，我们把传入的参数叫做实际参数，也叫实参。<br>var x = 5, y = 6;<br>fn(x,y);<br>function fn(a, b) {<br>  console.log(a + b);<br>}<br>//x,y实参，有具体的值。函数执行的时候会把x,y复制一份给函数内部的a和b，函数内部的值是复制的新值，无法修改外部的x,y<br>例子<br>求1-n之间所有数的和<br>求n-m之间所有数额和<br>圆的面积<br>求2个数中的最大值<br>求3个数中的最大值<br>判断一个数是否是素数<br>函数的返回值<br>当函数执行完的时候，并不是所有时候都要把结果打印。我们期望函数给我一些反馈（比如计算的结果返回进行后续的运算），这个时候可以让函数返回一些东西。也就是返回值。函数通过return返回一个返回值</p><p>返回值语法：</p><p>//声明一个带返回值的函数<br>function 函数名(形参1, 形参2, 形参…){<br>  //函数体<br>  return 返回值;<br>}</p><p>//可以通过变量来接收这个返回值<br>var 变量 = 函数名(实参1, 实参2, 实参3);<br>函数的调用结果就是返回值，因此我们可以直接对函数调用结果进行操作。</p><p>返回值详解：<br>如果函数没有显示的使用 return语句 ，那么函数有默认的返回值：undefined<br>如果函数使用 return语句，那么跟再return后面的值，就成了函数的返回值<br>如果函数使用 return语句，但是return后面没有任何值，那么函数的返回值也是：undefined<br>函数使用return语句后，这个函数会在执行完 return 语句之后停止并立即退出，也就是说return后面的所有其他代码都不会再执行。</p><p>推荐的做法是要么让函数始终都返回一个值，要么永远都不要返回值。<br>例子<br>求阶乘</p><p>求1!+2!+3!+….+n!</p><p>求一组数中的最大值</p><p>求一组数中的最小值</p><p>arguments的使用<br>JavaScript中，arguments对象是比较特别的一个对象，实际上是当前函数的一个内置属性。也就是说所有函数都内置了一个arguments对象，arguments对象中存储了传递的所有的实参。arguments是一个伪数组，因此及可以进行遍历</p><p>示例</p><p>求任意个数的最大值<br>求任意个数的和<br>例子<br>求斐波那契数列Fibonacci中的第n个数是多少？      1 1 2 3 5 8 13 21…<br>翻转数组，返回一个新数组<br>对数组排序，从小到大<br>输入一个年份，判断是否是闰年[闰年：能被4整数并且不能被100整数，或者能被400整数]<br>输入某年某月某日，判断这一天是这一年的第几天？<br>函数其它<br>匿名函数<br>匿名函数：没有名字的函数</p><p>匿名函数如何使用：</p><p>将匿名函数赋值给一个变量，这样就可以通过变量进行调用<br>匿名函数自调用<br>关于自执行函数（匿名函数自调用）的作用：防止全局变量污染。</p><p>自调用函数<br>匿名函数不能通过直接调用来执行，因此可以通过匿名函数的自调用的方式来执行</p><p>(function () {<br>  alert(123);<br>})();<br>函数是一种数据类型<br>function fn() {}<br>console.log(typeof fn);<br>函数作为参数<br>因为函数也是一种类型，可以把函数作为一个函数的参数，在一个函数中调用</p><p>函数做为返回值<br>因为函数是一种类型，所以可以把函数可以作为返回值从函数内部返回，这种用法在后面很常见。</p><p>function fn(b) {<br>var a = 10;<br>return function () {<br>  alert(a+b);<br>}<br>}<br>fn(15)();<br>代码规范<br>1.命名规范<br>2.变量规范<br>  var name = ‘zs’;<br>3.注释规范<br>  // 这里是注释<br>4.空格规范<br>5.换行规范<br>  var arr = [1, 2, 3, 4];<br>  if (a &gt; b) {</p><p>  }<br>  for(var i = 0; i &lt; 10; i++) {</p><p>  }<br>  function fn() {</p><p>  }<br>作用域<br>作用域：变量可以起作用的范围</p><p>全局变量和局部变量<br>全局变量<br>在任何地方都可以访问到的变量就是全局变量，对应全局作用域</p><p>局部变量<br>只在固定的代码片段内可访问到的变量，最常见的例如函数内部。对应局部作用域(函数作用域)</p><p>不使用var声明的变量是全局变量，不推荐使用。<br>变量退出作用域之后会销毁，全局变量关闭网页或浏览器才会销毁<br>块级作用域<br>任何一对花括号（｛和｝）中的语句集都属于一个块，在这之中定义的所有变量在代码块外都是不可见的，我们称之为块级作用域。<br>在es5之前没有块级作用域的的概念,只有函数作用域，<br>现阶段可以认为JavaScript没有块级作用域</p><p>词法作用域<br>变量的作用域是在定义时决定而不是执行时决定，也就是说词法作用域取决于源码，通过静态分析就能确定，因此词法作用域也叫做静态作用域。</p><p>在 js 中词法作用域规则:</p><p>函数允许访问函数外的数据.<br>整个代码结构中只有函数可以限定作用域.<br>作用域规则首先使用提升规则分析<br>如果当前作用规则中有名字了, 就不考虑外面的名字<br>&lt;!–hexoPostRenderEscape:<br>var num = 123;<br>function foo() {<br>console.log( num );<br>}<br>foo();<br>if ( false ) {<br>var num = 123;<br>}<br>console.log( num ); // undefiend:hexoPostRenderEscape–&gt;</p><p>作用域链<br>只有函数可以制造作用域结构， 那么只要是代码，就至少有一个作用域, 即全局作用域。凡是代码中有函数，那么这个函数就构成另一个作用域。如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域。</p><p>将这样的所有的作用域列出来，可以有一个结构: 函数内指向函数外的链式结构。就称作作用域链。<br>// 案例1：<br>function f1() {<br>    function f2() {<br>    }<br>}</p><p>var num = 456;<br>function f3() {<br>    function f4() {<br>    }<br>}</p><p>// 例子<br>function f1() {<br>    var num = 123;<br>    function f2() {<br>        console.log( num );<br>    }<br>    f2();<br>}<br>var num = 456;<br>f1();</p><p>预解析<br>JavaScript代码的执行是由浏览器中的JavaScript解析器来执行的。JavaScript解析器执行JavaScript代码的时候，分为两个过程：预解析过程和代码执行过程</p><p>预解析过程：</p><p>把变量的声明提升到当前作用域的最前面，只会提升声明，不会提升赋值。<br>把函数的声明提升到当前作用域的最前面，只会提升声明，不会提升调用。<br>先提升var，在提升function<br>JavaScript的执行过程<br>var a = 25;<br>function abc (){<br>alert(a);//undefined<br>var a = 10;<br>}<br>abc();<br>// 如果变量和函数同名的话，函数优先<br>console.log(a);<br>function a() {<br>console.log(‘aaaaa’);<br>}<br>var a = 1;<br>console.log(a);<br>全局解析规则<br>函数内部解析规则<br>变量提升<br>变量提升</p><p>定义变量的时候，变量的声明会被提升到作用域的最上面，变量的赋值不会提升。</p><p>函数提升</p><p>JavaScript解析器首先会把当前作用域的函数声明提前到整个作用域的最前面</p><p>// 1、———————————–<br>var num = 10;<br>fun();<br>function fun() {<br>console.log(num);<br>var num = 20;<br>}<br>//2、———————————–<br>var a = 18;<br>f1();<br>function f1() {<br>var b = 9;<br>console.log(a);<br>console.log(b);<br>var a = ‘123’;<br>}<br>// 3、———————————–<br>f1();<br>console.log(c);<br>console.log(b);<br>console.log(a);<br>function f1() {<br>var a = b = c = 9;<br>console.log(a);<br>console.log(b);<br>console.log(c);<br>}<br>对象<br>为什么要有对象<br>function printPerson(name, age, sex….) {<br>}<br>// 函数的参数如果特别多的话，可以使用对象简化<br>function printPerson(person) {<br>console.log(person.name);<br>……<br>}<br>什么是对象<br>现实生活中：万物皆对象，对象是一个具体的事物，一个具体的事物就会有行为和特征。<br>举例： 一部车，一个手机<br>车是一类事物，门口停的那辆车才是对象<br>  特征：红色、四个轮子<br>  行为：驾驶、刹车<br>JavaScript中的对象<br>JavaScript中的对象其实就是生活中对象的一个抽象<br>JavaScript的对象是无序属性的集合。<br>  其属性可以包含基本值、对象或函数。对象就是一组没有顺序的值。我们可以把JavaScript中的对象想象成键值对，其中值可以是数据和函数。<br>对象的行为和特征<br>  特征—属性<br>  行为—方法<br>事物的特征在对象中用属性来表示。</p><p>事物的行为在对象中用方法来表示。</p><p>对象字面量<br>字面量：11 ‘abc’ true [] {}等</p><p>var o = {<br>name: ‘zs,<br>age: 18,<br>sex: true,<br>sayHi: function () {<br>  console.log(this.name);<br>}<br>};<br>思考：</p><p>如何把学生对象、老师对象、英雄对象改写成字面量的方式<br>对象创建方式<br>对象字面量</p><p>var o = {<br>name: ‘zs’,<br>age: 18,<br>sex: true,<br>sayHi: function () {<br>  console.log(this.name);<br>}<br>};<br>new Object()创建对象</p><p>var person = new Object();<br>person.name = ‘lisi’;<br>person.age = 35;<br>person.job = ‘actor’;<br>person.sayHi = function(){<br>console.log(‘Hello,everyBody’);<br>}<br>工厂函数创建对象</p><p>function createPerson(name, age, job) {<br>var person = new Object();<br>person.name = name;<br>person.age = age;<br>person.job = job;<br>person.sayHi = function(){<br>console.log(‘Hello,everyBody’);<br>}<br>return person;<br>}<br>var p1 = createPerson(‘张三’, 22, ‘actor’);<br>自定义构造函数</p><p>function Person(name,age,job){<br>this.name = name;<br>this.age = age;<br>this.job = job;<br>this.sayHi = function(){<br>  console.log(‘Hello,everyBody’);<br>}<br>}<br>var p1 = new Person(‘张三’, 22, ‘actor’);<br>属性和方法<br>如果一个变量属于一个对象所有，那么该变量就可以称之为该对象的一个属性，属性一般是名词，用来描述事物的特征<br>如果一个函数属于一个对象所有，那么该函数就可以称之为该对象的一个方法，方法是动词，描述事物的行为和功能</p><p>new关键字<br>构造函数 ，是一种特殊的函数。主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中。</p><p>构造函数用于创建一类对象，首字母要大写。<br>构造函数要和new一起使用才有意义。<br>new在执行时会做四件事情<br>new会在内存中创建一个新的空对象<br>new 会让this指向这个新的对象<br>执行构造函数  目的：给这个新对象加属性和方法<br>new会返回这个新对象<br>this详解<br>JavaScript中的this指向问题，有时候会让人难以捉摸，随着学习的深入，我们可以逐渐了解<br>现在我们需要掌握函数内部的this几个特点</p><ol><li>函数在定义的时候this是不确定的，只有在调用的时候才可以确定</li><li>一般函数直接执行，内部this指向全局window</li><li>函数作为一个对象的方法，被该对象所调用，那么this指向的是该对象</li><li>构造函数中的this其实是一个隐式对象，类似一个初始化的模型，所有方法和属性都挂载到了这个隐式对象身上，后续通过new关键字来调用，从而实现实例化<br>对象的使用<br>遍历对象的属性<br>通过for..in语法可以遍历一个对象</li></ol><p>var obj = {};<br>for (var i = 0; i &lt; 10; i++) {<br>obj[i] = i * 2;<br>}<br>for(var key in obj) {<br>console.log(key + “==” + obj[key]);<br>}<br>删除对象的属性<br>function fun() {<br>this.name = ‘mm’;<br>}<br>var obj = new fun();<br>console.log(obj.name); // mm<br>delete obj.name;<br>console.log(obj.name); // undefined<br>简单类型和复杂类型的区别<br>基本类型又叫做值类型，复杂类型又叫做引用类型</p><p>值类型：简单数据类型，基本数据类型，在存储时，变量中存储的是值本身，因此叫做值类型。</p><p>引用类型：复杂数据类型，在存储是，变量中存储的仅仅是地址（引用），因此叫做引用数据类型。</p><p>堆和栈<br>堆栈空间分配区别：<br>　　1、栈（操作系统）：由操作系统自动分配释放 ，存放函数的参数值，局部变量的值等。其操作方式类似于数据结构中的栈；<br>　　2、堆（操作系统）： 存储复杂类型(对象)，一般由程序员分配释放， 若程序员不释放，由垃圾回收机制回收，分配方式倒是类似于链表。<br>注意：JavaScript中没有堆和栈的概念，此处我们用堆和栈来讲解，目的方便理解和方便以后的学习。<br>基本类型在内存中的存储</p><p>复杂类型在内存中的存储</p><p>基本类型作为函数的参数</p><p>复杂类型作为函数的参数</p><p>// 下面代码输出的结果</p><p>function Person(name,age,salary) {<br>  this.name = name;<br>  this.age = age;<br>  this.salary = salary;<br>}<br>function f1(person) {<br>  person.name = “ls”;<br>  person = new Person(“aa”,18,10);<br>}</p><p>var p = new Person(“zs”,18,1000);<br>console.log(p.name);<br>f1(p);<br>console.log(p.name);<br>小问题，好好思考下：</p><p>//1.<br>var num1 = 10;<br>var num2 = num1;<br>num1 = 20;<br>console.log(num1);<br>console.log(num2);</p><p>//2.<br>var num = 50;<br>function f1(num) {<br>    num = 60;<br>    console.log(num);<br>}<br>f1(num);<br>console.log(num);</p><p>//3.<br>var num1 = 55;<br>var num2 = 66;<br>function f1(num, num1) {<br>  num = 100;<br>  num1 = 100;<br>  num2 = 100;<br>  console.log(num);<br>  console.log(num1);<br>  console.log(num2);<br>}</p><p>f1(num1, num2);<br>console.log(num1);<br>console.log(num2);<br>console.log(num);<br>内置对象<br>JavaScript中的对象分为3种：内置对象、浏览器对象、自定义对象</p><p>JavaScript 提供多个内置对象：Math/Array/Number/String/Boolean…</p><p>对象只是带有属性和方法的特殊数据类型。</p><p>学习一个内置对象的使用，只要学会其常用的成员的使用（通过查文档学习）</p><p>可以通过MDN/W3C来查询</p><p>内置对象的方法很多，我们只需要知道内置对象提供的常用方法，使用的时候查询文档。</p><p>MDN<br>Mozilla 开发者网络（MDN）提供有关开放网络技术（Open Web）的信息，包括 HTML、CSS 和万维网及 HTML5 应用的 API。</p><p>MDN<br>通过查询MDN学习Math对象的random()方法的使用<br>如何学习一个方法？<br>方法的功能<br>参数的意义和类型<br>返回值意义和类型<br>demo进行测试<br>Math对象<br>Math对象不是构造函数，它具有数学常数和函数的属性和方法，都是以静态成员的方式提供<br>跟数学相关的运算来找Math中的成员（求绝对值，取整）</p><p>Math</p><p>演示：Math.PI、Math.random()、Math.floor()/Math.ceil()、Math.round()、Math.abs() 、Math.max()</p><p>Math.PI                        // 圆周率<br>Math.random()                // 生成随机数<br>Math.floor()/Math.ceil()     // 向下取整/向上取整<br>Math.round()                // 取整，四舍五入<br>Math.abs()                    // 绝对值<br>Math.max()/Math.min()         // 求最大和最小值</p><p>Math.sin()/Math.cos()         // 正弦/余弦<br>Math.power()/Math.sqrt()     // 求指数次幂/求平方根<br>案例<br>求10-20之间的随机数<br>随机生成颜色RGB<br>模拟实现max()/min()<br>Date对象<br>创建 Date 实例用来处理日期和时间。Date 对象基于1970年1月1日（世界标准时间）起的毫秒数。<br>&lt;!–hexoPostRenderEscape:<br>// 获取当前时间，UTC世界时间，距1970年1月1日（世界标准时间）起的毫秒数<br>var now = new Date();<br>console.log(now.valueOf());    // 获取距1970年1月1日（世界标准时间）起的毫秒数<br>Date构造函数的参数</p><ol><li>毫秒数 1498099000356 new Date(1498099000356)</li><li>日期格式字符串 ‘2015-5-1’ new Date(‘2015-5-1’)</li><li>年、月、日…… new Date(2015, 4, 1) // 月份从0开始:hexoPostRenderEscape–&gt;</li></ol><p>获取日期的毫秒形式<br>&lt;!–hexoPostRenderEscape:<br>var now = new Date();<br>// valueOf用于获取对象的原始值<br>console.log(date.valueOf())<br>// HTML5中提供的方法，有兼容性问题<br>var now = Date.now();</p><p>// 不支持HTML5的浏览器，可以用下面这种方式<br>var now = + new Date(); // 调用 Date对象的valueOf() :hexoPostRenderEscape–&gt;</p><p>日期格式化方法<br>toString()        // 转换成字符串<br>valueOf()        // 获取毫秒值<br>// 下面格式化日期的方法，在不同浏览器可能表现不一致，一般不用<br>toDateString()<br>toTimeString()<br>toLocaleDateString()<br>toLocaleTimeString()<br>获取日期指定部分<br>getTime()        // 返回毫秒数和valueOf()结果一样，valueOf()内部调用的getTime()<br>getMilliseconds()<br>getSeconds()  // 返回0-59<br>getMinutes()  // 返回0-59<br>getHours()    // 返回0-23<br>getDay()      // 返回星期几 0周日   6周6<br>getDate()     // 返回当前月的第几天<br>getMonth()    // 返回月份，**<em>从0开始**</em><br>getFullYear() //返回4位的年份  如 2016<br>例子<br>写一个函数，格式化日期对象，返回yyyy-MM-dd HH:mm:ss的形式<br>function formatDate(d) {<br>//如果date不是日期对象，返回<br>if (!date instanceof Date) {<br>  return;<br>}<br>var year = d.getFullYear(),<br>    month = d.getMonth() + 1,<br>    date = d.getDate(),<br>    hour = d.getHours(),<br>    minute = d.getMinutes(),<br>    second = d.getSeconds();<br>month = month &lt; 10 ? ‘0’ + month : month;<br>date = date &lt; 10 ? ‘0’ + date : date;<br>hour = hour &lt; 10 ? ‘0’ + hour : hour;<br>minute = minute &lt; 10 ? ‘0’ + minute:minute;<br>second = second &lt; 10 ? ‘0’ + second:second;<br>return year + ‘-‘ + month + ‘-‘ + date + ‘ ‘ + hour + ‘:’ + minute + ‘:’ + second;<br>}<br>计算时间差，返回相差的天/时/分/秒<br>function getInterval(start, end) {<br>var day, hour, minute, second, interval;<br>interval = end - start;<br>interval /= 1000;<br>day = Math.round(interval / 60 /60 / 24);<br>hour = Math.round(interval / 60 /60 % 24);<br>minute = Math.round(interval / 60 % 60);<br>second = Math.round(interval % 60);<br>return {<br>  day: day,<br>  hour: hour,<br>  minute: minute,<br>  second: second<br>}<br>}<br>Array对象<br>创建数组对象的两种方式<br>字面量方式<br>new Array()<br>&lt;!–hexoPostRenderEscape:<br>// 1. 使用构造函数创建数组对象<br>// 创建了一个空数组<br>var arr = new Array();<br>// 创建了一个数组，里面存放了3个字符串<br>var arr = new Array(‘zs’, ‘ls’, ‘ww’);<br>// 创建了一个数组，里面存放了4个数字<br>var arr = new Array(1, 2, 3, 4);<br>// 2. 使用字面量创建数组对象<br>var arr = [1, 2, 3];</p><p>// 获取数组中元素的个数<br>console.log(arr.length);:hexoPostRenderEscape–&gt;</p><p>检测一个对象是否是数组</p><p>instanceof<br>Array.isArray() HTML5中提供的方法，有兼容性问题<br>函数的参数，如果要求是一个数组的话，可以用这种方式来进行判断<br>toString()/valueOf()</p><p>toString() 把数组转换成字符串，逗号分隔每一项<br>valueOf() 返回数组对象本身<br>数组常用方法</p><p>演示：push()、shift()、unshift()、reverse()、sort()、splice()、indexOf()</p><p>// 1 栈操作(先进后出)<br>push()<br>pop()         //取出数组中的最后一项，修改length属性<br>// 2 队列操作(先进先出)<br>push()<br>shift()        //取出数组中的第一个元素，修改length属性<br>unshift()     //在数组最前面插入项，返回数组的长度<br>// 3 排序方法<br>reverse()    //翻转数组<br>sort();     //即使是数组sort也是根据字符，从小到大排序<br>// 带参数的sort是如何实现的？<br>// 4 操作方法<br>concat()      //把参数拼接到当前数组<br>slice()     //从当前数组中截取一个新的数组，不影响原来的数组，参数start从0开始,end从1开始<br>splice()    //删除或替换当前数组的某些项目，参数start, deleteCount, options(要替换的项目)<br>// 5 位置方法<br>indexOf()、lastIndexOf()   //如果没找到返回-1<br>// 6 迭代方法 不会修改原数组(可选)<br>every()、filter()、forEach()、map()、some()<br>// 7 方法将数组的所有元素连接到一个字符串中。<br>join()<br>清空数组</p><p>// 方式1 推荐<br>arr = [];<br>// 方式2<br>arr.length = 0;<br>// 方式3<br>arr.splice(0, arr.length);<br>例子<br>将一个字符串数组输出为|分割的形式，比如“刘备|张飞|关羽”。使用两种方式实现<br>&lt;!–hexoPostRenderEscape:</p><p>function myJoin(array, seperator) {<br>seperator = seperator || ‘,’;<br>array = array || [];<br>if (array.length == 0){<br>  return ‘’;<br>}<br>var str = array[0];<br>for (var i = 1; i &lt; array.length; i++) {<br>  str += seperator + array[i];<br>}<br>return str;<br>}<br>var array = [6, 3, 5, 6, 7, 8, 0];<br>console.log(myJoin(array, ‘-‘));<br>console.log(array.join(‘-‘)):hexoPostRenderEscape–&gt;</p><p>将一个字符串数组的元素的顺序进行反转。[“a”, “b”, “c”, “d”] -&gt; [ “d”,”c”,”b”,”a”]。使用两种种方式实现。提示：第i个和第length-i-1个进行交换<br>&lt;!–hexoPostRenderEscape:<br>function myReverse(arr) {<br>if (!arr || arr.length == 0) {<br>  return [];<br>}<br>for (var i = 0; i &lt; arr.length / 2; i++) {<br>  var tmp = arr[i];<br>  arr[i] = arr[this.length - i - 1];<br>  arr[arr.length - i - 1] = tmp;<br>}<br>return arr;<br>}<br>var array = [‘a’, ‘b’, ‘c’];<br>console.log(myReverse(array));</p><p>console.log(array.reverse());:hexoPostRenderEscape–&gt;</p><p>工资的数组[1500, 1200, 2000, 2100, 1800],把工资超过2000的删除<br>// 方式1<br>var array =  [1500,1200,2000,2100,1800];<br>var tmpArray = [];<br>for (var i = 0; i &lt; array.length; i++) {<br>if(array[i] &lt; 2000) {<br>  tmpArray.push(array[i]);<br>}<br>}<br>console.log(tmpArray);<br>// 方式2<br>var array =  [1500, 1200, 2000, 2100, 1800];<br>array = array.filter(function (item, index) {<br>if (item &lt; 2000) {<br>  return true;<br>}<br>return false;<br>});<br>console.log(array);<br>[“c”, “a”, “z”, “a”, “x”, “a”]找到数组中每一个a出现的位置<br>var array =  [‘c’, ‘a’, ‘z’, ‘a’, ‘x’, ‘a’];<br>do {<br>var index = array.indexOf(‘a’,index + 1);<br>if (index != -1){<br>  console.log(index);<br>}<br>} while (index &gt; 0);<br>编写一个方法去掉一个数组的重复元素<br>&lt;!–hexoPostRenderEscape:<br>var array =  [‘c’, ‘a’, ‘z’, ‘a’, ‘x’, ‘a’];<br>function clear() {<br>var o = {};<br>for (var i = 0; i &lt; array.length; i++) {<br>  var item = array[i];<br>  if (o[item]) {<br>o<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span></p><p>  }else{<br>o<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></p><p>  }<br>}<br>var tmpArray = [];<br>for(var key in o) {<br>  if (o[key] == 1) {<br>tmpArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span></p><p>  }else{<br><span class="token keyword">if</span><span class="token punctuation">(</span>tmpArray<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><br>  tmpArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><br><span class="token punctuation">&#125;</span></p><p>  }<br>}<br>returm tmpArray;<br>}<br>console.log(clear(array));:hexoPostRenderEscape–&gt;</p><p>基本包装类型<br>为了方便操作基本数据类型，JavaScript还提供了三个特殊的引用类型：String/Number/Boolean</p><p>// 下面代码的问题？<br>// s1是基本类型，基本类型是没有方法的<br>var s1 = ‘zhangsan’;<br>var s2 = s1.substring(5);</p><p>// 当调用s1.substring(5)的时候，先把s1包装成String类型的临时对象，再调用substring方法，最后销毁临时对象, 相当于：<br>var s1 = new String(‘zhangsan’);<br>var s2 = s1.substring(5);<br>s1 = null;<br>// 创建基本包装类型的对象<br>var num = 18;                  //数值，基本类型<br>var num = Number(‘18’);     //类型转换<br>var num = new Number(18);     //基本包装类型，对象<br>// Number和Boolean基本包装类型基本不用，使用的话可能会引起歧义。例如：<br>var b1 = new Boolean(false);<br>var b2 = b1 &amp;&amp; true;        // 结果是什么<br>String对象<br>字符串的不可变<br>var str = ‘abc’;<br>str = ‘hello’;<br>// 当重新给str赋值的时候，常量’abc’不会被修改，依然在内存中<br>// 重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变<br>// 由于字符串的不可变，在大量拼接字符串的时候会有效率问题<br>创建字符串对象<br>&lt;!–hexoPostRenderEscape:<br>var str = new String(‘Hello World’);<br>// 获取字符串中字符的个数<br>console.log(str.length);:hexoPostRenderEscape–&gt;</p><p>字符串对象的常用方法</p><p>字符串所有的方法，都不会修改字符串本身(字符串是不可变的)，操作完成会返回一个新的字符串</p><p>// 1 字符方法<br>charAt()        //获取指定位置处字符<br>charCodeAt()      //获取指定位置处字符的ASCII码<br>str[0]           //HTML5，IE8+支持 和charAt()等效<br>// 2 字符串操作方法<br>concat()           //拼接字符串，等效于+，+更常用<br>slice()            //从start位置开始，截取到end位置，end取不到<br>substring()     //从start位置开始，截取到end位置，end取不到<br>substr()           //从start位置开始，截取length个字符<br>// 3 位置方法<br>indexOf()       //返回指定内容在元字符串中的位置<br>lastIndexOf()     //从后往前找，只找第一个匹配的<br>// 4 去除空白<br>trim()          //只能去除字符串前后的空白<br>// 5 大小写转换方法<br>to(Locale)UpperCase()     //转换大写<br>to(Locale)LowerCase()     //转换小写<br>// 6 其它<br>search()<br>replace()<br>split()<br>fromCharCode()<br>// String.fromCharCode(101, 102, 103);     //把ASCII码转换成字符串<br>案例<br>截取字符串”我爱中华人民共和国”，中的”中华”</p><p>var s = “我爱中华人民共和国”;<br>s = s.substr(2,2);<br>console.log(s);<br>“abcoefoxyozzopp”查找字符串中所有o出现的位置</p><p>var s = ‘abcoefoxyozzopp’;<br>var array = [];<br>do {<br>var index = s.indexOf(‘o’, index + 1);<br>if (index != -1) {<br>  array.push(index);<br>}<br>} while (index &gt; -1);<br>console.log(array);<br>把字符串中所有的o替换成!<br>&lt;!–hexoPostRenderEscape:</p><p>var s = ‘abcoefoxyozzopp’;<br>do {<br>s = s.replace(‘o’, ‘’);<br>} while (s.indexOf(‘o’) &gt; -1);<br>console.log(s);<br>console.log(s.replace(/o/ig, ‘’));<br>判断一个字符串中出现次数最多的字符，统计这个次数<br>var s = ‘abcoefoxyozzopp’;<br>var o = {};</p><p>for (var i = 0; i &lt; s.length; i++) {<br>var item = s.charAt(i);<br>if (o[item]) {<br>o[item] ++;<br>}else{<br>o[item] = 1;<br>}<br>}</p><p>var max = 0;<br>var char ;<br>for(var key in o) {<br>if (max &lt; o[key]) {<br>max = o[key];<br>char = key;<br>}<br>}</p><p>console.log(max);<br>console.log(char);:hexoPostRenderEscape–&gt;</p><p>咱们试试做做看？<br>给定一个字符串如：“abaasdffggghhjjkkgfddsssss3444343”问题如下：<br>1、 字符串的长度<br>2、 取出指定位置的字符，如：0,3,5,9等<br>3、 查找指定字符是否在以上字符串中存在，如：i，c ，b等<br>4、 替换指定的字符，如：g替换为22,ss替换为b等操作方法<br>5、 截取指定开始位置到结束位置的字符串，如：取得1-5的字符串<br>6、 找出以上字符串中出现次数最多的字符和出现的次数<br>7、 遍历字符串，并将遍历出的字符两头添加符号“@”输出至当前的文档页面。 </p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML学习合集</title>
      <link href="2020/08/11/HTML%E5%AD%A6%E4%B9%A0%E5%90%88%E9%9B%86/"/>
      <url>2020/08/11/HTML%E5%AD%A6%E4%B9%A0%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="HTML学习合集"><a href="#HTML学习合集" class="headerlink" title="HTML学习合集"></a>HTML学习合集</h2><h3 id="一、HTML5简介"><a href="#一、HTML5简介" class="headerlink" title="一、HTML5简介"></a>一、HTML5简介</h3><h4 id="1、什么是HTML5"><a href="#1、什么是HTML5" class="headerlink" title="1、什么是HTML5"></a>1、什么是HTML5</h4><pre><code>HTML5是下一代的HTMLHTML5 将成为 HTML、XHTML 以及 HTML DOM 的新标准。</code></pre><p>HTML 的上一个版本诞生于 1999 年。自从那以后，Web 世界已经经历了巨变。<br>HTML5 仍处于完善之中。然而，大部分现代浏览器已经具备了某些 HTML5 支持。</p><h4 id="2、HTML5是如何起步的？"><a href="#2、HTML5是如何起步的？" class="headerlink" title="2、HTML5是如何起步的？"></a>2、HTML5是如何起步的？</h4><pre><code>HTML5是下一代的HTMLHTML5 将成为 HTML、XHTML 以及 HTML DOM 的新标准。</code></pre><p>HTML 的上一个版本诞生于 1999 年。自从那以后，Web 世界已经经历了巨变。<br>HTML5 仍处于完善之中。然而，大部分现代浏览器已经具备了某些 HTML5 支持。</p><pre><code>WHATWG 致力于 web 表单和应用程序，而 W3C 专注于 XHTML 2.0。在 2006 年，双方决定进行合作，来创建一个新版本的 HTML。</code></pre><p>为 HTML5 建立的一些规则：<br>新特性应该基于 HTML、CSS、DOM 以及 JavaScript。<br>减少对外部插件的需求（比如 Flash）</p><ul><li>更优秀的错误处理</li><li>更多取代脚本的标记</li><li>HTML5 应该独立于设备</li><li>开发进程应对公众透明</li></ul><h4 id="3、HTML5新特性"><a href="#3、HTML5新特性" class="headerlink" title="3、HTML5新特性"></a>3、HTML5新特性</h4><pre><code>HTML5 中的一些有趣的新特性：用于绘画的 canvas 元素用于媒介回放的 video 和 audio 元素对本地离线存储的更好的支持新的特殊内容元素，比如 article、footer、header、nav、section新的表单控件，比如 calendar、date、time、email、url、search</code></pre><h4 id="4、浏览器支持"><a href="#4、浏览器支持" class="headerlink" title="4、浏览器支持"></a>4、浏览器支持</h4><pre><code>最新版本的 Safari、Chrome、Firefox 以及 Opera 支持某些 HTML5 特性。</code></pre><p>Internet Explorer 9 将支持某些 HTML5 特性。</p><h3 id="二、HTML-5-视频"><a href="#二、HTML-5-视频" class="headerlink" title="二、HTML 5 视频"></a>二、HTML 5 视频</h3><h4 id="1、WEB上的视频"><a href="#1、WEB上的视频" class="headerlink" title="1、WEB上的视频"></a>1、WEB上的视频</h4><pre><code>直到现在，仍然不存在一项旨在网页上显示视频的标准。今天，大多数视频是通过插件（比如 Flash）来显示的。然而，并非所有浏览器都拥有同样的插件。HTML5 规定了一种通过 video 元素来包含视频的标准方法。</code></pre><h4 id="2、视频格式"><a href="#2、视频格式" class="headerlink" title="2、视频格式"></a>2、视频格式</h4><p>当前，vedio元素 支持三种视频格式：</p><table><thead><tr><th align="right">格式</th><th align="right">IE</th><th align="right">Firefox</th><th align="right">Opera</th><th align="right">Chrome</th><th align="right">Safari</th></tr></thead><tbody><tr><td align="right">Ogg</td><td align="right">No</td><td align="right">3.5+</td><td align="right">10.5+</td><td align="right">5.0+</td><td align="right">No</td></tr><tr><td align="right">MPEG4</td><td align="right">9.0+</td><td align="right">No</td><td align="right">No</td><td align="right">5.0+</td><td align="right">3.0+</td></tr><tr><td align="right">WebM</td><td align="right">No</td><td align="right">4.0+</td><td align="right">10.6+</td><td align="right">6.0+</td><td align="right">No</td></tr></tbody></table><pre><code>Ogg = 带有 Theora 视频编码和 Vorbis 音频编码的 Ogg 文件MPEG4 = 带有 H.264 视频编码和 AAC 音频编码的 MPEG 4 文件WebM = 带有 VP8 视频编码和 Vorbis 音频编码的 WebM 文件</code></pre><h4 id="3、Internet-Explorer"><a href="#3、Internet-Explorer" class="headerlink" title="3、Internet Explorer"></a>3、Internet Explorer</h4><pre><code>Internet Explorer 8 不支持 video 元素。在 IE 9 中，将提供对使用 MPEG4 的 video 元素的支持。</code></pre><h4 id="4、标签的属性"><a href="#4、标签的属性" class="headerlink" title="4、标签的属性"></a>4、标签的属性</h4><table><thead><tr><th align="right">属性</th><th align="right">值</th><th align="right">描述</th></tr></thead><tbody><tr><td align="right">autoplay</td><td align="right">autoplay</td><td align="right">如果出现该属性，则视频在就绪后马上播放。</td></tr><tr><td align="right">controls</td><td align="right">controls</td><td align="right">如果出现该属性，则向用户显示控件，比如播放按钮。</td></tr><tr><td align="right">height</td><td align="right">pixels</td><td align="right">设置视频播放器的高度。</td></tr><tr><td align="right">loop</td><td align="right">loop</td><td align="right">如果出现该属性，则当媒介文件完成播放后再次开始播放。</td></tr><tr><td align="right">preload</td><td align="right">preload</td><td align="right">如果出现该属性，则视频在页面加载时进行加载，并预备播放。如果使用 “autoplay”，则忽略该属性。</td></tr><tr><td align="right">src</td><td align="right">url</td><td align="right">要播放的视频的 URL。</td></tr><tr><td align="right">width</td><td align="right">pixels</td><td align="right">设置视频播放器的宽度。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> html5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css学习合集</title>
      <link href="2020/08/11/css%E5%AD%A6%E4%B9%A0%E5%90%88%E9%9B%86/"/>
      <url>2020/08/11/css%E5%AD%A6%E4%B9%A0%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS学习合集"><a href="#CSS学习合集" class="headerlink" title="CSS学习合集"></a>CSS学习合集</h2><blockquote><p>从HTML被发明开始，样式就以各种形式存在。不同的浏览器结合它们各自的样式语言为用户提供页面效果的控制。最初的HTML只包含很少的显示属性。</p><p>随着HTML的成长，为了满足页面设计者的要求，HTML添加了很多显示功能。但是随着这些功能的增加，HTML变的越来越杂乱，而且HTML页面也越来越臃肿。于是CSS便诞生了。</p></blockquote><h3 id="CSS初识"><a href="#CSS初识" class="headerlink" title="CSS初识"></a>CSS初识</h3><blockquote><p>CSS(Cascading Style Sheets) 美化样式</p><p>CSS通常称为CSS样式表或层叠样式表（级联样式表），主要用于设置HTML页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及版面的布局等外观显示样式。</p><p>CSS以HTML为基础，提供了丰富的功能，如字体、颜色、背景的控制及整体排版等，而且还可以针对不同的浏览器设置不同的样式。</p></blockquote><h3 id="引入CSS样式表（书写位置）"><a href="#引入CSS样式表（书写位置）" class="headerlink" title="引入CSS样式表（书写位置）"></a>引入CSS样式表（书写位置）</h3><blockquote><p>CSS可以写到哪个位置？是不是一定写到html文件里面呢？</p></blockquote><h4 id="内联样式表（内嵌样式）"><a href="#内联样式表（内嵌样式）" class="headerlink" title="内联样式表（内嵌样式）"></a>内联样式表（内嵌样式）</h4><blockquote><p>内联样式，又有人称行内样式、行间样式、内嵌样式。是通过标签的style属性来设置元素的样式，其基本语法格式如下：</p></blockquote><pre><code>&lt;标签名 style=&quot;属性1：属性值1; 属性2：属性值2; 属性3：属性值3; ......&quot;&gt;&lt;/标签名&gt;</code></pre><blockquote><p>语法中style是标签的属性，实际上任何HTML标签都拥有style属性，用来设置行内式。其中属性和值的书写规范与CSS样式规则相同，行内式只对其所在的标签及嵌套在其中的子标签起作用。</p></blockquote><h4 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h4><blockquote><p>内嵌式是将CSS代码集中写在HTML文档的head头部标签中，并且用style标签定义，其基本语法格式如下：</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>我的网页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">        选择器&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>            属性<span class="token number">1</span>：属性值<span class="token number">1</span><span class="token punctuation">;</span>            属性<span class="token number">2</span>：属性值<span class="token number">2</span><span class="token punctuation">;</span>            属性<span class="token number">3</span>：属性值<span class="token number">3</span><span class="token punctuation">;</span>            <span class="token number">......</span>        &amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre><blockquote><p>语法中，style标签一般位于head标签中title标签之后，也可以把他放在HTML文档的任何地方</p><p>其中 type=”text/css” 在html5中可以省略，写上也比较符合规范，所以这个地方可以写，也可以省略。</p></blockquote><h4 id="外部样式表"><a href="#外部样式表" class="headerlink" title="外部样式表"></a>外部样式表</h4><blockquote><p>链入式是将所有的样式放在一个或多个以.CSS为扩展名的外部样式表文件中，通过link标签将外部样式 表文件链接到HTML文档中，其基本语法格式如下</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./css/index.css<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre><blockquote><p>注意： link 是个单标签哦!!!</p><p>该语法中，link标签需要放在head头部标签中，并且必须指定link标签的三个属性，具体如下：</p><p>1、href：定义所链接外部样式表文件的URL，可以是相对路径，也可以是绝对路径。</p><p>2、type：定义所链接文档的类型，在这里需要指定为“text/CSS”，表示链接的外部文件为CSS样式表。</p><p>3、rel：定义当前文档与被链接文档之间的关系，在这里需要指定为“stylesheet”，表示被链接的文档是一个样式表文件。</p></blockquote><h4 id="三种样式表权重对比"><a href="#三种样式表权重对比" class="headerlink" title="三种样式表权重对比"></a>三种样式表权重对比</h4><blockquote><p>内联样式表 &gt; 内部样式表 = 外部样式表</p></blockquote><h4 id="三种样式表总结（位置）"><a href="#三种样式表总结（位置）" class="headerlink" title="三种样式表总结（位置）"></a>三种样式表总结（位置）</h4><table><thead><tr><th align="right">样式表</th><th align="right">优点</th><th align="right">缺点</th><th align="right">使用情况</th><th align="right">控制范围</th></tr></thead><tbody><tr><td align="right">行内样式表</td><td align="right">书写方便，权重高</td><td align="right">没有实现样式和结构相分离</td><td align="right">较少</td><td align="right">控制一个标签（少）</td></tr><tr><td align="right">内部样式表</td><td align="right">部分结构和样式相分离</td><td align="right">没有彻底分离</td><td align="right">较多</td><td align="right">控制一个页面（中）</td></tr><tr><td align="right">外部样式表</td><td align="right">完全实现结构和样式相分离</td><td align="right">需要引入</td><td align="right">最多，强烈推荐</td><td align="right">控制整个站点（多）</td></tr></tbody></table><h3 id="CSS样式规则"><a href="#CSS样式规则" class="headerlink" title="CSS样式规则"></a>CSS样式规则</h3><blockquote><p>使用HTML时，需要遵从一定的规范。CSS亦如此，要想熟练地使用CSS对网页进行修饰，首先需要了解CSS样式规则，具体格式如下:</p></blockquote><pre class=" language-css"><code class="language-css"><span class="token number">.</span>main&amp;<span class="token hexcode">#123</span><span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>&amp;<span class="token hexcode">#125</span><span class="token punctuation">;</span></code></pre><blockquote><p>在上面的样式规则中:</p><ol><li>选择器用于指定CSS样式作用的HTML对象，花括号内是对该对象设置的具体样式。</li><li>属性和属性值以“键值对”的形式出现。</li><li>属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等。</li><li>属性和属性值之间用英文“:”连接。</li><li>多个“键值对”之间用英文“;”进行区分。</li></ol><p>可以用段落 和 表格的对齐的演示。</p></blockquote><h2 id="选择器（重点）"><a href="#选择器（重点）" class="headerlink" title="选择器（重点）"></a>选择器（重点）</h2><blockquote><p>要想将CSS样式应用于特定的HTML元素，首先需要找到该目标元素。在CSS中，执行这一任务的样式规则部分被称为选择器（选择符）。</p><p>选择器干啥的？ 选择标签用的</p><p>这就用到基础选择器组：</p></blockquote><h3 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h3><blockquote><p>id选择器使用“#”进行标识，后面紧跟id名，其基本语法格式如下：</p></blockquote><pre><code>#id名&#123;    属性1：属性值1;    属性2：属性值2;    属性3：属性值3;    ......&#125;</code></pre><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><blockquote><p>类选择器使用“.”（英文点号）进行标识，后面紧跟类名，其基本语法格式如下：</p></blockquote><pre><code>.类名&#123;    属性1:属性值1;    属性2:属性值2;    属性3:属性值3;    ......&#125;标签调用的时候用 class=&quot;类名&quot;即可。</code></pre><blockquote><p>1、长名称或词组可以使用中横线来为选择器命名。</p><p>2、不建议使用“_”下划线来命名CSS选择器。</p><p>3、不要纯数字、中文等命名， 尽量使用英文字母来表示。</p></blockquote><h4 id="标签选择器（元素选择器）"><a href="#标签选择器（元素选择器）" class="headerlink" title="标签选择器（元素选择器）"></a>标签选择器（元素选择器）</h4><blockquote><p>标签选择器是指用HTML标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的CSS样式。其基本语法格式如下：</p></blockquote><pre><code>标签名&#123;    属性1:属性值1;    属性2:属性值2;    属性3:属性值3; &#125;或者元素名&#123;    属性1:属性值1;    属性2:属性值2;    属性3:属性值3; &#125;</code></pre><blockquote><p>标签选择器最大的优点是能快速为页面中同类型的标签统一样式，同时这也是他的缺点，不能设计差异化样式。</p><p>标签选择器 可以把某一类标签全部选择出来</p><p>例如：div span p table tr td input select …….</p></blockquote><h4 id="ID选择器、类名选择器、标签选择器权重对比"><a href="#ID选择器、类名选择器、标签选择器权重对比" class="headerlink" title="ID选择器、类名选择器、标签选择器权重对比"></a>ID选择器、类名选择器、标签选择器权重对比</h4><blockquote><p>ID选择器 &gt; 类名选择器 &gt; 标签选择器</p></blockquote><h4 id="多类名选择器"><a href="#多类名选择器" class="headerlink" title="多类名选择器"></a>多类名选择器</h4><blockquote><p>我们可以给标签指定多个类名，从而达到更多选择的目的。</p><p>多类名选择器在后期布局比较复杂的情况下，还是较多使用的。</p><p>其语法结构如下：</p></blockquote><pre><code>&lt;div class=&quot;pink fontWeight font30&quot;&gt;index1&lt;/div&gt;&lt;div class=&quot;font30&quot;&gt;index2&lt;/div&gt;&lt;div class=&quot;font18 pink&quot;&gt;index3&lt;/div&gt;&lt;div class=&quot;font18&quot;&gt;index4&lt;/div&gt;</code></pre><blockquote><p>注意：</p><p>1、样式显示效果跟HTML元素中的类名先后顺序没有关系,受CSS样式书写的上下顺序有关。</p><p>2、各个类名中间用空格隔开。</p></blockquote><h4 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h4><blockquote><p>通配符选择器用”*”,他是所有选择器中作用范围最广的,能匹配页面中的所有元素。</p><p>其基本语法格式如下</p></blockquote><pre><code>*&#123;    属性1: 属性值1;    属性2: 属性值2;    属性3: 属性值3;    ......&#125;// 下方代码是使用通配符选择器定义css样式，清除所有HTML标记的默认边距。/* 此为css注释语法 */*&#123;    margin: 0;    padding: 0;&#125;</code></pre><h4 id="派生选择器（后代选择器）"><a href="#派生选择器（后代选择器）" class="headerlink" title="派生选择器（后代选择器）"></a>派生选择器（后代选择器）</h4><blockquote><p>派生选择器（后代选择器）用于选取某元素的后代元素。</p></blockquote><pre><code>ul li&#123;    background: orange;&#125;</code></pre><h4 id="子代选择器"><a href="#子代选择器" class="headerlink" title="子代选择器"></a>子代选择器</h4><blockquote><p>与后代选择器相比，子元素选择器（Child selectors）只能选择作为某元素子元素的元素。</p><p>其基本语法格式如下：</p></blockquote><pre><code>ul&gt;li&#123;    background: orange;&#125;</code></pre><h4 id="相邻兄弟选择器"><a href="#相邻兄弟选择器" class="headerlink" title="相邻兄弟选择器"></a>相邻兄弟选择器</h4><blockquote><p>相邻兄弟选择器（Adjacent sibling selector）可选择紧接在另一元素后的元素，且二者有相同父元素。</p><p>如果需要选择紧接在另一个元素后的元素，而且二者有相同的父元素，可以使用相邻兄弟选择器</p><p>（Adjacent sibling selector）。其基本语法格式如下：</p></blockquote><pre><code>div+p&#123;  background-color:yellow;&#125;</code></pre><h4 id="后续兄弟选择器"><a href="#后续兄弟选择器" class="headerlink" title="后续兄弟选择器"></a>后续兄弟选择器</h4><blockquote><p>后续兄弟选择器选取所有指定元素之后的相邻兄弟元素。</p><p>以下实例选取了所有</p><p>元素之后的所有相邻兄弟元素</p></blockquote><pre><code>div~p&#123;  background-color:yellow;&#125;</code></pre><h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><blockquote><blockquote><p>选取具有特定属性的HTML元素样式，具有特定属性的HTML元素样式不仅仅是class和id。</p><p>注意：IE7和IE8需声明!DOCTYPE才支持属性选择器！IE6和更低的版本不支持属性选择器。</p></blockquote><p>其基本语法格式如下：</p></blockquote><h4 id="属性选择器（单属性）"><a href="#属性选择器（单属性）" class="headerlink" title="属性选择器（单属性）"></a>属性选择器（单属性）</h4><pre><code>[title]&#123;    属性1: 属性值1；    ......&#125;</code></pre><h5 id="属性和值选择器（单值）"><a href="#属性和值选择器（单值）" class="headerlink" title="属性和值选择器（单值）"></a>属性和值选择器（单值）</h5><pre><code>[title=runoob]&#123;    属性1: 属性值1；    ......&#125;</code></pre><h5 id="属性和值的选择器（多值）"><a href="#属性和值的选择器（多值）" class="headerlink" title="属性和值的选择器（多值）"></a>属性和值的选择器（多值）</h5><pre><code>[title~=hello]&#123;    属性1: 属性值1；    ......&#125;</code></pre><h5 id="表单样式"><a href="#表单样式" class="headerlink" title="表单样式"></a>表单样式</h5><pre><code>input[type=text]&#123;    属性1: 属性值1；    ......&#125;</code></pre><h5 id="CSS-属性选择器-的区别"><a href="#CSS-属性选择器-的区别" class="headerlink" title="CSS 属性选择器 ~=, |=, ^=, $=, *= 的区别"></a>CSS 属性选择器 ~=, |=, ^=, $=, *= 的区别</h5><blockquote><p>先上总结:</p><p>“value 是完整单词” 类型的比较符号: ~=, |=</p><p>“拼接字符串“ 类型的比较符号: *=, ^=, $=</p></blockquote><ol><li>attribute 属性中包含 value:　</li></ol><blockquote><p>[attribute~=value] 属性中包含独立的单词为 value，例如：</p></blockquote><pre><code>[title~=flower]  --&gt;  &lt;img src=&quot;/i/eg_tulip.jpg&quot; title=&quot;tulip flower&quot; /&gt;</code></pre><blockquote><p>[attribute*=value] 属性中做字符串拆分，只要能拆出来 value 这个词就行，例如:</p></blockquote><pre><code>[title*=flower]   --&gt;  &lt;img src=&quot;/i/eg_tulip.jpg&quot; title=&quot;ffffflowerrrrrr&quot; /&gt;</code></pre><ol start="2"><li>attribute 属性以 value 开头:</li></ol><blockquote><p>[attribute|=value] 属性中必须是完整且唯一的单词，或者以 - 分隔开：，例如：</p></blockquote><pre><code>[lang|=en]     --&gt;  &lt;p lang=&quot;en&quot;&gt;  &lt;p lang=&quot;en-us&quot;&gt;</code></pre><blockquote><p>[attribute^=value] 属性的前几个字母是 value 就可以，例如：</p></blockquote><pre><code>[lang^=en]    --&gt;  &lt;p lang=&quot;ennn&quot;&gt;</code></pre><ol start="3"><li>attribute 属性以 value 结尾:<pre><code>[attribute$=value] 属性的后几个字母是 value 就可以，例如：a[src$=&quot;.pdf&quot;]</code></pre><h4 id="伪类-伪元素选择器"><a href="#伪类-伪元素选择器" class="headerlink" title="伪类/伪元素选择器"></a>伪类/伪元素选择器</h4><blockquote><p>CSS伪类是用来添加一些选择器的特殊效果。</p><p>具体链接：<a href="https://www.runoob.com/css/css-pseudo-classes.html">https://www.runoob.com/css/css-pseudo-classes.html</a></p></blockquote></li></ol><h5 id="anchor伪类"><a href="#anchor伪类" class="headerlink" title="anchor伪类"></a>anchor伪类</h5><pre><code>顺序不能出错a:link &#123;color:#FF0000;&#125; /* 未访问的链接 */a:visited &#123;color:#00FF00;&#125; /* 已访问的链接 */a:hover &#123;color:#FF00FF;&#125; /* 鼠标划过链接 */a:active &#123;color:#0000FF;&#125; /* 已选中的链接 */</code></pre><blockquote><p>注意： 在CSS定义中，a:hover 必须被置于 a:link 和 a:visited 之后，才是有效的。</p><p>注意： 在 CSS 定义中，a:active 必须被置于 a:hover 之后，才是有效的。</p><p>注意：伪类的名称不区分大小写。</p></blockquote><h5 id="CSS-first-child-last-child-伪类"><a href="#CSS-first-child-last-child-伪类" class="headerlink" title="CSS :first-child :last-child 伪类"></a>CSS :first-child :last-child 伪类</h5><blockquote><p>您可以使用 :first-child 伪类来选择父元素的第一个子元素。</p><p>注意：在IE8的之前版本必须声明 ，这样 :first-child 才能生效。</p><p>其基本语法结构如下：</p></blockquote><h5 id="CSS-hover-伪类"><a href="#CSS-hover-伪类" class="headerlink" title="CSS :hover 伪类"></a>CSS :hover 伪类</h5><blockquote><p>获取当前鼠标悬停的标签</p></blockquote><h5 id="CSS-focus-伪类"><a href="#CSS-focus-伪类" class="headerlink" title="CSS :focus 伪类"></a>CSS :focus 伪类</h5><blockquote><p>获取当前获得焦点的标签</p></blockquote><h4 id="CSS复合选择器"><a href="#CSS复合选择器" class="headerlink" title="CSS复合选择器"></a>CSS复合选择器</h4><blockquote><p>复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的,目的是为了可以选择更准确更精细的目标元素标签。</p></blockquote><h5 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h5><blockquote><p>交集选择器由两个选择器构成，其中第一个为标签选择器，第二个为class选择器，两个选择器之间不能有空格，如div.index。用的相对来说比较少，不太建议使用。</p></blockquote><h5 id="并集选择器（群组选择器）"><a href="#并集选择器（群组选择器）" class="headerlink" title="并集选择器（群组选择器）"></a>并集选择器（群组选择器）</h5><blockquote><p>并集选择器（CSS选择器分组）是各个选择器通过逗号连接而成的，任何形式的选择器（包括标签选择器、class类选择器id选择器等），都可以作为并集选择器的一部分。如果某些选择器定义的样式完全相同，或部分相同，就可以利用并集选择器为它们定义相同的CSS样式。</p></blockquote><pre><code>body, h2, p, table, .index, th, td, pre, strong, em &#123;color:gray;&#125;</code></pre><h3 id="CSS样式"><a href="#CSS样式" class="headerlink" title="CSS样式"></a>CSS样式</h3><h4 id="字体样式属性"><a href="#字体样式属性" class="headerlink" title="字体样式属性"></a>字体样式属性</h4><h5 id="font-size-字号大小"><a href="#font-size-字号大小" class="headerlink" title="font-size:字号大小"></a>font-size:字号大小</h5><blockquote><p>font-size属性用于设置字号，该属性的值可以使用相对长度单位，也可以使用绝对长度单位。其中相对长度单位比较常用，例如像素单位px，绝对单位使用较少</p><p>其基本语法格式如下：</p></blockquote><pre><code>font-size: 10px;</code></pre><table><thead><tr><th align="right">相对长度单位</th><th align="right">说明</th></tr></thead><tbody><tr><td align="right">em</td><td align="right">相对于当前对象内文本的字体尺寸</td></tr><tr><td align="right">px</td><td align="right">像素，最常用，推荐使用</td></tr><tr><td align="right">绝对长度单位</td><td align="right">说明</td></tr><tr><td align="right">in</td><td align="right">英寸</td></tr><tr><td align="right">cm</td><td align="right">厘米</td></tr><tr><td align="right">mm</td><td align="right">毫米</td></tr><tr><td align="right">pt</td><td align="right">点</td></tr></tbody></table><h5 id="font-family-字体"><a href="#font-family-字体" class="headerlink" title="font-family:字体"></a>font-family:字体</h5><blockquote><p>font-family属性用于设置字体。网页中常用的字体有宋体、微软雅黑、黑体等，例如将网页中所有段落文本的字体设置为微软雅黑，其基本语法格式如下：</p></blockquote><pre><code>font-family: &quot;微软雅黑&quot;;</code></pre><blockquote><p>可以同时指定多个字体，中间以逗号隔开，表示如果浏览器不支持第一个字体，则会尝试下一个，直到找到合适的字体。</p></blockquote><h5 id="常用技巧："><a href="#常用技巧：" class="headerlink" title="常用技巧："></a>常用技巧：</h5><blockquote><p>1、现在网页中普遍使用14px+。</p><p>2、尽量使用偶数的数字字号。ie6等老式浏览器支持奇数会有bug。</p><p>3、各种字体之间必须使用英文状态下的逗号隔开。</p><p>4、中文字体需要加英文状态下的引号，英文字体一般不需要加引号。当需要设置英文字体时，英文字体名必须位于中文字体名之前。</p><p>5、如果字体名中包含空格、#、$等符号，则该字体必须加英文状态下的单引号或双引号，</p><p>例如font-family: “Times New Roman”;。</p><p>6、尽量使用系统默认字体，保证在任何用户的浏览器中都能正确显示。</p></blockquote><h5 id="font-weight-字体粗细"><a href="#font-weight-字体粗细" class="headerlink" title="font-weight:字体粗细"></a>font-weight:字体粗细</h5><blockquote><p>字体加粗除了用 b 和 strong 标签之外，可以使用CSS 来实现，但是CSS 是没有语义的。</p></blockquote><pre><code>font-weight: bold;</code></pre><blockquote><p>属性用于定义字体的粗细，其可用属性值：normal、bold、bolder、lighter、100~900（100的整数倍）。</p><p>数字 400 等价于 normal，而 700 等价于 bold。 但是我们更喜欢用数字来表示。</p></blockquote><h5 id="font-style-字体风格"><a href="#font-style-字体风格" class="headerlink" title="font-style:字体风格"></a>font-style:字体风格</h5><blockquote><p>字体倾斜除了用 i 和 em 标签之外，可以使用CSS 来实现，但是CSS 是没有语义的。</p><p>font-style属性用于定义字体风格，如设置斜体、倾斜或正常字体，其可用属性值如下：</p><p>normal：默认值，浏览器会显示标准的字体样式。</p><p>italic：浏览器会显示斜体的字体样式。</p><p>oblique：浏览器会显示倾斜的字体样式。</p><p>font:综合设置字体样式 (重点)<br>font属性用于对字体样式进行综合设置，其基本语法格式如下：</p></blockquote><pre><code>选择器&#123;font: font-style  font-weight  font-size/line-height  font-family;&#125;</code></pre><blockquote><p>使用font属性时，必须按上面语法格式中的顺序书写，不能更换顺序，各个属性以空格隔开。</p><p>注意：其中不需要设置的属性可以省略（取默认值），但必须保留font-size和font-family属性，否则font属性将不起作用。</p></blockquote><h4 id="CSS外观属性"><a href="#CSS外观属性" class="headerlink" title="CSS外观属性"></a>CSS外观属性</h4><h5 id="color-文本颜色"><a href="#color-文本颜色" class="headerlink" title="color:文本颜色"></a>color:文本颜色</h5><blockquote><p>color属性用于定义文本的颜色，其取值方式有如下3种：</p><p>1.预定义的颜色值，如red，green，blue等。</p><p>2.十六进制，如#FF0000，#FF6600，#29D794等。实际工作中，十六进制是最常用的定义颜色的方式。</p><p>3.RGB代码，如红色可以表示为rgb(255,0,0)或rgb(100%,0%,0%)。</p><p>需要注意的是，如果使用RGB代码的百分比颜色值，取值为0时也不能省略百分号，必须写为0%。</p></blockquote><h5 id="line-height-行间距"><a href="#line-height-行间距" class="headerlink" title="line-height:行间距"></a>line-height:行间距</h5><blockquote><p>ine-height属性用于设置行间距，就是行与行之间的距离，即字符的垂直间距，一般称为行高。</p><p>line-height常用的属性值单位有三种，分别为像素px，相对值em和百分比%，实际工作中使用最多的是像素px。一般情况下，行距比字号大7/8像素左右就可以了。</p></blockquote><h5 id="text-align-水平对齐方式"><a href="#text-align-水平对齐方式" class="headerlink" title="text-align:水平对齐方式"></a>text-align:水平对齐方式</h5><blockquote><p>text-align属性用于设置文本内容的水平对齐，相当于html中的align对齐属性。其可用属性值如下：</p><p>left：左对齐（默认值）</p><p>right：右对齐</p><p>center：居中对齐</p></blockquote><h5 id="text-indent-首行缩进"><a href="#text-indent-首行缩进" class="headerlink" title="text-indent:首行缩进"></a>text-indent:首行缩进</h5><blockquote><p>text-indent属性用于设置首行文本的缩进，其属性值可为不同单位的数值、em字符宽度的倍数、或相对于浏览器窗口宽度的百分比%，允许使用负值, 建议使用em作为设置单位。</p><p>1em 就是一个字的宽度 如果是汉字的段落， 1em 就是一个汉字的宽度</p></blockquote><h4 id="text-decoration-文本的装饰"><a href="#text-decoration-文本的装饰" class="headerlink" title="text-decoration 文本的装饰"></a>text-decoration 文本的装饰</h4><blockquote><p>text-decoration 通常我们用于给链接修改装饰效果</p></blockquote><table><thead><tr><th align="right">值</th><th align="right">描述</th></tr></thead><tbody><tr><td align="right">none</td><td align="right">默认。定义标准的文本。</td></tr><tr><td align="right">underline</td><td align="right">定义文本下的一条线。下划线 也是我们链接自带的</td></tr><tr><td align="right">overline</td><td align="right">定义文本上的一条线。</td></tr><tr><td align="right">line-through</td><td align="right">定义穿过文本下的一条线。</td></tr></tbody></table><h3 id="标签显示模式（display）"><a href="#标签显示模式（display）" class="headerlink" title="标签显示模式（display）"></a>标签显示模式（display）</h3><blockquote><p>HTML标签一般分为块标签和行内标签两种类型，它们也称块元素和行内元素。具体如下：</p></blockquote><h4 id="块级元素-block-level"><a href="#块级元素-block-level" class="headerlink" title="块级元素(block-level)"></a>块级元素(block-level)</h4><blockquote><p>每个块元素通常都会独自占据一整行或多整行，可以对其设置宽度、高度、对齐等属性，常用于网页布局和网页结构的搭建。</p></blockquote><pre><code>常见的块元素有&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;等，其中&lt;div&gt;标签是最典型的块元素。</code></pre><blockquote><p>块级元素的特点：</p><p>（1）总是从新行开始</p><p>（2）高度，行高、外边距以及内边距都可以控制。</p><p>（3）宽度默认是容器的100%</p><p>（4）可以容纳内联元素和其他块元素。</p></blockquote><h4 id="行内元素-inline-level"><a href="#行内元素-inline-level" class="headerlink" title="行内元素(inline-level)"></a>行内元素(inline-level)</h4><blockquote><p>行内元素（内联元素）不占有独立的区域，仅仅靠自身的字体大小和图像尺寸来支撑结构，一般不可以设置宽度、高度、对齐等属性，常用于控制页面中文本的样式。</p></blockquote><pre><code>常见的行内元素有a、strong、b、em、i、del、s、ins、u、span等，其中span标签最典型的行内元素。</code></pre><blockquote><p>行内元素的特点：</p><p>1、和相邻行内元素在一行上。</p><p>2、高、宽无效，但水平方向的padding和margin可以设置，垂直方向的&gt;无效。</p><p>3、默认宽度就是它本身内容的宽度。</p><p>4、行内元素只能容纳文本或则其他行内元素。（a特殊）</p><p>注意：</p><p>1、只有 文字才 能组成段落 因此 p 里面不能放块级元素，同理还有这些标签h1,h2,h3,h4,h5,h6,dt，他们都是文字类块级标签，里面不能放其他块级元素。</p><p>2、链接里面不能再放链接。</p></blockquote><h4 id="块级元素和行内元素区别"><a href="#块级元素和行内元素区别" class="headerlink" title="块级元素和行内元素区别"></a>块级元素和行内元素区别</h4><blockquote><p>块级元素的特点：<br>（1）总是从新行开始</p><p>（2）高度，行高、外边距以及内边距都可以控制。</p><p>（3）宽度默认是容器的100%</p><p>（4）可以容纳内联元素和其他块元素。</p></blockquote><blockquote><p>行内元素的特点：<br>（1）和相邻行内元素在一行上。</p><p>（2）高、宽无效，但水平方向的padding和margin可以设置，垂直方向的无效。</p><p>（3）默认宽度就是它本身内容的宽度。</p><p>（4）行内元素只能容纳文本或则其他行内元素。</p></blockquote><h4 id="行内块元素（inline-block）"><a href="#行内块元素（inline-block）" class="headerlink" title="行内块元素（inline-block）"></a>行内块元素（inline-block）</h4><blockquote><p>在行内元素中有几个特殊的标签 —— &lt; img /&gt;、&lt; input /&gt;、&lt; td&gt;，可以对它们设置宽高和对齐属性，有些资料可能会称它们为行内块元素。</p><p>行内块元素的特点：<br>（1）和相邻行内元素（行内块）在一行上,但是之间会有空白缝隙。</p><p>（2）默认宽度就是它本身内容的宽度。</p><p>（3）高度，行高、外边距以及内边距都可以控制。</p></blockquote><h4 id="标签显示模式转换-display"><a href="#标签显示模式转换-display" class="headerlink" title="标签显示模式转换 display"></a>标签显示模式转换 display</h4><blockquote><p>块转行内：display:inline;</p><p>行内转块：display:block;</p><p>块、行内元素转换为行内块： display: inline-block;</p><p>此阶段，我们只需关心这三个，其他的是我们后面的工作。</p></blockquote><h4 id="CSS-三大特性"><a href="#CSS-三大特性" class="headerlink" title="CSS 三大特性"></a>CSS 三大特性</h4><blockquote><p>层叠 继承 优先级 是我们学习CSS 必须掌握的三个特性。</p></blockquote><h5 id="CSS层叠性"><a href="#CSS层叠性" class="headerlink" title="CSS层叠性"></a>CSS层叠性</h5><blockquote><p>所谓层叠性是指多种CSS样式的叠加。</p><p>是浏览器处理冲突的一个能力,如果一个属性通过两个相同选择器设置到同一个元素上，那么这个时候一个属性就会将另一个属性层叠掉</p><p>比如先给某个标签指定了内部文字颜色为红色，接着又指定了颜色为蓝色，此时出现一个标签指定了相同样式不同值的情况，这就是样式冲突。</p><p>一般情况下，如果出现样式冲突，则会按照CSS书写的顺序，以最后的样式为准。</p><p>1.样式冲突，遵循的原则是就近原则。 那个样式离着结构近，就执行那个样式。</p><p>2.样式不冲突，不会层叠</p></blockquote><h5 id="CSS继承性"><a href="#CSS继承性" class="headerlink" title="CSS继承性"></a>CSS继承性</h5><blockquote><p>所谓继承性是指书写CSS样式表时，子标签会继承父标签的某些样式，如文本颜色和字号。想要设置一个可继承的属性，只需将它应用于父元素即可。</p><p>简单的理解就是： 子承父业。</p><p>注意：</p><p>恰当地使用继承可以简化代码，降低CSS样式的复杂性。子元素可以继承父元素的样式（text-，font-，line-这些元素开头的都可以继承，以及color属性）</p></blockquote><h5 id="CSS优先级"><a href="#CSS优先级" class="headerlink" title="CSS优先级"></a>CSS优先级</h5><blockquote><p>定义CSS样式时，经常出现两个或更多规则应用在同一元素上，这时就会&gt;出现优先级的问题。</p><p>在考虑权重时，初学者还需要注意一些特殊的情况，具体如下：</p><p>继承样式的权重为0。即在嵌套结构中，不管父元素样式的权重多大，被子元素继承时，他的权重都为0，也就是说子元素定义的样式会覆盖继承来的样式。</p><p>行内样式优先。应用style属性的元素，其行内样式的权重非常高，可以理解为远大于100。总之，他拥有比上面提高的选择器都大的优先级。</p><p>权重相同时，CSS遵循就近原则。也就是说靠近元素的样式具有最大的优先级，或者说排在最后的样式优先级最大。</p><p>CSS定义了一个!important命令，该命令被赋予最大的优先级。也就是说不管权重如何以及样式位置的远近，!important都具有最大优先级。</p></blockquote><h5 id="CSS特殊性（Specificity）"><a href="#CSS特殊性（Specificity）" class="headerlink" title="CSS特殊性（Specificity）"></a>CSS特殊性（Specificity）</h5><blockquote><p>关于CSS权重，我们需要一套计算公式来去计算，这个就是 CSS &gt;Specificity，我们称为CSS 特性或称非凡性，它是一个衡量CSS值优先级的一个标准 具体规范入如下：</p><p>specificity用一个四位的数 字串(CSS2是三位)来表示，更像四个级别，值从左到右，左面的最大，一级大于一级，数位之间没有进制，级别之间不可超越。</p></blockquote><table><thead><tr><th align="right">继承或者* 的贡献值</th><th align="right">0,0,0,0</th></tr></thead><tbody><tr><td align="right">每个元素（标签）贡献值为</td><td align="right">0,0,0,1</td></tr><tr><td align="right">每个类，伪类贡献值为</td><td align="right">0,0,1,0</td></tr><tr><td align="right">每个ID贡献值为</td><td align="right">0,1,0,0</td></tr><tr><td align="right">每个行内样式贡献值</td><td align="right">1,0,0,0</td></tr><tr><td align="right">每个!important贡献值</td><td align="right">∞ 无穷大</td></tr></tbody></table><blockquote><p>1、数位之间没有进制 比如说： 0,0,0,5 + 0,0,0,5 =0,0,0,10 而&gt;不是 0,0, 1, 0， 所以不会存在10个div能赶上一个类选择器的情况。</p><p>2、继承的 权重是 0</p><p>总结优先级：</p><p>1、使用了 !important声明的规则。</p><p>2、内嵌在 HTML 元素的 style属性里面的声明。</p><p>3、使用了 ID 选择器的规则。</p><p>4、使用了类选择器、属性选择器、伪元素和伪类选择器的规则。</p><p>5、使用了元素选择器的规则。</p><p>6、只包含一个通用选择器的规则。</p><p>7、同一类选择器则遵循就近原则。</p></blockquote><pre><code>总结：权重是优先级的算法，层叠是优先级的表现</code></pre><h4 id="CSS-背景-background"><a href="#CSS-背景-background" class="headerlink" title="CSS 背景(background)"></a>CSS 背景(background)</h4><blockquote><p>CSS 可以添加背景颜色和背景图片，以及来进行图片设置。</p></blockquote><table><thead><tr><th align="right">background-color</th><th align="right">背景颜色</th></tr></thead><tbody><tr><td align="right">background-image</td><td align="right">背景图片地址</td></tr><tr><td align="right">background-repeat</td><td align="right">是否平铺</td></tr><tr><td align="right">background-position</td><td align="right">背景位置</td></tr><tr><td align="right">background-attachment</td><td align="right">背景固定还是滚动</td></tr><tr><td align="right">background-size    背景大小</td><td align="right"></td></tr></tbody></table><p>背景的合写(复合属性）<br>background:背景颜色 背景图片地址 背景平铺 背景滚动 背景位置    </p><h5 id="背景图片-background-image"><a href="#背景图片-background-image" class="headerlink" title="背景图片(background-image)"></a>背景图片(background-image)</h5><pre><code>基本语法格式如下：background-image : none | url (url) </code></pre><blockquote><p>参数：</p><p>none : 　无背景图（默认的）<br>url : 　使用绝对或相对地址指定背景图像</p><p>background-image 属性允许指定一个图片展示在背景中（只有CSS3才可以多背景）可以和 background-color 连用。 如果图片不重复地话，图片覆盖不到地地方都会被背景色填充。 如果有背景图片平铺，则会覆盖背景颜色。</p><p>小技巧： 我们提倡 背景图片后面的地址，url不要加引号。</p></blockquote><h5 id="背景平铺（background-repeat）"><a href="#背景平铺（background-repeat）" class="headerlink" title="背景平铺（background-repeat）"></a>背景平铺（background-repeat）</h5><pre><code>其基本语法格式如下：background-repeat : repeat | no-repeat | repeat-x | repeat-y </code></pre><blockquote><p>参数：</p><p>repeat : 　背景图像在纵向和横向上平铺（默认的）</p><p>no-repeat : 　背景图像不平铺</p><p>repeat-x : 　背景图像在横向上平铺</p><p>repeat-y : 　背景图像在纵向平铺</p><p>设置背景图片时，默认把图片在水平和垂直方向平铺以铺满整个元素。</p></blockquote><h5 id="背景位置-background-position"><a href="#背景位置-background-position" class="headerlink" title="背景位置(background-position)"></a>背景位置(background-position)</h5><pre><code>其基本语法格式如下：background-position : length || lengthbackground-position : position || position </code></pre><blockquote><p>参数：</p><p>length : 　百分数 | 由浮点数字和单位标识符组成的长度值。请参阅长度单位<br>position : 　top | center | bottom | left | center | right</p><p>说明：</p><p>设置或检索对象的背景图像位置。必须先指定background-image属性。默认值为：(0% 0%)。<br>如果只指定了一个值，该值将用于横坐标。纵坐标将默认为50%。第二个值将用于纵坐标。</p><p>注意：</p><p>1、position 后面是x坐标和y坐标。 可以使用方位名词或者 精确单位。</p><p>2、如果和精确单位和方位名字混合使用，则必须是x坐标在前，y坐标后面。比如 background-position: 15px top; 则 15px 一&gt;定是 x坐标 top是 y坐标。</p><p>实际工作用的最多的，就是背景图片居中对齐了。</p></blockquote><h5 id="背景附着"><a href="#背景附着" class="headerlink" title="背景附着"></a>背景附着</h5><pre><code>其基本语法格式如下：background-attachment : scroll | fixed </code></pre><blockquote><p>参数：</p><p>scroll : 　背景图像是随对象内容滚动<br>fixed : 　背景图像固定</p><p>说明：</p><p>设置或检索背景图像是随对象内容滚动还是固定的。</p></blockquote><h5 id="背景简写"><a href="#背景简写" class="headerlink" title="背景简写"></a>背景简写</h5><blockquote><p>background属性的值的书写顺序官方并没有强制标准的。</p><p>为了可读性，建议大家如下写：background:背景颜色 背景图片地址 背景平铺 背景滚动 背景位置</p></blockquote><pre><code>background: transparent url(image.jpg) repeat-y  scroll 50% 0;</code></pre><h5 id="背景透明-CSS3"><a href="#背景透明-CSS3" class="headerlink" title="背景透明(CSS3)"></a>背景透明(CSS3)</h5><blockquote><p>CSS3支持背景半透明的写法语法格式是:</p></blockquote><pre><code>background: rgba(0,0,0,0.3);</code></pre><blockquote><p>最后一个参数是alpha 透明度 取值范围 0~1之间</p><p>注意： 背景半透明是指盒子背景半透明， 盒子里面的内容不收影响。</p></blockquote><h4 id="盒子边框（border）"><a href="#盒子边框（border）" class="headerlink" title="盒子边框（border）"></a>盒子边框（border）</h4><pre><code>其基本语法格式如下：border : border-width || border-style || border-color</code></pre><blockquote><p>边框属性—设置边框样式（border-style）</p><p>边框样式用于定义页面中边框的风格，常用属性值如下：</p><p>none：没有边框即忽略所有边框的宽度（默认值）</p><p>solid：边框为单实线(最为常用的)</p><p>dashed：边框为虚线</p><p>dotted：边框为点线</p><p>double：边框为双实线</p></blockquote><h5 id="盒子边框写法总结表"><a href="#盒子边框写法总结表" class="headerlink" title="盒子边框写法总结表"></a>盒子边框写法总结表</h5><blockquote><p>border-width 边框宽度</p><p>border-style 边框样式</p><p>border-color 边框颜色</p><p>border: border-width(边框宽度) border-style(边框样式) border-color(边框颜色)</p></blockquote><h5 id="表格边框"><a href="#表格边框" class="headerlink" title="表格边框"></a>表格边框</h5><blockquote><p>border-collapse:collapse; 表示边框合并在一起。</p></blockquote><h4 id="内外边距"><a href="#内外边距" class="headerlink" title="内外边距"></a>内外边距</h4><h5 id="内边距（padding）"><a href="#内边距（padding）" class="headerlink" title="内边距（padding）"></a>内边距（padding）</h5><blockquote><p>padding 属于内边距</p></blockquote><pre><code>padding-top: 10px; /*上内边距*/padding-right: 20px;  /*右内边距*/padding-bottom: 20px; /*下内边距*/padding-left: 10px; /*左内边距*/</code></pre><blockquote><p>注意： 后面跟几个数值表示的意思是不一样的。</p><p>1个值 padding：上下左右边距 比如padding: 3px; 表示上下左右都是3像素</p><p>2个值 padding: 上下边距 左右边距 比如 padding: 3px 5px; 表示 上下3像素 左右 5像素</p><p>3个值 padding：上边距 左右边距 下边距 比如 padding: 3px 5px 10px; 表示 上是3像素 左右是5像素 下是10像素</p><p>4个值 padding:上内边距 右内边距 下内边距 左内边距 比如: padding: 3px 5px 10px 15px; 表示 上3px 右是5px 下 10px 左15px 顺时针</p><p>四个值按照顺序来说就是上右下左</p></blockquote><h5 id="外边距（padding）"><a href="#外边距（padding）" class="headerlink" title="外边距（padding）"></a>外边距（padding）</h5><blockquote><p>margin属性用于设置外边距。 设置外边距会在元素之间创建“空白”， 这段空白通常不能放置其&gt;他内容。</p><p>margin-top:上外边距</p><p>margin-right:右外边距</p><p>margin-bottom:下外边距</p><p>margin-left:上外边距</p><p>margin:上外边距 右外边距 下外边距 左外边</p><p>取值顺序跟内边距相同。</p></blockquote><h5 id="外边距实现盒子水平居中"><a href="#外边距实现盒子水平居中" class="headerlink" title="外边距实现盒子水平居中"></a>外边距实现盒子水平居中</h5><blockquote><p>可以让一个盒子实现水平居中，需要满足一下两个条件：</p><p>1、必须是块级元素。</p><p>2、盒子必须指定了宽度（width）</p><p>然后就给左右的外边距都设置为auto，就可使块级元素水平居中。</p></blockquote><h4 id="外边距合并"><a href="#外边距合并" class="headerlink" title="外边距合并"></a>外边距合并</h4><blockquote><p>使用margin定义块元素的垂直外边距时，可能会出现外边距的合并。</p></blockquote><h4 id="外边距塌陷"><a href="#外边距塌陷" class="headerlink" title="外边距塌陷"></a>外边距塌陷</h4><h5 id="相邻块元素垂直外边距的合并"><a href="#相邻块元素垂直外边距的合并" class="headerlink" title="相邻块元素垂直外边距的合并"></a>相邻块元素垂直外边距的合并</h5><blockquote><p>当上下相邻的两个块元素相遇时，如果上面的元素有下外边距margin-bottom，下面的元素有上外边距margin-top，则他们之间的垂直间距不是margin-bottom与margin-top之和，而是两者中的较大者。这种现象被称为相邻块元素垂直外边距的合并（也称外边距塌陷）。</p></blockquote><p><img src="/child/2020/08/11/css%E5%AD%A6%E4%B9%A0%E5%90%88%E9%9B%86/1.png" alt="外边距合并 (margin-merge)"><br>外边距合并 (margin-merge)<br>外边距合并 (margin-merge)</p><blockquote><p>解决方案：避免就好了。</p></blockquote><h5 id="嵌套块元素垂直外边距的合并"><a href="#嵌套块元素垂直外边距的合并" class="headerlink" title="嵌套块元素垂直外边距的合并"></a>嵌套块元素垂直外边距的合并</h5><p><img src="/child/2020/08/11/css%E5%AD%A6%E4%B9%A0%E5%90%88%E9%9B%86/2.png"></p><blockquote><p>解决方案：</p><p>解决办法 1：为父盒子设置1像素的上边框,颜色一样，但是会撑大父盒子，所以父盒子高度减1</p><p>解决方法 2：为子盒子设置1像素的上内边距，也会撑大子盒子，所以子盒子高度减1</p><p>解决办法3：使其中一个脱离文档流，即absolute和float</p><p>解决方法 4：父盒子设置overflow：hidden ，触发bfc ,不会撑大盒子</p></blockquote><h5 id="盒子模型布局稳定性"><a href="#盒子模型布局稳定性" class="headerlink" title="盒子模型布局稳定性"></a>盒子模型布局稳定性</h5><blockquote><p>开始学习盒子模型，往往最大的困惑就是，分不清内外边距的使用，什么情况下使用内边距，什么情况下使用外边距？</p><p>答案是： 其实他们大部分情况下是可以混用的。 就是说，你用内边距也可以，用外边距也可以。 你觉得哪个方便，就用哪个。</p><p>但是，总有一个最好用的吧，我们根据稳定性来分，建议如下：</p><p>按照 优先使用 宽度 （width） 其次 使用内边距（padding） 再次 外边距（margin）。</p><pre><code>width（宽度） &gt; padding（内边距） &gt; margin（外边距） </code></pre><p>原因：</p><p>1、margin 会有外边距合并 还有 ie6下面margin 加倍的bug（讨厌）所以最后使用。</p><p>2、padding 会影响盒子大小， 需要进行加减计算（麻烦） 其次使用。</p><p>3、width 没有问题（嗨皮）我们经常使用宽度剩余法 高度剩余法来做。</p></blockquote><h5 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h5><blockquote><p>其基本语法格式如下：</p><p>box-shadow:水平阴影 垂直阴影 模糊距离 阴影尺寸 阴影颜色  内/外阴影；<br>值|描述<br>–:|–:|<br>h-shadow|必需。水平阴影的位置。允许负值。<br>v-shadow|必需。垂直阴影的位置。允许负值。<br>blur|可选。模糊距离<br>spread|可选。阴影的尺寸。<br>color|可选。阴影的颜色<br>inset|可选。将外部阴影（outset）改为内部阴影</p></blockquote><h3 id="浮动-float"><a href="#浮动-float" class="headerlink" title="浮动(float)"></a>浮动(float)</h3><h4 id="普通流（normal-flow）"><a href="#普通流（normal-flow）" class="headerlink" title="普通流（normal flow）"></a>普通流（normal flow）</h4><blockquote><p>这个单词很多人都翻译成 文档流，字面翻译普通流和标准流都可以</p><p>前面我们说过，网页布局的核心，就是用CSS来摆放盒子位置。如何把盒子摆放到合适的位置？</p><p>CSS的定位机制有3种：普通流（标准流）、浮动和定位。</p><p>html语言当中另外一个相当重要的概念———-标准流！或者普通流。普通流实际上就是一个网页内标签元素正常从上到下，从左到右排列顺序的意思，比如块级元素会独占一行，行内元素会按顺序依次前后排列；按照这种大前提的布局排列之下绝对不会出现例外的情况叫做普通流布局。</p></blockquote><h5 id="浮动（float）"><a href="#浮动（float）" class="headerlink" title="浮动（float）"></a>浮动（float）</h5><blockquote><p>浮动最早是用来控制图片，以便达到其他元素（特别是文字）实现“环绕”图片的效果。</p><p>后来，我们发现浮动有个很有意思的事情：就是让任何盒子可以一行排列,因此我们就慢慢的偏离主题，用浮动的特性来布局了。（CSS3已经我们真正意义上的网页布局，具体CSS3我们会详细解释）</p></blockquote><h5 id="什么是浮动？"><a href="#什么是浮动？" class="headerlink" title="什么是浮动？"></a>什么是浮动？</h5><blockquote><p>元素的浮动是指设置了浮动属性的元素会脱离标准普通流的控制，移动到其父元素中指定位置的过程。</p><p>在CSS中，通过float属性来定义浮动，其基本语法格式如下:</p><pre><code>选择器&#123;float:属性值;&#125;</code></pre><table><thead><tr><th align="right">属性值</th><th align="right">描述</th></tr></thead><tbody><tr><td align="right">left</td><td align="right">元素向左浮动</td></tr><tr><td align="right">right</td><td align="right">元素向右浮动</td></tr><tr><td align="right">none</td><td align="right">元素不浮动（默认值）</td></tr></tbody></table></blockquote><h5 id="浮动详细内幕特性"><a href="#浮动详细内幕特性" class="headerlink" title="浮动详细内幕特性"></a>浮动详细内幕特性</h5><blockquote><p>浮动脱离标准流，不占位置，会影响标准流。浮动只有左右浮动。</p><p>浮动首先创建包含块的概念（包裹）。就是说， 浮动的元素总是找理它最近的父级元素对齐。但是不会超出内边距的范围。<br><img src="/child/2020/08/11/css%E5%AD%A6%E4%B9%A0%E5%90%88%E9%9B%86/3.jpg" alt="float-character"></p><p>浮动的元素排列位置，跟上一个元素（块级）有关系。如果上一个元素有浮动，则A元素顶部会和上一个元素的顶部对齐；如果上一个元素是标准流，则A元素的顶部会和上一个元素的底部对齐。</p></blockquote><h4 id="版心和布局流程"><a href="#版心和布局流程" class="headerlink" title="版心和布局流程"></a>版心和布局流程</h4><blockquote><p>阅读报纸时容易发现，虽然报纸中的内容很多，但是经过合理地排版，版面依然清晰、易读。同样，在制作网页时，要想使页面结构清晰、有条理，也需要对网页进行“排版”。</p><p>“版心”(可视区) 是指网页中主体内容所在的区域。一般在浏览器窗口中水平居中显示，常见的宽度值为960px、980px、1000px、1200px等。</p></blockquote><h5 id="布局流程"><a href="#布局流程" class="headerlink" title="布局流程"></a>布局流程</h5><blockquote><p>为了提高网页制作的效率，布局时通常需要遵守一定的布局流程，具体如下：</p><p>1、确定页面的版心（可视区）。</p><p>2、分析页面中的行模块，以及每个行模块中的列模块。</p><p>3、制作HTML结构 。</p><p>4、CSS初始化，然后开始运用盒子模型的原理，通过DIV+CSS布局来控制网页的各个模块。</p></blockquote><h5 id="一列固定宽度且居中"><a href="#一列固定宽度且居中" class="headerlink" title="一列固定宽度且居中"></a>一列固定宽度且居中</h5><p><img src="/child/2020/08/11/css%E5%AD%A6%E4%B9%A0%E5%90%88%E9%9B%86/4.jpg" alt="一列固定宽度且居中"></p><blockquote><p>最普通的，最为常用的结构</p></blockquote><h5 id="两列左窄右宽型"><a href="#两列左窄右宽型" class="headerlink" title="两列左窄右宽型"></a>两列左窄右宽型</h5><p><img src="/child/2020/08/11/css%E5%AD%A6%E4%B9%A0%E5%90%88%E9%9B%86/5.jpg" alt="两列左窄右宽型"></p><blockquote><p>比如小米 <a href="https://www.mi.com/">小米官网</a></p></blockquote><h5 id="通栏平均分布型"><a href="#通栏平均分布型" class="headerlink" title="通栏平均分布型"></a>通栏平均分布型</h5><p><img src="/child/2020/08/11/css%E5%AD%A6%E4%B9%A0%E5%90%88%E9%9B%86/6.jpg" alt="通栏平均分布型"></p><blockquote><p>比如锤子 <a href="https://www.smartisan.com/">锤子官网</a></p></blockquote><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><h4 id="为什么要清除浮动"><a href="#为什么要清除浮动" class="headerlink" title="为什么要清除浮动?"></a>为什么要清除浮动?</h4><blockquote><p>我们前面说过，浮动本质是用来做一些文字混排效果的，但是被我们拿来做布局用，则会有很多的问题出现， 但是，你不能说浮动不好</p><p>由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响，为了解决这些问题，此时就需要在该元素中清除浮动。</p><p>准确地说，并不是清除浮动，而是清除浮动后造成的影响</p><p>如果浮动一开始就是一个美丽的错误，那么请用正确的方法挽救它。</p></blockquote><h4 id="清除浮动本质"><a href="#清除浮动本质" class="headerlink" title="清除浮动本质"></a>清除浮动本质</h4><p>清除浮动主要为了解决父级元素因为子级浮动引起内部高度为0 的问题。<br><img src="/child/2020/08/11/css%E5%AD%A6%E4%B9%A0%E5%90%88%E9%9B%86/7.jpg" alt="正常标准流盒子"></p><p><img src="/child/2020/08/11/css%E5%AD%A6%E4%B9%A0%E5%90%88%E9%9B%86/8.jpg" alt="子盒子浮动"></p><h4 id="清除浮动的方法"><a href="#清除浮动的方法" class="headerlink" title="清除浮动的方法"></a>清除浮动的方法</h4><blockquote><p>其实本质叫做闭合浮动更好一些, 记住，清除浮动就是把浮动的盒子圈到里面，让父盒子闭合出口和入口不让他们出来影响其他元素。</p><p>在CSS中，clear属性用于清除浮动，其基本语法格式如下：</p><p>选择器{clear:属性值;}<br>属性值|描述<br>–:|–:|<br>left|不允许左侧有浮动元素（清除左侧浮动的影响）<br>right|不允许右侧有浮动元素（清除右侧浮动的影响）<br>both|同时清除左右两侧浮动的影响</p></blockquote><h5 id="额外标签法"><a href="#额外标签法" class="headerlink" title="额外标签法"></a>额外标签法</h5><pre><code>是W3C推荐的做法是通过在浮动元素末尾添加一个空的标签例如 &lt;div style=”clear:both;”&gt;&lt;/div&gt;，或则其他标签br等亦可。</code></pre><blockquote><p>优点： 通俗易懂，书写方便</p><p>缺点： 添加许多无意义的标签，结构化较差。</p></blockquote><h5 id="父级添加overflow属性方法"><a href="#父级添加overflow属性方法" class="headerlink" title="父级添加overflow属性方法"></a>父级添加overflow属性方法</h5><blockquote><p>可以通过触发BFC的方式，可以实现清除浮动效果。（BFC后面讲解）</p><pre><code>可以给父级添加： overflow为 hidden|auto|scroll  都可以实现。</code></pre><p>优点： 代码简洁</p><p>缺点： 内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素。</p></blockquote><h5 id="使用after伪元素清除浮动"><a href="#使用after伪元素清除浮动" class="headerlink" title="使用after伪元素清除浮动"></a>使用after伪元素清除浮动</h5><blockquote><p>:after 方式为空元素的升级版，好处是不用单独加标签了</p><p>使用方法：</p><pre><code>.clearfix:after &#123;content: &quot;.&quot;;display: block;height: 0;clear: both;visibility: hidden;&#125;   .clearfix &#123;*zoom: 1;&#125;   /* IE6、7 专有 */</code></pre><p>优点： 符合闭合浮动思想 结构语义化正确</p><p>缺点： 由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。</p><p>代表网站： 百度、淘宝网、网易等</p><p>注意： content:”.” 里面尽量跟一个小点，或者其他，尽量不要为空，否则再firefox 7.0前的版本会有生成空格。</p></blockquote><h5 id="使用before和after双伪元素清除浮动"><a href="#使用before和after双伪元素清除浮动" class="headerlink" title="使用before和after双伪元素清除浮动"></a>使用before和after双伪元素清除浮动</h5><blockquote><p>使用方法：</p><pre><code>.clearfix:before,.clearfix:after &#123; content:&quot;&quot;;display:table;  /* 这句话可以触发BFC BFC可以清除浮动,BFC&gt;我们后面讲 */&#125;.clearfix:after &#123;clear:both;&#125;.clearfix &#123;*zoom:1;&#125;</code></pre><p>优点： 代码更简洁</p><p>缺点： 由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。</p><p>代表网站： 小米、腾讯等</p></blockquote><h3 id="定位-position"><a href="#定位-position" class="headerlink" title="定位(position)"></a>定位(position)</h3><blockquote><p>如果，说浮动， 关键在一个 “浮” 字上面， 那么 我们的定位，关键在于一个 “位” &gt;上。</p><p>PS: 定位是我们CSS算是数一数二难点的了，但是，你务必要学好它，我们CSS离不开定位，特别是后面的js特效，天天和定位打交道。不要抵触它，反而要爱上它，它可以让我们工作更加轻松哦！</p></blockquote><h3 id="元素的定位属性"><a href="#元素的定位属性" class="headerlink" title="元素的定位属性"></a>元素的定位属性</h3><blockquote><p>元素的定位属性主要包括定位模式和边偏移两部分。</p></blockquote><h4 id="边偏移"><a href="#边偏移" class="headerlink" title="边偏移"></a>边偏移</h4><table><thead><tr><th align="right">边偏移属性</th><th align="right">描述</th></tr></thead><tbody><tr><td align="right">top</td><td align="right">顶端偏移量，定义元素相对于其父元素上边线的距离</td></tr><tr><td align="right">bottom</td><td align="right">底部偏移量，定义元素相对于其父元素下边线的距离</td></tr><tr><td align="right">left</td><td align="right">左侧偏移量，定义元素相对于其父元素左边线的距离</td></tr><tr><td align="right">right</td><td align="right">右侧偏移量，定义元素相对于其父元素右边线的距离</td></tr></tbody></table><h4 id="定位模式-定位的分类"><a href="#定位模式-定位的分类" class="headerlink" title="定位模式(定位的分类)"></a>定位模式(定位的分类)</h4><p>在CSS中，position属性用于定义元素的定位模式，其基本语法格式如下：</p><pre><code>选择器&#123;position:属性值;&#125;</code></pre><p><strong>position属性的常用值</strong></p><table><thead><tr><th align="right">值</th><th align="right">描述</th></tr></thead><tbody><tr><td align="right">static</td><td align="right">自动定位（默认定位方式）</td></tr><tr><td align="right">relative</td><td align="right">相对定位，相对于其原文档流的位置进行定位</td></tr><tr><td align="right">absolute</td><td align="right">绝对定位，相对于其上一个已经定位的父元素进行定位</td></tr><tr><td align="right">fixed</td><td align="right">固定定位，相对于浏览器窗口进行定位</td></tr></tbody></table><h4 id="静态定位-static"><a href="#静态定位-static" class="headerlink" title="静态定位(static)"></a>静态定位(static)</h4><blockquote><p>静态定位是所有元素的默认定位方式，当position属性的取值为static时，可以将元素定位于静态位置。 所谓静态位置就是各个元素在HTML文档流中默认的位置。</p><p>上面的话翻译成白话： 就是网页中所有元素都默认的是静态定位哦！ 其实就是标准流的特性。</p><p>在静态定位状态下，无法通过边偏移属性（top、bottom、left或right）来改变元素的位置。</p><p>PS： 静态定位其实没啥可说的。</p></blockquote><h4 id="相对定位relative-自恋型"><a href="#相对定位relative-自恋型" class="headerlink" title="相对定位relative(自恋型)"></a>相对定位relative(自恋型)</h4><blockquote><p>相对定位是将元素相对于它在标准流中的位置进行定位，当position属性的取值为relative时，可以将元素定位于相对位置。</p><p>对元素设置相对定位后，可以通过边偏移属性改变元素的位置，但是它在文档流中的位置仍然保留。</p><p>注意：</p><p>1、相对定位最重要的一点是，它可以通过边偏移移动位置，但是原来的所占的位置，继续占有。</p><p>2、其次，每次移动的位置，是以自己的左上角为基点移动（相对于自己来移动位置）</p><p>就是说，相对定位的盒子仍在标准流中，它后面的盒子仍以标准流方式对待它。（相对定位不脱标）</p><p>如果说浮动的主要目的是 让多个块级元素一行显示，那么定位的主要价值就是 移动位置， 让盒子到我们想要的位置上去。</p></blockquote><h4 id="绝对定位absolute-拼爹型"><a href="#绝对定位absolute-拼爹型" class="headerlink" title="绝对定位absolute (拼爹型)"></a>绝对定位absolute (拼爹型)</h4><blockquote><p><strong>注意</strong>如果文档可滚动，绝对定位元素会随着它滚动，因为元素最终会相对于正常流的某一部分定位。</p><p>当position属性的取值为absolute时，可以将元素的定位模式设置为绝对定位。</p><p>注意： 绝对定位最重要的一点是，它可以通过边偏移移动位置，但是它完全脱标，完全不占位置。</p></blockquote><h4 id="父级没有定位"><a href="#父级没有定位" class="headerlink" title="父级没有定位"></a>父级没有定位</h4><blockquote><p>若所有父元素都没有定位，以浏览器为准对齐(document文档)。</p></blockquote><h4 id="父级元素有定位"><a href="#父级元素有定位" class="headerlink" title="父级元素有定位"></a>父级元素有定位</h4><blockquote><p>绝对定位是将元素依据最近的已经定位（绝对、固定或相对定位）的父元素（祖先）进行定位。</p></blockquote><h4 id="子绝父相"><a href="#子绝父相" class="headerlink" title="子绝父相"></a>子绝父相</h4><blockquote><p>这个“子绝父相”太重要了，是我们学习定位的口诀，时时刻刻记住的。</p><p>这句话的意思是 子级是绝对定位的话， 父级要用相对定位。</p><p>首先， 我们说下， 绝对定位是将元素依据最近的已经定位绝对、固定或相对定位）的父元素（祖先）进行定位。</p><p>就是说， 子级是绝对定位，父亲只要是定位即可（不管父亲是绝对定位还是相对定位，甚至是固定定位都可以），就是说， 子绝父绝，子绝父相都是正确的。</p><p>所以，我们可以得出如下结论：</p><p>因为子级是绝对定位，不会占有位置， 可以放到父盒子里面的任何一个地方。</p><p>父盒子布局时，需要占有位置，因此父亲只能是 相对定位.</p><p>这就是子绝父相的由来。</p></blockquote><h4 id="绝对定位的盒子水平-垂直居中"><a href="#绝对定位的盒子水平-垂直居中" class="headerlink" title="绝对定位的盒子水平/垂直居中"></a>绝对定位的盒子水平/垂直居中</h4><blockquote><p>普通的盒子是左右margin 改为 auto就可， 但是对于绝对定位就无效了</p><p>定位的盒子也可以水平或者垂直居中，有一个算法。</p><p>1、首先left 50% 父盒子的一半大小</p><p>2、然后走自己外边距负的一半值就可以了 margin-left。</p></blockquote><h4 id="固定定位fixed-认死理型"><a href="#固定定位fixed-认死理型" class="headerlink" title="固定定位fixed(认死理型)"></a>固定定位fixed(认死理型)</h4><blockquote><p>固定定位是绝对定位的一种特殊形式，类似于 正方形是一个特殊的 矩形。它以浏览器窗口作为参照物来定义网页元素。当position属性的取值为fixed时，即可将元素的定位模式设置为固定定位。</p><p>当对元素设置固定定位后，它将脱离标准文档流的控制，始终依据浏览器窗口来定义自己的显示位置。不管浏览器滚动条如何滚动也不管浏览器窗口的大小如何变化，该元素都会始终显示在浏览器窗口的固定位置。</p><p>固定定位有两点：<br>1、固定定位的元素跟父亲没有任何关系，只认浏览器。</p><p>2、固定定位完全脱标，不占有位置，不随着滚动条滚动。</p></blockquote><h4 id="叠放次序（z-index）"><a href="#叠放次序（z-index）" class="headerlink" title="叠放次序（z-index）"></a>叠放次序（z-index）</h4><blockquote><p>当对多个元素同时设置定位时，定位元素之间有可能会发生重叠。</p><p>在CSS中，要想调整重叠定位元素的堆叠顺序，可以对定位元素应用z-index层叠等级属&gt;性，其取值可为正整数、负整数和0。</p><p>比如： z-index: 2;</p><p>注意：</p><p>1、z-index的默认属性值是0，取值越大，定位元素在层叠元素中越居上。</p><p>2、如果取值相同，则根据书写顺序，后来居上。</p><p>3、后面数字一定不能加单位。</p><p>4、只有相对定位，绝对定位，固定定位有此属性，其余标准流，浮动，静态定位都无此属性，亦不可指定此属性。</p></blockquote><h4 id="四种定位总结"><a href="#四种定位总结" class="headerlink" title="四种定位总结"></a>四种定位总结</h4><table><thead><tr><th align="right">定位模式</th><th align="right">是否脱标占有位置</th><th align="right">是否可以使用边偏移</th><th align="right">移动位置基准</th></tr></thead><tbody><tr><td align="right">静态static</td><td align="right">不脱标，正常模式</td><td align="right">不可以</td><td align="right">正常模式</td></tr><tr><td align="right">相对定位relative</td><td align="right">不脱标，占有位置</td><td align="right">可以</td><td align="right">相对自身位置移动（自恋型）</td></tr><tr><td align="right">绝对定位absolute</td><td align="right">完全脱标，不占有位置</td><td align="right">可以</td><td align="right">相对于定位父级移动位置（拼爹型）</td></tr><tr><td align="right">固定定位fixed</td><td align="right">完全脱标，不占有位置</td><td align="right">可以</td><td align="right">相对于浏览器移动位置（认死理型）</td></tr></tbody></table><h5 id="定位模式转换"><a href="#定位模式转换" class="headerlink" title="定位模式转换"></a>定位模式转换</h5><blockquote><p>跟浮动一样， 元素添加了 绝对定位和固定定位之后， 元素模式也会发生转换， 都转换为 行内块模式，</p><p>因此 比如 行内元素 如果添加了 绝对定位或者 固定定位后 浮动后，可以不用转换模式，直接给高度和宽度就可以了。</p></blockquote><h5 id="元素的显示与隐藏"><a href="#元素的显示与隐藏" class="headerlink" title="元素的显示与隐藏"></a>元素的显示与隐藏</h5><blockquote><p>在CSS中有三个显示和隐藏的单词比较常见，我们要区分开，他们分别是 display visibility 和 overflow。</p><p>他们的主要目的是让一个元素在页面中消失，但是不在文档源码中删除。 最常见的是网站广告，当我们点击类似关闭不见了，但是我们重新刷新页面，它们又会出现和你玩躲猫猫！！</p></blockquote><h4 id="display-显示"><a href="#display-显示" class="headerlink" title="display 显示"></a>display 显示</h4><blockquote><p>display 设置或检索对象是否及如何显示。</p><p>display : none 隐藏对象 与它相反的是 display:block 除了转换为块级元素之外，同时还有显示元素的意思。</p><p>特点： 隐藏之后，不再保留位置。</p></blockquote><h4 id="visibility-可见性"><a href="#visibility-可见性" class="headerlink" title="visibility 可见性"></a>visibility 可见性</h4><blockquote><p>设置或检索是否显示对象。</p><p>visible : 　对象可视</p><p>hidden : 　对象隐藏</p><p>特点： 隐藏之后，继续保留原有位置。（停职留薪）</p></blockquote><h4 id="overflow-溢出"><a href="#overflow-溢出" class="headerlink" title="overflow 溢出"></a>overflow 溢出</h4><blockquote><p>检索或设置当对象的内容超过其指定高度及宽度时如何管理内容。</p><p>visible : 　不剪切内容也不添加滚动条。</p><p>auto : 　 超出自动显示滚动条，不超出不显示滚动条</p><p>hidden : 　不显示超过对象尺寸的内容，超出的部分隐藏掉</p><p>scroll : 　不管超出内容否，总是显示滚动条</p></blockquote><h3 id="开发者工具（chrome）"><a href="#开发者工具（chrome）" class="headerlink" title="开发者工具（chrome）"></a>开发者工具（chrome）</h3><blockquote><p>此工具是我们的必备工具，以后代码出了问题，我们首先第一反应就是：</p><p>“按F12”或者是 “shift+ctrl+i” 打开 开发者工具。</p><p>菜单： 右击网页空白出—查看（检查元素）</p></blockquote><blockquote><p>小技巧</p><p>1、ctrl+滚轮 可以 放大开发者工具代码大小。</p><p>2、左边是HTML元素结构 右边是CSS样式。</p><p>3、右边CSS样式可以改动数值和颜色查看更改后效果。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS面向对象</title>
      <link href="2020/08/05/JS%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>2020/08/05/JS%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="JS面向对象"><a href="#JS面向对象" class="headerlink" title="JS面向对象"></a>JS面向对象</h2><p>ECMAscript有两种开发模式：函数式（过程化），面向对象（oop）模式。正统的面向对象语言有一个标志性概念，就是类的概念，而通过类可以创建任意多个具有相同属性和方法的对象,但是ECMAscript中没有类的类的概念。</p><p>表示ECMA-262 把对象定义为：“无序属性的集合，其属性可以包含基本值、对象或者函数。”严格来讲，这就相当于说对象是一组没有特定顺序的值。对象的每个属性或方法都有一个名字，而每个名字都映射到一个值。正因为这样，我们可以把ECMAScript 的对象想象成散列表：无非就是一组名值对，其中值可以是数据或函数。</p><p>所以ECMASCRIPT的对象和基于类的语言的对象是不同的（es6之前），但是在es6之后，出了一个class,也就是有了，但是还不大一样</p><p>比如说把大象关进冰箱</p><pre><code>按面向过程的逻辑有以下三步1.打开冰箱2.放进大象3.关闭冰箱</code></pre><p>按面向对象的逻辑</p><pre><code>有以下三步1.冰箱.开门2.冰箱.放进大象3.冰箱.关门</code></pre><h3 id="一、理解对象"><a href="#一、理解对象" class="headerlink" title="一、理解对象"></a>一、理解对象</h3><p>创建一个对象，然后给这个对象新建属性和方法</p><h4 id="1-1-用new操作符创建的一个对象"><a href="#1-1-用new操作符创建的一个对象" class="headerlink" title="1.1 用new操作符创建的一个对象"></a>1.1 用new操作符创建的一个对象</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span>  <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//创建了一个对象</span>    obj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"张申德"</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//创建了一个属性name 并且赋值</span>    obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token string">"18"</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//创建了一个属性age 并且赋值</span>    obj<span class="token punctuation">.</span>children <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        list<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'温鑫'</span><span class="token punctuation">,</span><span class="token string">'钱宇亮'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        sayHi<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age  <span class="token comment" spellcheck="true">//undefined-undefined</span>        <span class="token comment" spellcheck="true">// 这里的this现在指向的是children,不能访问obj下面的属性</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//在obj这个对象下面又创建了一个新的对象</span>    obj<span class="token punctuation">.</span>run <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span><span class="token string">' - '</span><span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span><span class="token string">' - '</span><span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span>list    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//undefined-undefined</span></code></pre><h4 id="1-2-用字面量的方式创建"><a href="#1-2-用字面量的方式创建" class="headerlink" title="1.2 用字面量的方式创建"></a>1.2 用字面量的方式创建</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span><span class="token string">"张申德"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token string">"18"</span><span class="token punctuation">,</span>    children<span class="token punctuation">:</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        list<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'温鑫'</span><span class="token punctuation">,</span><span class="token string">'钱宇亮'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        sayHi<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    run<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span><span class="token string">' - '</span><span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">+</span><span class="token string">' - '</span><span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>children<span class="token punctuation">.</span>list    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//undefined-undefined</span></code></pre><p>上述两个示例均达的意思是一致的，只是创建方式不同而已经，效果完全一样。<br>创建了一个对象，并且创建了属性和方法及对象，在run()方法中有一个this，这个this代表就的是obj对象本身。</p><h3 id="二、属性类型"><a href="#二、属性类型" class="headerlink" title="二、属性类型"></a>二、属性类型</h3><p>ECMA-262 第5 版在定义只有内部才用的特性（attribute）时，描述了属性（property）的各种特征。<br>ECMA-262 定义这些特性是为了实现JavaScript 引擎用的，因此在JavaScript 中不能直接访问它们。为了<br>表示特性是内部值，该规范把它们放在了两对儿方括号中，例如[[Enumerable]]。尽管ECMA-262第3 版的定义有些不同，但本书只参考第5 版的描述。<br>ECMAScript 中有两种属性：数据属性和访问器属性。</p><h4 id="2-1-数据属性"><a href="#2-1-数据属性" class="headerlink" title="2.1 数据属性"></a>2.1 数据属性</h4><p>数据属性包含一个数据值的位置。在这个位置可以读取和写入值。数据属性有4 个描述其行为的特性。</p><pre><code>[[Configurable]]：表示能否通过delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。像前面例子中那样直接在对象上定义的属性，它们的这个特性默认值为true。[[Enumerable]]：表示能否通过for-in 循环返回属性。像前面例子中那样直接在对象上定义的属性，它们的这个特性默认值为true。[[Writable]]：表示能否修改属性的值。像前面例子中那样直接在对象上定义的属性，它们的这个特性默认值为true。[[Value]]：包含这个属性的数据值。读取属性值的时候，从这个位置读；写入属性值的时候，把新值保存在这个位置。这个特性的默认值为undefined。对于像前面例子中那样直接在对象上定义的属性，它们的[[Configurable]]、[[Enumerable]]和[[Writable]]特性都被设置为true，而[[Value]]特性被设置为指定的值</code></pre><p>示例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> name<span class="token punctuation">:</span> <span class="token string">"颜苗"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span></code></pre><p>这里创建了一个名为name 的属性，为它指定的值是”颜苗。也就是说，[[Value]]特性将被设置为”颜苗”，而对这个值的任何修改都将反映在这个位置。而对这个值的任何修改都将反映在这个位置。</p><h5 id="2-1-1-writable"><a href="#2-1-1-writable" class="headerlink" title="2.1.1 writable"></a>2.1.1 writable</h5><p>表示能否修改属性的值。像前面例子中那样直接在对象上定义的属性，它们的这个特性默认值为true。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    writable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// writable：表示能否修改属性的值。像前面例子中那样直接在对象上定义的属性，它们的这个特性默认值为true。</span>    value<span class="token punctuation">:</span> <span class="token string">"颜苗"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"颜苗"</span>    person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"候华雨"</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"颜苗"</span></code></pre><p>以上这个例子创建了一个名为name 的属性，它的值”颜苗”是只读的。这个属性的值是不可修改<br>的，如果尝试为它指定新值，则在非严格模式下，赋值操作将被忽略；在严格模式下，赋值操作将会导<br>致抛出错误</p><p>类似的规则也适用于不可配置的属性。例如：</p><h5 id="2-1-2-configurable"><a href="#2-1-2-configurable" class="headerlink" title="2.1.2 configurable"></a>2.1.2 configurable</h5><p>表示能否通过delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。像前面例子中那样直接在对象上定义的属性，它们的这个特性默认值为true。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    writable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// writable：表示能否修改属性的值。像前面例子中那样直接在对象上定义的属性，它们的这个特性默认值为true。</span>    configurable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// [[Configurable]]：表示能否通过delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。像前面例子中那样直接在对象上定义的属性，它们的这个特性默认值为true。</span>    value<span class="token punctuation">:</span> <span class="token string">"颜苗"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"颜苗"</span>person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"李虎"</span><span class="token punctuation">;</span><span class="token keyword">delete</span> person<span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"颜苗"</span></code></pre><p>把configurable 设置为false，表示不能从对象中删除属性。如果对这个属性调用delete，则在非严格模式下什么也不会发生，而在严格模式下会导致错误。而且，一旦把属性定义为不可配置的，就不能再把它变回可配置了。此时，再调用Object.defineProperty()方法修改除writable 之外的特性，都会导致错误：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    configurable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    value<span class="token punctuation">:</span> <span class="token string">"Nicholas"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//抛出错误</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    configurable<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    value<span class="token punctuation">:</span> <span class="token string">"Nicholas"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>也就是说，可以多次调用Object.defineProperty()方法修改同一个属性，但在把configurable特性设置为false 之后就会有限制了。</p><p>也就是说，可以多次调用Object.defineProperty()方法修改同一个属性，但在把configurable<br>特性设置为false 之后就会有限制了。<br>在调用Object.defineProperty()方法时，如果不指定，configurable、enumerable 和writable 特性的默认值都是false。多数情况下，初级程序员可能都没有必要利用Object.defineProperty()方法提供的这些高级功能。不过，理解这些概念对理解JavaScript 对象却非常有用。</p><h5 id="2-1-3-enumerable"><a href="#2-1-3-enumerable" class="headerlink" title="2.1.3 enumerable"></a>2.1.3 enumerable</h5><p>表示能否通过for-in 循环返回属性。像前面例子中那样直接在对象上定义的属性，它们的这个特性默认值为true。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    enumerable<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 表示能否通过for-in 循环返回属性。像前面例子中那样直接在对象上定义的属性，它们的这个特性默认值为true。</span>    value<span class="token punctuation">:</span> <span class="token string">"颜苗"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">"run"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    enumerable<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>    value<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> person<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> element <span class="token operator">=</span> person<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h4 id="2-2-访问器属性"><a href="#2-2-访问器属性" class="headerlink" title="2.2 访问器属性"></a>2.2 访问器属性</h4><p>访问器属性不包含数据值；它们包含一对儿getter 和setter 函数（不过，这两个函数都不是必需的）。在读取访问器属性时，会调用getter 函数，这个函数负责返回有效的值；在写入访问器属性时，会调用setter 函数并传入新值，这个函数负责决定如何处理数据。访问器属性有如下4 个特性。</p><pre><code>1.[[Configurable]]：表示能否通过delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为数据属性。对于直接在对象上定义的属性，这个特性的默认值为true。2.[[Enumerable]]：表示能否通过for-in 循环返回属性。对于直接在对象上定义的属性，这个特性的默认值为true。3.[[Get]]：在读取属性时调用的函数。默认值为undefined。4.[[Set]]：在写入属性时调用的函数。默认值为undefined。</code></pre><h5 id="2-2-1-getter-和setter-函数"><a href="#2-2-1-getter-和setter-函数" class="headerlink" title="2.2.1 getter 和setter 函数"></a>2.2.1 getter 和setter 函数</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    _year<span class="token punctuation">:</span><span class="token number">2020</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token string">"year"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_year    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_year <span class="token operator">+</span><span class="token operator">=</span> newValue<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>book<span class="token punctuation">.</span>year  <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span></code></pre><h4 id="2-3-定义多个属性"><a href="#2-3-定义多个属性" class="headerlink" title="2.3 定义多个属性"></a>2.3 定义多个属性</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    _year<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        value<span class="token punctuation">:</span> <span class="token number">2020</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    edition<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        value<span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>    year<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_year<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">></span> <span class="token number">2004</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>_year <span class="token operator">=</span> newValue<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>edition <span class="token operator">+</span><span class="token operator">=</span> newValue <span class="token operator">-</span> <span class="token number">2004</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-4-读取属性的特性"><a href="#2-4-读取属性的特性" class="headerlink" title="2.4 读取属性的特性"></a>2.4 读取属性的特性</h4><p>使用ECMAScript 5 的Object.getOwnPropertyDescriptor()方法，可以取得给定属性的描述符。这个方法接收两个参数：属性所在的对象和要读取其描述符的属性名称。返回值是一个对象，如果是访问器属性，这个对象的属性有configurable、enumerable、get 和set；如果是数据属性，这个对象的属性有configurable、enumerable、writable 和value。例如：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> book <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        _year<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            configurable<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>            value<span class="token punctuation">:</span> <span class="token number">2020</span>       <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        edition<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            value<span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>        year<span class="token punctuation">:</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            enumerable<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token number">2021</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">,</span>            <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>newValue <span class="token operator">></span> <span class="token number">2004</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>_year <span class="token operator">=</span> newValue<span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>edition <span class="token operator">+</span><span class="token operator">=</span> newValue <span class="token operator">-</span> <span class="token number">2004</span><span class="token punctuation">;</span>                <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 可以取得给定属性的描述</span>    <span class="token keyword">var</span> descriptor <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token string">"_year"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2020</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">.</span>configurable<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span><span class="token comment" spellcheck="true">/* configurable 表示能否通过delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为数据属性。对于直接在对象上定义的属性，这个特性的默认值为true */</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> descriptor<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"undefined"</span>    <span class="token keyword">var</span> descriptor <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>book<span class="token punctuation">,</span> <span class="token string">"year"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//undefined</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//undefined</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>descriptor<span class="token punctuation">.</span>enumerable<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false</span><span class="token comment" spellcheck="true">/*     [[Enumerable]]：表示能否通过for-in 循环返回属性。对于直接在对象上定义的属性，如果没有调用defineProperties这方法这个特性的默认值为true。 */</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> descriptor<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"function"</span></code></pre><p>不一定非要同时指定getter 和setter。只指定getter 意味着属性是不能写，尝试写入属性会被忽略</p><h3 id="三、创建对象"><a href="#三、创建对象" class="headerlink" title="三、创建对象"></a>三、创建对象</h3><p>虽然Object 构造函数或对象字面量都可以用来创建单个对象，但这些方式有个明显的缺点：使用同一个接口创建很多对象，会产生大量的重复代码。为解决这个问题，人们开始使用工厂模式的一种变体。</p><h4 id="3-1-创建一个对象"><a href="#3-1-创建一个对象" class="headerlink" title="3.1 创建一个对象"></a>3.1 创建一个对象</h4><p>创建一个对象，然后给这个对象添加属性和方法</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    name<span class="token punctuation">:</span><span class="token string">"夏怀球"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">,</span>    run<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>age<span class="token punctuation">)</span></code></pre><p>以上这个案例创建了一个对象，并且创建了属性和方法。在run()方法里的this,表示对象obj对象本身。这种方法是JavaScript创建对象最基本的方法。有个非常大的缺点，想创建一个类似的对象，会产生大量的在代码。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj2 <span class="token operator">=</span> obj<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//得到obj的引用</span>obj2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"候华雨"</span>  <span class="token comment" spellcheck="true">//因为是引用，所以在改变obj2的同时。也改变了obj里面的属性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//&amp;#123;name: "候华雨", age: 21, run: ƒ&amp;#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//候华雨</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>age<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//21</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>name<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>age<span class="token punctuation">)</span></code></pre><p>以上这个案例我们使用了对象引用，实际上就是指向了同一个对象，在改变其中一个的同时，另一个也发生了变化。</p><h4 id="3-2-工厂模式"><a href="#3-2-工厂模式" class="headerlink" title="3.2 工厂模式"></a>3.2 工厂模式</h4><p>为了解决多个类似对象声明的问题，我们可以使用一种叫工厂模式的方法，这种方法可以解决实例化对象产生的大量的重复代码的问题</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//集中化实例函数</span><span class="token keyword">function</span> <span class="token function">createObject</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        name<span class="token punctuation">:</span>name<span class="token punctuation">,</span>        age<span class="token punctuation">:</span>age<span class="token punctuation">,</span>        run<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' - '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> obj<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token function">createObject</span><span class="token punctuation">(</span><span class="token string">'夏怀球'</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token function">createObject</span><span class="token punctuation">(</span><span class="token string">'朱鹏富'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//保持了独立性</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>函数createObject()能够根据接受的参数来构建一个包含所有必要信息的obj 对象。可以无数次地调用这个函数，而每次它都会返回一个包含两个属性一个方法的对象。工厂模式虽然解决了创建多个相似对象的问题，但却没有解决对象识别的问题（即怎样知道一个对象的类型）。因为无法搞清楚到底是哪个对象的实例</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> p3 <span class="token operator">=</span> <span class="token function">createObject</span><span class="token punctuation">(</span><span class="token string">'办公用品'</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p3<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> p3<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//Object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> p2<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//Object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p3 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//true</span></code></pre><p>于是随着JavaScript的发展，又一个新模式出现了。构造函数</p><h4 id="3-3-构造函数"><a href="#3-3-构造函数" class="headerlink" title="3.3 构造函数"></a>3.3 构造函数</h4><p>前几章介绍过，ECMAScript 中的构造函数可用来创建特定类型的对象。像Object 和Array 这样的原生构造函数，在运行时会自动出现在执行环境中。此外，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。例如，可以使用构造函数模式将前面的例子重写如下<br>#####　3.3.1 创建第一个自定义构造函数</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 创建一个构造函数</span><span class="token keyword">function</span> <span class="token function">Obj</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>run <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'--'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用一个原生的构造函数</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 调用一个自定义的构造函数和调用原生的构造函数是一样的</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Obj</span><span class="token punctuation">(</span><span class="token string">'钱宇亮'</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Obj</span><span class="token punctuation">(</span><span class="token string">'温鑫'</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 又创建一个构造函数</span><span class="token keyword">function</span> <span class="token function">Desk</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>run <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'--'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> desk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Desk</span><span class="token punctuation">(</span><span class="token string">'桌子'</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>desk<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2 <span class="token keyword">instanceof</span> <span class="token class-name">Desk</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//false  我是属于Obj的实例，不是Desk</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>desk <span class="token keyword">instanceof</span> <span class="token class-name">Desk</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//true  从属于Desk对象 desk是构造函数Desk的实例</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>desk <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//所有的构造函数都是属于Object</span></code></pre><p>使用构造函数的方法，解决了重复实例化的问题，又解决对象识别的问题，但问题在于，在我们的构造函数中，并没有看到 new Object(), 但是你去判断我们自定的构造函数是否从属于Object的时候，会得到真，表示是object的实例。而且还有实例化Obj()，这个是从哪里来的呢？<br>使用了构造函数的方法，和使用工厂模的方法他们有以下不同之处：</p><pre><code>1.构造函数没有显式地创建对象（new Object()）2.直接将属性和方法赋给了this 对象；3.没有return 语句。</code></pre><h5 id="3-3-2-构造函数方法的规范"><a href="#3-3-2-构造函数方法的规范" class="headerlink" title="3.3.2 构造函数方法的规范"></a>3.3.2 构造函数方法的规范</h5><p>1.此外，还应该注意到函数名Desk 使用的是大写字母D。按照惯例，构造函数始终都应该以一个大写字母开头，而非构造函数则应该以一个小写字母开头，因为构造函数本身也是函数，只不过可以用来创建对象而已。</p><blockquote><p>首字母大写并非强制性的，但是这是行业规则，有助于区分普通函数和构造<br>2.要创建Desk 的新实例，必须使用new 操作符。</p></blockquote><p>既然通过构造函数可以创建对象，哪么这个对象是从哪里来的。new Object()在什么地方执行？<br>执行过程如下：</p><pre><code>1.当使用了构造函数，并且new 构造函数(), 哪么解释器后台会自动执行 new Object();2.将构造函数的作用域赋给新对象,也就是通过new Object()创建出来的对象，而函数体内的this就代表了new Object()出来新对象；3.执行构造函数中的代码（为这个新对象添加属性）；4.返回新对象。</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Desk</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 隐式的调用 new Object</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">180</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>run <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'--'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 隐式的返回 return this</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> desk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Desk</span><span class="token punctuation">(</span><span class="token string">'桌子'</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在前面例子的最后obj 和obj2 分别保存着Obj的一个不同的实例。这两个对象都有一个constructor（构造函数）属性，该属性指向Person，如下所示。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span><span class="token function">alert</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Obj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span></code></pre><p>对象的constructor 属性最初是用来标识对象类型的。但是，提到检测对象类型，还是instanceof操作符要更可靠一些。我们在这个例子中创建的所有对象既是Object 的实例，同时也是Obj的实例，这一点通过instanceof 操作符可以得到验证。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span><span class="token function">alert</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Obj</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span><span class="token function">alert</span><span class="token punctuation">(</span>obj2 <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span><span class="token function">alert</span><span class="token punctuation">(</span>obj2 <span class="token keyword">instanceof</span> <span class="token class-name">Obj</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span></code></pre><h5 id="3-3-3-将构造函数当作普通函数"><a href="#3-3-3-将构造函数当作普通函数" class="headerlink" title="3.3.3 将构造函数当作普通函数"></a>3.3.3 将构造函数当作普通函数</h5><p>构造函数与其他函数的唯一区别，就在于调用它们的方式不同。不过，构造函数毕竟也是函数，不存在定义构造函数的特殊语法。任何函数，只要通过new 操作符来调用，那它就可以作为构造函数；而任何函数，如果不通过new 操作符来调用，那它跟普通函数也不会有什么两样。</p><p>1.当前例子中代码展示了构造函数的典型用法，即使用new 操作符来创建一个新对象</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> desk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Desk</span><span class="token punctuation">(</span><span class="token string">'桌子'</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>desk<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>2.两行代码展示了不使用new 操作符调用Desk()会出现什么结果：属性和方法都被添加给window对象了。当在全局作用域中调用一个函数时，this 对象总是指向Global 对象（在浏览器中就是window 对象）。因此，在调用完函数之后，可以通过window 对象来调用run()方法，并且还返回了”温鑫”。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 作为普通函数调用</span><span class="token function">Desk</span><span class="token punctuation">(</span><span class="token string">"温鑫"</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 添加到window</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>3.在另一个对象的作用域中调用,使用call()在某个特殊对象的作用域中调用Desk()函数。这里是在对象o 的作用域中调用的，因此调用后o 就拥有了Desk所有属性和run()方法</p><p>var o = new Object();<br>Desk.call(o,’桌子’,22);   //改变了Desk函数内的this的指向<br>alert(o.run())<br>4.在另一个对象的作用域中调用,使用apply()在某个特殊对象的作用域中调用Desk()函数。这里是在对象this(window) 的作用域中调用的，因此调用后this(window)就拥有了Desk所有属性和run()方法</p><pre class=" language-javascript"><code class="language-javascript">Desk<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'window'</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">alert</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="3-4-原型模式"><a href="#3-4-原型模式" class="headerlink" title="3.4 原型模式"></a>3.4 原型模式</h4><p>我们创建的每个函数都有一个prototype（原型）属性，这个属性是一个指针，指向一个对象，而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。如果按照字面意思来理解，那么prototype 就是通过调用构造函数而创建的那个对象实例的原型对象。使用原型对象的好处是可以让所有对象实例共享它所包含的属性和方法。换句话说，不必在构造函数中定义对象实例的信息，而是可以将这些信息直接添加到原型对象中。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//声明了一个构造函数;</span>Obj<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"张志翔"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//原型属性</span>Obj<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span>Obj<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>run <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//原型方法</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span>run <span class="token operator">===</span> o2<span class="token punctuation">.</span>run<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//方法的引用地址保持一致</span></code></pre><h5 id="3-4-1-理解原型对象"><a href="#3-4-1-理解原型对象" class="headerlink" title="3.4.1 理解原型对象"></a>3.4.1 理解原型对象</h5><p>先来画两个图<br>1.构造函数方式<br><img src="/child/2020/08/05/JS%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%9B%BE.png" alt="构造函数方式"></p><p>2.原型模式方式<br><img src="/child/2020/08/05/JS%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F.png" alt="原型模式方式"></p><p>在原型模式声明中，多了两个属性，这两个属性都是创建对象时自动生成的。<strong>proto</strong> 属性是实例指向原型对象的一个指针，作用就是指向构造函数的原型属性 constructor 。通过这两个属性。就可以访问到原型里的属性和方法了。<br>可以通过实例访问原型对象的内容，但是只能使用<strong>proto</strong> 属性</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//可以得到原型对象中的内容也可以直接使用构造函数访问prototype得到相关信息</span></code></pre><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Obj<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//可以得到原型对象中的内容</span></code></pre><h6 id="3-4-1-1-isPrototypeOf-方法"><a href="#3-4-1-1-isPrototypeOf-方法" class="headerlink" title="3.4.1.1 isPrototypeOf()方法"></a>3.4.1.1 isPrototypeOf()方法</h6><p>判断一个对象是否指向了构造的原型对象。可以使用 isPrototypeOf() 方法来测试。</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Obj<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototyoeOf</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//只要是实例化了对象。都会指向</span></code></pre><p>原型模式的执行流程（就近原则）</p><pre><code>1.先查找构造函数实例里的属性和方法，如果有。就立刻返回2.如果构造函数实例中没有，则去原型对象里找，如果有就返回</code></pre><p>虽然我们可以通过对象实例访问原型中的值，但是不能通过对象实例去重写原型中的值。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//声明了一个构造函数;</span>Obj<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"张志翔"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//原型属性</span>Obj<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">21</span><span class="token punctuation">;</span>Obj<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>run <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//原型方法</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>name<span class="token punctuation">)</span>o<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'刘杨'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">var</span> o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o2<span class="token punctuation">.</span>name<span class="token punctuation">)</span></code></pre><p>如果希望o实例可以继续访问到原型内的值，可以把构造函数内的属性删除就可以了。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">delete</span> o<span class="token punctuation">.</span>name   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>name<span class="token punctuation">)</span></code></pre><h6 id="3-4-1-2-hasOwnProperty-方法"><a href="#3-4-1-2-hasOwnProperty-方法" class="headerlink" title="3.4.1.2 hasOwnProperty()方法"></a>3.4.1.2 hasOwnProperty()方法</h6><p>使用hasOwnProperty()方法可以检测一个属性是存在于实例中，还是存在于原型中。这个方法（不要忘了它是从Object 继承来的）只在给定属性存在于对象实例中时，才会返回true</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//如果实例中有返回true,否则返回fasle</span></code></pre><h6 id="3-4-1-3-原型与-in-操作符"><a href="#3-4-1-3-原型与-in-操作符" class="headerlink" title="3.4.1.3 原型与 in 操作符"></a>3.4.1.3 原型与 in 操作符</h6><p>有两种方式使用in 操作符：单独使用和在for-in 循环中使用。在单独使用时，in 操作符会在通过对象能够访问给定属性时返回true，无论该属性存在于实例中还是原型中</p><p>console.log(‘name’ in o)  ////无论该属性存在于实例中还是原型中 都会返回true  除非都没有<br>同时使用hasOwnProperty()方法和in 操作符，就可以确定该属性到底是存在于对象中，还是存在于原型中</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>o<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token string">'name'</span> <span class="token keyword">in</span> o<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>根据上面的实际情况。我们可以把它封成一个函数来实用</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">isProtoAttr</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> attr<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">!</span>object<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>attr <span class="token keyword">in</span> object<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">isProtoAttr</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span><span class="token string">'aaa'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h6 id="3-4-1-4-Object-keys"><a href="#3-4-1-4-Object-keys" class="headerlink" title="3.4.1.4 Object.keys()"></a>3.4.1.4 Object.keys()</h6><p>要取得对象上所有可枚举的实例属性，可以使用ECMAScript 5 的Object.keys()方法。这个方法接收一个对象作为参数，返回一个包含所有可枚举属性的字符串数组</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Obj<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"李虎"</span><span class="token punctuation">;</span>Obj<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>Obj<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>job <span class="token operator">=</span> <span class="token string">"前端工程师"</span><span class="token punctuation">;</span>Obj<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">var</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>Obj<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ["name", "age", "job", "sayName"]</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"陈洁钰"</span><span class="token punctuation">;</span>p1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token keyword">var</span> p1keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1keys<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//["name", "age"]</span></code></pre><p>这里，变量keys 中将保存一个数组，数组中是字符串”name”、”age”、”job”和”sayName”。这<br>个顺序也是它们在for-in 循环中出现的顺序。如果是通过Obj 的实例调用，则Object.keys()<br>返回的数组只包含”name”和”age”这两个实例属性。</p><h6 id="3-4-1-5-Object-getOwnPropertyNames"><a href="#3-4-1-5-Object-getOwnPropertyNames" class="headerlink" title="3.4.1.5 Object.getOwnPropertyNames()"></a>3.4.1.5 Object.getOwnPropertyNames()</h6><p>如果你想要得到所有实例属性，无论它是否可枚举，都可以使用Object.getOwnPropertyNames()<br>方法。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> keys <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyNames</span><span class="token punctuation">(</span>Obj<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>keys<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//"constructor,name,age,job,sayName"</span></code></pre><p>注意:结果中包含了不可枚举的constructor 属性。Object.keys()和Object.getOwnPropertyNames()方法都可以用来替代for-in 循环</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 用for-in遍历所有的key</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> Obj<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Obj<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> element <span class="token operator">=</span> Obj<span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 如果使用了getOwnPropertyNames或keys方法之后.可以替换</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> element <span class="token operator">=</span> keys<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span></code></pre><h6 id="3-4-1-6-更简单的原型语法"><a href="#3-4-1-6-更简单的原型语法" class="headerlink" title="3.4.1.6 更简单的原型语法"></a>3.4.1.6 更简单的原型语法</h6><p>前面例子中每添加一个属性和方法就要敲一遍Person.prototype。为减少不必要的输入，也为了从视觉上更好地封装原型的功能，更常见的做法是用一个包含所有属性和方法的对象字面量来重写整个原型对象</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Obj<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//使用字面量对象的方式</span>    name<span class="token punctuation">:</span><span class="token string">"李志豪"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span><span class="token number">180</span><span class="token punctuation">,</span>    run<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Obj</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Obj<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Object<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span></code></pre><p>在上面的代码中，我们将Obj.prototype 设置为等于一个以对象字面量形式创建的新对象。最终结果相同，但有一个例外：constructor 属性不再指向Obj 了。前面曾经介绍过，每创建一个函数，就会同时创建它的prototype 对象，这个对象也会自动获得constructor 属性。<br>而我们在这里使用的语法，本质上完全重写了默认的prototype 对象，因此constructor 属性也就变成了新对象的constructor 属性（指向Object 构造函数），不再指向Obj 函数。此时，尽管instanceof操作符还能返回正确的结果，但通过constructor 已经无法确定对象的类型了。</p><p><strong>重定向constructor</strong></p><p>在此，用instanceof 操作符测试Object 和Person 仍然返回true，但constructor 属性则<br>等于Object 而不等于Person 了。如果constructor 的值真的很重要，可以像下面这样特意将它设<br>置回适当的值。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Obj<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//使用字面量对象的方式</span>    constructor<span class="token punctuation">:</span>Obj<span class="token punctuation">;</span>    name<span class="token punctuation">:</span><span class="token string">"李志豪"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span><span class="token number">180</span><span class="token punctuation">,</span>    run<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Obj</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Obj<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Object<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//false</span></code></pre><p>原型声明是有先后顺序的。不能重写。如果重写会切断之前的原型</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Obj<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//使用字面量对象的方式</span>    constructor<span class="token punctuation">:</span>Obj<span class="token punctuation">,</span>    name<span class="token punctuation">:</span><span class="token string">"李志豪"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span><span class="token number">180</span><span class="token punctuation">,</span>    run<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Obj<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//会切断前面的原型关系</span>    name<span class="token punctuation">:</span><span class="token string">"吴旭"</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Obj</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Obj<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>constructor <span class="token operator">==</span> Object<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//false</span></code></pre><h5 id="3-4-2-原生对象的原型"><a href="#3-4-2-原生对象的原型" class="headerlink" title="3.4.2 原生对象的原型"></a>3.4.2 原生对象的原型</h5><p>原型对象不仅仅可以在自定义对象的情况下使用，还能给内置的引用类型都可以使用这种方式。并且内置引用类型也使用了原型</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sort <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token operator">+</span> <span class="token string">'我让你排序'</span>    <span class="token comment" spellcheck="true">// sort等于是重写了原生内置的这个方法，原生内置的方法就失效了</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sort<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//本身存在的</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>substring<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//本身存在的</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>addstring<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 自定义的</span>String<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>addstring <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token operator">+</span> <span class="token string">'&lt;br />---中华民族是最伟大的民族'</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>addstring<span class="token punctuation">)</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'陈立果'</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">addstring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'&lt;br />'</span><span class="token punctuation">)</span><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'候华雨'</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">addstring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h5 id="3-4-3-原生对象缺点"><a href="#3-4-3-原生对象缺点" class="headerlink" title="3.4.3 原生对象缺点"></a>3.4.3 原生对象缺点</h5><p>原型模式也不是没有缺点。首先，它省略了为构造函数传递初始化参数这一环节，结果所有实例在默认情况下都将取得相同的属性值。虽然这会在某种程度上带来一些不方便，但还不是原型的最大问题。原型模式的最大问题是由其共享的本性所导致的。</p><p>原型中所有属性是被很多实例共享的，这种共享对于函数非常合适。对于那些包含基本值的属性倒也说得过去，毕竟（如前面的例子所示），通过在实例上添加一个同名属性，可以隐藏原型中的对应属性。然而，对于包含引用类型值的属性来说，问题就比较突出了</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Obj<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//使用字面量对象的方式</span>    constructor<span class="token punctuation">:</span>Obj<span class="token punctuation">,</span>    name<span class="token punctuation">:</span><span class="token string">"李志豪"</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">,</span>    height<span class="token punctuation">:</span><span class="token number">180</span><span class="token punctuation">,</span>    arr<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    run<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' - '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>o1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'姚宗宝'</span><span class="token punctuation">;</span>o1<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o2<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//共享带来的麻烦。多了一个4</span></code></pre><p>为了解决共享的问题和传参的问题</p><h4 id="3-5-组合使用构造函数模式和原型模式"><a href="#3-5-组合使用构造函数模式和原型模式" class="headerlink" title="3.5 组合使用构造函数模式和原型模式"></a>3.5 组合使用构造函数模式和原型模式</h4><p>创建自定义类型的最常见方式，就是组合使用构造函数模式与原型模式。构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性。结果，每个实例都会有自己的一份实例属性的副本，但同时又共享着对方法的引用，最大限度地节省了内存。另外，这种混成模式还支持向构造函数传递参数；可谓是集两种模式之长</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 组合使用构造函数模式和原型模式</span><span class="token keyword">function</span> <span class="token function">Obj</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age  <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Obj<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//使用字面量对象的方式</span>    constructor<span class="token punctuation">:</span>Obj<span class="token punctuation">,</span>    run<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' - '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Obj</span><span class="token punctuation">(</span><span class="token string">'姚宗宝'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>o1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'姚宗宝'</span><span class="token punctuation">;</span>o1<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">var</span> o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Obj</span><span class="token punctuation">(</span><span class="token string">'张家顺'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o2<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   </code></pre><p>在这个例子中，实例属性都是在构造函数中定义的，而由所有实例共享的属性constructor 和方<br>法run()则是在原型中定义的。而修改了o1.arr（向其中添加一个新字符串），并不<br>会影响到o2.arr，因为它们分别引用了不同的数组。<br>这种构造函数与原型混成的模式，是目前在ECMAScript 中使用最广泛、认同度最高的一种创建自<br>定义类型的方法。可以说，这是用来定义引用类型的一种默认模式。</p><h4 id="3-6-动态原型模式"><a href="#3-6-动态原型模式" class="headerlink" title="3.6 动态原型模式"></a>3.6 动态原型模式</h4><p>有其他OO 语言经验的开发人员在看到独立的构造函数和原型时，很可能会感到非常困惑。动态原型模式正是致力于解决这个问题的一个方案，它把所有信息都封装在了构造函数中，而通过在构造函数中初始化原型（仅在必要的情况下），又保持了同时使用构造函数和原型的优点。换句话说，可以通过检查某个应该存在的方法是否有效，来决定是否需要初始化原型</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Obj</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age  <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">.</span>run <span class="token operator">!=</span> <span class="token string">'function'</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>           Obj<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>run <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>              <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' - '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arr<span class="token punctuation">;</span>           <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>           <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> o1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Obj</span><span class="token punctuation">(</span><span class="token string">'姚宗宝'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>o1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'姚宗宝'</span><span class="token punctuation">;</span>o1<span class="token punctuation">.</span>arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">var</span> o2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Obj</span><span class="token punctuation">(</span><span class="token string">'张家顺'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o2<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   </code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS继承</title>
      <link href="2020/08/05/JS%E7%BB%A7%E6%89%BF/"/>
      <url>2020/08/05/JS%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承是OO 语言中的一个最为人津津乐道的概念。许多OO 语言都支持两种继承方式：接口继承和实现继承。接口继承只继承方法签名，而实现继承则继承实际的方法。如前所述，由于函数没有签名，在ECMAScript 中无法实现接口继承。ECMAScript 只支持实现继承，而且其实现继承主要是依靠原型链来实现的。</p><h3 id="一-原型链"><a href="#一-原型链" class="headerlink" title="一 原型链"></a>一 原型链</h3><pre class=" language-javascript"><code class="language-javascript">ECMAScript 中描述了原型链的概念，并将原型链作为实现继承的主要方法。<span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'中国'</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Children</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token string">'5000'</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Grandson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token number">190</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//children的原型去继续了Parent;</span>Children<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Children</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>children<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//让Grandson直接继续Children</span>Grandson<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Children</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> grandson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Grandson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>grandson<span class="token punctuation">.</span>name<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>grandson<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//让了Grandson直接继续Parent</span>Grandson<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> grandson <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Grandson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>grandson<span class="token punctuation">.</span>name<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>grandson<span class="token punctuation">.</span>age<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//undefined</span></code></pre><p>以上代码定义了三个类型：Parent 和Children及Grandson。每个类型分别有一个属性。它们的主要区别是Children继承了Parent，Grandson又继承了Children，而继承是通过创建Parent 的实例，并将该实例赋给<br>Children.prototype 实现的。实现的本质是重写原型对象，代之以一个新类型的实例。换句话说，原来存在于Parent 的实例中的所有属性和方法，现在也存在Children.prototype 中了。在确立了继承关系之后，这样就在继承了Parent的属性和所有的方法</p><p>事实上，前面例子中展示的原型链还少一环。我们知道，所有引用类型默认都继承了Object，而这个继承也是通过原型链实现的。大家要记住，所有函数的默认原型都是Object 的实例，因此默认原型都会包含一个内部指针，指向Object.prototype。这也正是所有自定义类型都会继承toString()、valueOf()等默认方法的根本原因。</p><h4 id="1-1-确定原型和实例的关系"><a href="#1-1-确定原型和实例的关系" class="headerlink" title="1.1 确定原型和实例的关系"></a>1.1 确定原型和实例的关系</h4><p>继续后的实例，他们有一个关系从属<br>可以通过两种方式来确定原型和实例之间的关系。第一种方式是使用instanceof 操作符，只要用这个操作符来测试实例与原型链中出现过的构造函数，结果就会返回true。以下几行代码就说明了这一点</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>children <span class="token keyword">instanceof</span> <span class="token class-name">Parent</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>grandson <span class="token keyword">instanceof</span> <span class="token class-name">Parent</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>grandson <span class="token keyword">instanceof</span> <span class="token class-name">Children</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>children <span class="token keyword">instanceof</span> <span class="token class-name">Children</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>children <span class="token keyword">instanceof</span> <span class="token class-name">Grandson</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//false</span></code></pre><p>第二种方式是使用isPrototypeOf()方法。同样，只要是原型链中出现过的原型，都可以说是该<br>原型链所派生的实例的原型，因此isPrototypeOf()方法也会返回true，如下所示。</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Children<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span></code></pre><h4 id="1-2-谨慎地定义方法"><a href="#1-2-谨慎地定义方法" class="headerlink" title="1.2 谨慎地定义方法"></a>1.2 谨慎地定义方法</h4><p>子类型有时候需要重写超类型中的某个方法，或者需要添加超类型中不存在的某个方法。但不管怎样，给原型添加方法的代码一定要放在替换原型的语句（Children.prototype = new Parent();）之后。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'中国'</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getParentValue <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Children</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token string">'5000'</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Children<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Children<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getChildrenValue <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Children<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getParentValue <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span>  <span class="token boolean">false</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Children</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getParentValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">getChildrenValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 但通过Parent的实例调用getParentValue()时，还会继续调用原来的那个方法</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getParentValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//中国</span></code></pre><p>在以上代码中，第一个方法getChildrenValue被添加到了Children中。第二个方法getParentValue是原型链中已经存在的一个方法，但重写这个方法将会屏蔽原来的那个方法。换句话说，当通过Children 的实例调用getParentValue时，调用的就是这个重新定义的方法；但通过Parent的实例调用getParentValue()时，还会继续调用原来的那个方法。这里要格外注意的是，必须在用Parent 的实例替换原型之后，再定义这两个方法。</p><h4 id="1-3-原型链的问题"><a href="#1-3-原型链的问题" class="headerlink" title="1.3 原型链的问题"></a>1.3 原型链的问题</h4><p>原型链虽然很强大，可以用它来实现继承，但它也存在一些问题。其中，最主要的问题来自包含引用类型值的原型。想必大家还记得，我们前面介绍过包含引用类型值的原型属性会被所有实例共享；而这也正是为什么要在构造函数中，而不是在原型对象中定义属性的原因。在通过原型来实现继承时，原型实际上会变成另一个类型的实例。于是，原先的实例属性也就顺理成章地变成了现在的原型属性了。下列代码可以用来说明这个问题。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Children</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token string">'5000'</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Children<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> children1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Children</span><span class="token punctuation">(</span><span class="token punctuation">)</span>children1<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>children1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token keyword">var</span> children2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Children</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>children2<span class="token punctuation">.</span>name<span class="token punctuation">)</span></code></pre><p>这个例子中的Parent 构造函数定义了一个name 属性，该属性包含一个数组（引用类型值）。Parent 的每个实例都会有各自包含自己数组的name 属性。当Children通过原型链继承了Parent 之后，Children.prototype 就变成了Parent 的一个实例，因此它也拥有了一个它自己的name 属性——就跟专门创建了一个Children.prototype.name 属性一样。但结果是什么呢？结果是Children name 属性。而我们children1.name 的修改能够通过children2.name 反映出来，就已经充分证实了这一点。</p><p>原型链的第二个问题是：在创建子类型的实例时，不能向超类型的构造函数中传递参数。实际上，应该说是没有办法在不影响所有对象实例的情况下，给超类型的构造函数传递参数。有鉴于此，再加上前面刚刚讨论过的由于原型中包含引用类型值所带来的问题，实践中很少会单独使用原型链。</p><h3 id="二-借用构造函数"><a href="#二-借用构造函数" class="headerlink" title="二 借用构造函数"></a>二 借用构造函数</h3><p>为了解决引用共享和超类型无法传参的问题，使用这种借用构造函数（有时候也叫做伪造对象或经典继承）的技术，或着成为对象冒充的技术解决这两种问题。<br>这种技术的基本思想相当简单，即在子类型构造函数的内部调用超类型构造函数。别忘了，函数只不过是在特定环境中执行代码的对象，因此通过使用apply()和call()方法也可以在（将来）新创建的对象上执行构造函数。</p><h4 id="2-1-传递参数"><a href="#2-1-传递参数" class="headerlink" title="2.1 传递参数"></a>2.1 传递参数</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Children</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Parent<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>age<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//伪造对象或经典继,给超类传参</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">var</span> children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Children</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>children<span class="token punctuation">.</span>age<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>children<span class="token punctuation">.</span>name<span class="token punctuation">)</span> children<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'aaaa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>children<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token keyword">var</span> children2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Children</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>children2<span class="token punctuation">.</span>age<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>children2<span class="token punctuation">.</span>name<span class="token punctuation">)</span> </code></pre><p>代码中 Parent.call(this,age) 的代码“借调”了超类型的构造函数。通过使用call()方法（或apply()方法也可以），我们实际上是在（未来将要）新创建的Children 实例的环境下调用了Parent 构造函数。这样一来，就会在新Children 对象上执行Parent()函数中定义的所有对象初始化代码。结果，Children的每个实例就都会具有自己的name 属性的副本了。<br>以上代码中的Parent 只接受一个参数age，该参数会直接赋给一个属性。在Children 构造函数内部调用Parent 构造函数时，实际上是为Children 的实例设置了age 属性。为了确保Parent 构造函数不会重写子类型的属性，可以在调用超类型构造函数后，再添加应该在子类型中定义的属性。</p><h4 id="2-2-借用构造函数的问题"><a href="#2-2-借用构造函数的问题" class="headerlink" title="2.2 借用构造函数的问题"></a>2.2 借用构造函数的问题</h4><p>如果仅仅是借用构造函数，那么也将无法避免构造函数模式存在的问题——方法都在构造函数中定义，因此函数复用就无从谈起了。而且，在超类型的原型中定义的方法，对子类型而言也是不可见的，结果所有类型都只能使用构造函数模式。考虑到这些问题，借用构造函数的技术也是很少单独使用的。所<br>所以组合继承来了！需要我们用原型链+借用构造函数的模式</p><h3 id="三-组合继承"><a href="#三-组合继承" class="headerlink" title="三 组合继承"></a>三 组合继承</h3><p>组合继承，有时候也叫做伪经典继承，指的是将原型链和借用构造函数的技术组合到一块，从而发挥二者之长的一种继承模式。其背后的思路是使用原型链实现对原型属性和方法的继承，而通过借用构造函数来实现对实例属性的继承。这样，既通过在原型上定义方法实现了函数复用，又能够保证每个实例都有它自己的属性。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Parent<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>run <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">' - '</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Children</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    Parent<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>age<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//伪造对象或经典继,给超类传参</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>Children<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//原型继承</span><span class="token keyword">var</span> children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Children</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span>children<span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>children<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">var</span> children2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Children</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>children2<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>children2<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>组合继承避免了原型链和借用构造函数的缺陷，融合了它们的优点，成为JavaScript 中最常用的继承模式。而且，instanceof 和isPrototypeOf()也能够用于识别基于组合继承创建的对象。</p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
